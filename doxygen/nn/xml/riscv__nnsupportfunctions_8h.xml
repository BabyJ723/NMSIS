<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="riscv__nnsupportfunctions_8h" kind="file">
    <compoundname>riscv_nnsupportfunctions.h</compoundname>
    <includes local="yes">riscv_math.h</includes>
    <includes local="yes">riscv_common_tables.h</includes>
    <includedby refid="riscv__nnfunctions_8h" local="yes">riscv_nnfunctions.h</includedby>
    <includedby refid="riscv__nntables_8c" local="yes">riscv_nntables.c</includedby>
    <includedby refid="riscv__q7__to__q15__no__shift_8c" local="yes">riscv_q7_to_q15_no_shift.c</includedby>
    <includedby refid="riscv__q7__to__q15__reordered__no__shift_8c" local="yes">riscv_q7_to_q15_reordered_no_shift.c</includedby>
    <includedby refid="riscv__q7__to__q15__with__offset_8c" local="yes">riscv_q7_to_q15_with_offset.c</includedby>
    <includedby refid="riscv__q7__to__q7__no__shift_8c" local="yes">riscv_q7_to_q7_no_shift.c</includedby>
    <includedby refid="riscv__q7__to__q7__reordered__no__shift_8c" local="yes">riscv_q7_to_q7_reordered_no_shift.c</includedby>
    <incdepgraph>
      <node id="116">
        <label>riscv_math.h</label>
      </node>
      <node id="117">
        <label>riscv_common_tables.h</label>
      </node>
      <node id="115">
        <label>riscv_nnsupportfunctions.h</label>
        <link refid="riscv_nnsupportfunctions.h"/>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="unionriscv__nnword" prot="public">riscv_nnword</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1a2953f124ae444ebdd2b2a0873ac36b7e" prot="public" static="no">
        <name>LEFT_SHIFT</name>
        <param><defname>_shift</defname></param>
        <initializer>(_shift &gt; 0 ? _shift : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="42" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1a26af54489c1401b91595bf0c92ef87c4" prot="public" static="no">
        <name>RIGHT_SHIFT</name>
        <param><defname>_shift</defname></param>
        <initializer>(_shift &gt; 0 ? 0 : -_shift)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="43" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1a1eb725c94dbb052aa24b62321be0445b" prot="public" static="no">
        <name>Q31_MIN</name>
        <initializer>(0x80000000L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="44" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1a468734b237f1c95a31715aa2b60a576e" prot="public" static="no">
        <name>Q31_MAX</name>
        <initializer>(0x7FFFFFFFL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="45" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1ad935f1ff1a50822e317bdb321ce991ad" prot="public" static="no">
        <name>MAX</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>(A) &gt; (B) ? (A) : (B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="47" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1adcd021ac91d43a62b2cdecf9a5b971a7" prot="public" static="no">
        <name>MIN</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>(A) &lt; (B) ? (A) : (B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="48" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__nnsupportfunctions_8h_1a4cbd428a2b4a4f6b2a6e4219520c7ce0" prot="public" static="no">
        <name>NN_ROUND</name>
        <param><defname>out_shift</defname></param>
        <initializer>( (0x1 &lt;&lt; out_shift) &gt;&gt; 1 )</initializer>
        <briefdescription>
<para>macro for adding rounding offset </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="250" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="riscv__nnsupportfunctions_8h_1a065cc3657730e4d77f458ca5fc435e9b" prot="public" static="no">
        <name>riscv_nn_activation_type</name>
        <enumvalue id="riscv__nnsupportfunctions_8h_1a065cc3657730e4d77f458ca5fc435e9ba685bb59b4c7010188b63a842926eef9e" prot="public">
          <name>RISCV_SIGMOID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sigmoid activation function </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__nnsupportfunctions_8h_1a065cc3657730e4d77f458ca5fc435e9ba79777273d51f89dc9dcf2522f700256b" prot="public">
          <name>RISCV_TANH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tanh activation function </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Struct for specifying activation function types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="68" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="67" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nndata__convert_1gaaf28207f289291c26b3fb4dac25c80bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q15_no_shift</definition>
        <argsstring>(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_q15_no_shift</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the q7 vector to q15 vector without left-shift. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
Converts the elements of the q7 vector to q15 vector without left-shift.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para></para></simplesect>
The equation used for the conversion process is:</para><para><preformatted>
        pDst[n] = (q15_t) pSrc[n];   0 &lt;= n &lt; blockSize.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="90" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_q7_to_q15_no_shift.c" bodystart="60" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__nndata__convert_1ga3caedd7ab46f10c71af9d3d7876215df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q7_no_shift</definition>
        <argsstring>(const q7_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_q7_no_shift</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q7 vector to Q7 vector without left-shift. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para></para></simplesect>
The equation used for the conversion process is:</para><para><preformatted>
        pDst[n] = (q15_t) pSrc[n];   0 &lt;= n &lt; blockSize.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="92" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_q7_to_q7_no_shift.c" bodystart="60" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__NNBasicMath_1gae72ab1e8045b992f1bf49b0bbafee3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_nn_add_q7</definition>
        <argsstring>(const q7_t *input, q31_t *output, uint32_t block_size)</argsstring>
        <name>riscv_nn_add_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Non-saturating addition of elements of a q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*input</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*output</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the q31 output variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none. </para></simplesect>
<simplesect kind="par"><title>Description:</title><para></para></simplesect>
2^24 samples can be added without saturating the result.</para><para>The equation used for the conversion process is:</para><para><preformatted>
 sum = input[0] + input[1] + .. + input[block_size -1]
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="111" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_nn_add_q7.c" bodystart="43" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__nndata__convert_1ga4424909bb2c474ae80731cc6fc688421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q15_reordered_no_shift</definition>
        <argsstring>(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_q15_reordered_no_shift</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the q7 vector to reordered q15 vector without left-shift. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
Converts the elements of the q7 vector to reordered q15 vector without left-shift.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
This function does the q7 to q15 expansion with re-ordering</para><para><preformatted>
                         |   A1   |   A2   |   A3   |   A4   |</preformatted></para><para><preformatted>                          0      7 8     15 16    23 24    31
</preformatted></para><para>is converted into:</para><para><preformatted>
 |       A1       |       A3       |   and  |       A2       |       A4       |</preformatted></para><para><preformatted>  0             15 16            31          0             15 16            31
</preformatted></para><para>This looks strange but is natural considering how sign-extension is done at assembly level.</para><para>The expansion of other other oprand will follow the same rule so that the end results are the same.</para><para>The tail (i.e., last (N % 4) elements) will still be in original order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="121" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_q7_to_q15_reordered_no_shift.c" bodystart="79" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__nndata__convert_1gae41bc04256cf974ec36e82c521b43d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q7_reordered_no_shift</definition>
        <argsstring>(const q7_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_q7_reordered_no_shift</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q7 vector to reordered Q7 vector without left-shift. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
This function does the q7 to q7 expansion with re-ordering</para><para><preformatted>
                         |   A1   |   A2   |   A3   |   A4   |</preformatted></para><para><preformatted>                          0      7 8     15 16    23 24    31
</preformatted></para><para>is converted into:</para><para><preformatted>
 |       A1       |       A3       |   and  |       A2       |       A4       |</preformatted></para><para><preformatted>  0             15 16            31          0             15 16            31
</preformatted></para><para>This looks strange but is natural considering how sign-extension is done at assembly level.</para><para>The expansion of other other oprand will follow the same rule so that the end results are the same.</para><para>The tail (i.e., last (N % 4) elements) will still be in original order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="123" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_q7_to_q7_reordered_no_shift.c" bodystart="79" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="group__nndata__convert_1gaad762d8ce3dcb357549463e16cc41aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q15_with_offset</definition>
        <argsstring>(const q7_t *src, q15_t *dst, uint32_t block_size, q7_t offset)</argsstring>
        <name>riscv_q7_to_q15_with_offset</name>
        <param>
          <type>const q7_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>block_size</declname>
        </param>
        <param>
          <type>q7_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Converts the elements from a q7 vector to a q15 vector with an added offset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*src</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*dst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>q7 offset to be added to each input vector element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para></para></simplesect>
The equation used for the conversion process is:</para><para><preformatted>
 dst[n] = (q15_t) src[n] + offset;   0 &lt;= n &lt; block_size.
</preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="142" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_q7_to_q15_with_offset.c" bodystart="43" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__NNBasicMath_1gae785703e6b6be36f6c643de582e1bdbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_nn_mult_q15</definition>
        <argsstring>(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t blockSize)</argsstring>
        <name>riscv_nn_mult_q15</name>
        <param>
          <type>q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>out_shift</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>q7 vector multiplication with variable output shifts </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of right-shift for output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<bold>Scaling and Overflow Behavior:</bold> <simplesect kind="par"><title></title><para>The function uses saturating arithmetic. Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.</para></simplesect>
q7 vector multiplication with variable output shifts</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of right-shift for output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<bold>Scaling and Overflow Behavior:</bold> <simplesect kind="par"><title></title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="217" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_nn_mult_q15.c" bodystart="59" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__NNBasicMath_1ga53b69e8309dbc2e6c3f6f5bc42ea3d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_nn_mult_q7</definition>
        <argsstring>(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockSize)</argsstring>
        <name>riscv_nn_mult_q7</name>
        <param>
          <type>q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>out_shift</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>q7 vector multiplication with variable output shifts </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of right-shift for output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<bold>Scaling and Overflow Behavior:</bold> <simplesect kind="par"><title></title><para>The function uses saturating arithmetic. Results outside of the allowable q7 range [0x80 0x7F] will be saturated.</para></simplesect>
q7 vector multiplication with variable output shifts</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of right-shift for output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<bold>Scaling and Overflow Behavior:</bold> <simplesect kind="par"><title></title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] will be saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="239" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/NNSupportFunctions/riscv_nn_mult_q7.c" bodystart="58" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="riscv__nnsupportfunctions_8h_1a0eed1ae83de558d25891df3a6b845ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_nn_sat_doubling_high_mult</definition>
        <argsstring>(const q31_t m1, const q31_t m2)</argsstring>
        <name>riscv_nn_sat_doubling_high_mult</name>
        <param>
          <type>const q31_t</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const q31_t</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Saturating doubling high multiply. Result matches NEON instruction VQRDMULH. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m1</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplicand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">m2</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of multiplication. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="263" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="263" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="riscv__nnsupportfunctions_8h_1aa3220bb59a32ca8406b74027c0b0f5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_nn_divide_by_power_of_two</definition>
        <argsstring>(const q31_t dividend, const q31_t exponent)</argsstring>
        <name>riscv_nn_divide_by_power_of_two</name>
        <param>
          <type>const q31_t</type>
          <declname>dividend</declname>
        </param>
        <param>
          <type>const q31_t</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Rounding divide by power of two. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dividend</parametername>
</parameternamelist>
<parameterdescription>
<para>- Dividend </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>- Divisor = power(2, exponent) Range: [0, 31] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rounded result of division. Midpoint is rounded away from zero. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="295" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="295" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="riscv__nnsupportfunctions_8h_1a033decfdd0ba2c120155019cadd216f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_nn_requantize</definition>
        <argsstring>(const q31_t val, const q31_t multiplier, const q31_t shift)</argsstring>
        <name>riscv_nn_requantize</name>
        <param>
          <type>const q31_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const q31_t</type>
          <declname>multiplier</declname>
        </param>
        <param>
          <type>const q31_t</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
<para>Requantize a given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be requantized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>left or right shift for &apos;val * multiplier&apos;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns (val * multiplier)/(2 ^ shift) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="327" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="327" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="riscv__nnsupportfunctions_8h_1aae3cc1a9193fa8abdf46d271cb95849c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_nn_read_q15x2_ia</definition>
        <argsstring>(const q15_t **in_q15)</argsstring>
        <name>riscv_nn_read_q15x2_ia</name>
        <param>
          <type>const q15_t **</type>
          <declname>in_q15</declname>
        </param>
        <briefdescription>
<para>Read 2 q15 elements and post increment pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_q15</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to pointer that holds address of input. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="338" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="338" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="riscv__nnsupportfunctions_8h_1a88800ac5c302003036c78d5ee2f79845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_nn_read_q7x4_ia</definition>
        <argsstring>(const q7_t **in_q7)</argsstring>
        <name>riscv_nn_read_q7x4_ia</name>
        <param>
          <type>const q7_t **</type>
          <declname>in_q7</declname>
        </param>
        <briefdescription>
<para>Read 4 q7 from q7 pointer and post increment pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_q7</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to pointer that holds address of input. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" line="353" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h" bodystart="353" bodyend="360"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2010-2018<sp/>Arm<sp/>Limited<sp/>or<sp/>its<sp/>affiliates.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Project:<sp/><sp/><sp/><sp/><sp/><sp/>NMSIS<sp/>NN<sp/>Library</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Title:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riscv_nnsupportfunctions.h</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Description:<sp/><sp/>Public<sp/>header<sp/>file<sp/>of<sp/>support<sp/>functions<sp/>for<sp/>NMSIS<sp/>NN<sp/>Library</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>$Date:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>July<sp/>2019</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>$Revision:<sp/><sp/><sp/><sp/>V.1.0.0</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>Target<sp/>Processor:<sp/>RISC-V<sp/>Cores</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_RISCV_NNSUPPORTFUNCTIONS_H_</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_RISCV_NNSUPPORTFUNCTIONS_H_</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;riscv_math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;riscv_common_tables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LEFT_SHIFT(_shift)<sp/><sp/>(_shift<sp/>&gt;<sp/>0<sp/>?<sp/>_shift<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RIGHT_SHIFT(_shift)<sp/>(_shift<sp/>&gt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>-_shift)</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Q31_MIN<sp/>(0x80000000L)</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>Q31_MAX<sp/>(0x7FFFFFFFL)</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(A,B)<sp/>(A)<sp/>&gt;<sp/>(B)<sp/>?<sp/>(A)<sp/>:<sp/>(B)</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MIN(A,B)<sp/>(A)<sp/>&lt;<sp/>(B)<sp/>?<sp/>(A)<sp/>:<sp/>(B)</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="53" refid="unionriscv__nnword" refkind="compound"><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionriscv__nnword" kindref="compound">riscv_nnword</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/><sp/><sp/><sp/><sp/><ref refid="unionriscv__nnword_1a132bf32a113b8edfb4417618182dfd69" kindref="member">word</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/><sp/><sp/><sp/><sp/><ref refid="unionriscv__nnword_1aaf153566cb85335577d30a685c64bd88" kindref="member">half_words</ref>[2];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>q7_t<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionriscv__nnword_1a7d27a031fb02506228b668e145be3f69" kindref="member">bytes</ref>[4];</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_SIGMOID<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_TANH<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/>riscv_nn_activation_type;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nndata__convert_1gaaf28207f289291c26b3fb4dac25c80bb" kindref="member">riscv_q7_to_q15_no_shift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,<sp/>q15_t<sp/>*<sp/>pDst,<sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nndata__convert_1ga3caedd7ab46f10c71af9d3d7876215df" kindref="member">riscv_q7_to_q7_no_shift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,<sp/>q7_t<sp/>*<sp/>pDst,<sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NNBasicMath_1gae72ab1e8045b992f1bf49b0bbafee3b1" kindref="member">riscv_nn_add_q7</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*input,<sp/>q31_t<sp/>*output,<sp/>uint32_t<sp/>block_size);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nndata__convert_1ga4424909bb2c474ae80731cc6fc688421" kindref="member">riscv_q7_to_q15_reordered_no_shift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,<sp/>q15_t<sp/>*<sp/>pDst,<sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nndata__convert_1gae41bc04256cf974ec36e82c521b43d02" kindref="member">riscv_q7_to_q7_reordered_no_shift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,<sp/>q7_t<sp/>*<sp/>pDst,<sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nndata__convert_1gaad762d8ce3dcb357549463e16cc41aaa" kindref="member">riscv_q7_to_q15_with_offset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*src,<sp/>q15_t<sp/>*dst,<sp/>uint32_t<sp/>block_size,<sp/>q7_t<sp/>offset);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(RISCV_MATH_DSP)</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*read_and_pad(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*source,<sp/>q31_t<sp/>*<sp/>out1,<sp/>q31_t<sp/>*<sp/>out2)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/><sp/><sp/><sp/><sp/>inA<sp/>=<sp/>*__SIMD32(source)++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/><sp/><sp/><sp/><sp/>inAbuf1<sp/>=<sp/>__SXTB16(__ROR(inA,<sp/>8));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/><sp/><sp/><sp/><sp/>inAbuf2<sp/>=<sp/>__SXTB16(inA);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out2<sp/>=<sp/>__PKHTB(inAbuf1,<sp/>inAbuf2,<sp/>16);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out1<sp/>=<sp/>__PKHBT(inAbuf2,<sp/>inAbuf1,<sp/>16);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q7_t<sp/>*read_and_pad_reordered(q7_t<sp/>*source,<sp/>q31_t<sp/>*<sp/>out1,<sp/>q31_t<sp/>*<sp/>out2)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/><sp/><sp/><sp/><sp/>inA<sp/>=<sp/>read_q7x4_ia(&amp;source);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out2<sp/>=<sp/>__SXTB16(__ROR(inA,<sp/>8));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out1<sp/>=<sp/>__SXTB16(inA);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q7_t<sp/>*read_and_pad_reordered_with_offset(q7_t<sp/>*source,<sp/>q31_t<sp/>*<sp/>out1,<sp/>q31_t<sp/>*<sp/>out2,q31_t<sp/>offset)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/><sp/><sp/><sp/><sp/>inA<sp/>=<sp/>read_q7x4_ia(&amp;source);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out2<sp/>=<sp/>__SXTB16(__ROR(inA,<sp/>8));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out1<sp/>=<sp/>__SXTB16(inA);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out1<sp/>=<sp/>__QADD16(*out1,offset);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out2<sp/>=<sp/>__QADD16(*out2,offset);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NNBasicMath_1gae785703e6b6be36f6c643de582e1bdbf" kindref="member">riscv_nn_mult_q15</ref>(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>out_shift,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NNBasicMath_1ga53b69e8309dbc2e6c3f6f5bc42ea3d88" kindref="member">riscv_nn_mult_q7</ref>(</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>out_shift,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor">#ifndef<sp/>RISCV_NN_TRUNCATE</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>NN_ROUND(out_shift)<sp/>(<sp/>(0x1<sp/>&lt;&lt;<sp/>out_shift)<sp/>&gt;&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>NN_ROUND(out_shift)<sp/>0</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>riscv_nn_sat_doubling_high_mult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>m1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>m2)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rounding<sp/>offset<sp/>to<sp/>add<sp/>for<sp/>a<sp/>right<sp/>shift<sp/>of<sp/>31</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>q63_t<sp/>mult<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>30;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m1<sp/>&lt;<sp/>0)<sp/>^<sp/>(m2<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult<sp/>=<sp/>1<sp/>-<sp/>mult;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>resolved<sp/>as<sp/>a<sp/>SMLAL<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>mult<sp/>=<sp/>mult<sp/>+<sp/>(q63_t)m1<sp/>*<sp/>m2;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Utilize<sp/>all<sp/>of<sp/>the<sp/>upper<sp/>32<sp/>bits.<sp/>This<sp/>is<sp/>the<sp/>doubling<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>mult<sp/>/<sp/>(1UL<sp/>&lt;&lt;<sp/>31);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m1<sp/>==<sp/>m2)<sp/>&amp;&amp;<sp/>(m1<sp/>==<sp/>Q31_MIN))</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Q31_MAX;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>riscv_nn_divide_by_power_of_two(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>dividend,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>exponent)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>remainder_mask<sp/>=<sp/>(1l<sp/>&lt;&lt;<sp/>exponent)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>remainder<sp/>=<sp/>remainder_mask<sp/>&amp;<sp/>dividend;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>dividend<sp/>&gt;&gt;<sp/>exponent;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>&apos;result&apos;<sp/>for<sp/>rounding<sp/>(mid<sp/>point<sp/>away<sp/>from<sp/>zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>threshold<sp/>=<sp/>remainder_mask<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threshold++;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&gt;<sp/>threshold)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result++;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>riscv_nn_requantize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>multiplier,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>shift)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>riscv_nn_divide_by_power_of_two(riscv_nn_sat_doubling_high_mult(val<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>LEFT_SHIFT(shift)),<sp/>multiplier),</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RIGHT_SHIFT(shift));</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>riscv_nn_read_q15x2_ia(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>**in_q15)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>memcpy(&amp;val,<sp/>*in_q15,<sp/>4);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>*in_q15<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>riscv_nn_read_q7x4_ia(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>**in_q7)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>memcpy(&amp;val,<sp/>*in_q7,<sp/>4);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>*in_q7<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Include/riscv_nnsupportfunctions.h"/>
  </compounddef>
</doxygen>
