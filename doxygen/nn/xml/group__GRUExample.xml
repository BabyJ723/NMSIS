<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__GRUExample" kind="group">
    <compoundname>GRUExample</compoundname>
    <title>Gated Recurrent Unit Example</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Description:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para>Demonstrates a gated recurrent unit (GRU) example with the use of fully-connected, Tanh/Sigmoid activation functions.</para></simplesect>
<simplesect kind="par"><title>Model definition:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para>GRU is a type of recurrent neural network (RNN). It contains two sigmoid gates and one hidden state. </para></simplesect>
<simplesect kind="par"><title></title><para>The computation can be summarized as: <preformatted>z[t] = sigmoid( W_z <sdot/> {h[t-1],x[t]} )
r[t] = sigmoid( W_r <sdot/> {h[t-1],x[t]} ) 
n[t] = tanh( W_n <sdot/> [r[t] <times/> {h[t-1], x[t]} ) 
h[t] = (1 - z[t]) <times/> h[t-1] + z[t] <times/> n[t] </preformatted> <image type="html" name="GRU.png">Gate Recurrent Unit Diagram</image>
 </para></simplesect>
<simplesect kind="par"><title>Variables Description:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para><itemizedlist>
<listitem><para><computeroutput>update_gate_weights</computeroutput>, <computeroutput>reset_gate_weights</computeroutput>, <computeroutput>hidden_state_weights</computeroutput> are weights corresponding to update gate (W_z), reset gate (W_r), and hidden state (W_n). </para></listitem>
<listitem><para><computeroutput>update_gate_bias</computeroutput>, <computeroutput>reset_gate_bias</computeroutput>, <computeroutput>hidden_state_bias</computeroutput> are layer bias arrays </para></listitem>
<listitem><para><computeroutput>test_input1</computeroutput>, <computeroutput>test_input2</computeroutput>, <computeroutput>test_history</computeroutput> are the inputs and initial history</para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="par"><title></title><para>The buffer is allocated as: </para></simplesect>
<simplesect kind="par"><title></title><para>| reset | input | history | update | hidden_state | </para></simplesect>
<simplesect kind="par"><title></title><para>In this way, the concatination is automatically done since (reset, input) and (input, history) are physically concatinated in memory. </para></simplesect>
<simplesect kind="par"><title></title><para>The ordering of the weight matrix should be adjusted accordingly.</para></simplesect>
<simplesect kind="par"><title>NMSIS DSP Software Library Functions Used:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para><itemizedlist>
<listitem><para><ref refid="group__FC_1ga73d8955ae16c57e5fe30de697459daed" kindref="member">riscv_fully_connected_mat_q7_vec_q15_opt()</ref></para></listitem><listitem><para><ref refid="group__Acti_1ga729aaae34b90575f7fa4f7a2e4e63d79" kindref="member">riscv_nn_activations_direct_q15()</ref></para></listitem><listitem><para>riscv_mult_q15()</para></listitem><listitem><para>riscv_offset_q15()</para></listitem><listitem><para>riscv_sub_q15()</para></listitem><listitem><para>riscv_copy_q15()</para></listitem></itemizedlist>
</para></simplesect>
<bold> Refer </bold> <ref refid="" kindref="compound">riscv_nnexamples_gru.cpp</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
