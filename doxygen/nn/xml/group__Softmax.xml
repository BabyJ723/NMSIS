<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__Softmax" kind="group">
    <compoundname>Softmax</compoundname>
    <title>Softmax Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Softmax_1gaa9d0de605290176e23463cbaeb84a9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_softmax_q15</definition>
        <argsstring>(const q15_t *vec_in, const uint16_t dim_vec, q15_t *p_out)</argsstring>
        <name>riscv_softmax_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>vec_in</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>dim_vec</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>p_out</declname>
        </param>
        <briefdescription>
<para>Q15 softmax function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vec_in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_vec</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector dimention </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to output vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
Here, instead of typical e based softmax, we use 2-based softmax, i.e.,:</para><para>y_i = 2^(x_i) / sum(2^x_j)</para><para>The relative output will be different here. But mathematically, the gradient will be the same with a log(2) scaling factor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/SoftmaxFunctions/riscv_softmax_q15.c" line="64" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/SoftmaxFunctions/riscv_softmax_q15.c" bodystart="64" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="group__Softmax_1ga4c7867bb7ac62d4581deda5730dce99b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_softmax_q7</definition>
        <argsstring>(const q7_t *vec_in, const uint16_t dim_vec, q7_t *p_out)</argsstring>
        <name>riscv_softmax_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>vec_in</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>dim_vec</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>p_out</declname>
        </param>
        <briefdescription>
<para>Q7 softmax function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vec_in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_vec</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector dimention </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to output vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
Here, instead of typical natural logarithm e based softmax, we use 2-based softmax here, i.e.,:</para><para>y_i = 2^(x_i) / sum(2^x_j)</para><para>The relative output will be different here. But mathematically, the gradient will be the same with a log(2) scaling factor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/SoftmaxFunctions/riscv_softmax_q7.c" line="64" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/NN/Source/SoftmaxFunctions/riscv_softmax_q7.c" bodystart="64" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>EXP(2) based softmax function </para>    </detaileddescription>
  </compounddef>
</doxygen>
