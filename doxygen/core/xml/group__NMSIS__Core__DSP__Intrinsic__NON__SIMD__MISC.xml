<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic_NON_SIMD_MISC</compoundname>
    <title>Non-SIMD Miscellaneous Instructions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga3a4b869f2df434f7e9f3f35e79715c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_AVE</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_AVE</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>AVE (Average with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">AVE<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Calculate the average of the contents of two general registers.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the average value of two signed integers stored in Rs1 and Rs2, rounds up a half-integer result to the nearest integer, and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Sum<sp/>=<sp/>CONCAT(Rs1[MSB],Rs1[MSB:0])<sp/>+<sp/>CONCAT(Rs2[MSB],Rs2[MSB:0])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Sum[(MSB+1):1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>MSB=31,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>MSB=63</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="493" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="493" bodyend="498"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_BITREV</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_BITREV</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>BITREV (Bit Reverse) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">BITREV<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Reverse the bit positions of the source operand within a specified width starting from bit 0. The reversed width is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
This instruction reverses the bit positions of the content of Rs1. The reversed bit width is calculated as Rs2[4:0]+1 (RV32) or Rs2[5:0]+1 (RV64). The upper bits beyond the reversed width are filled with zeros. After the bit reverse operation, the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">msb<sp/>=<sp/>Rs2[4:0];<sp/>(</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32)</highlight></codeline>
<codeline><highlight class="normal">msb<sp/>=<sp/>Rs2[5:0];<sp/>(</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64)</highlight></codeline>
<codeline><highlight class="normal">rev[0:msb]<sp/>=<sp/>Rs1[msb:0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>ZE(rev[msb:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="534" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="534" bodyend="539"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga08cd4064dbe07a8f27e148434f55b3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_BITREVI</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_BITREVI</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>BITREVI (Bit Reverse Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">(RV32)<sp/>BITREVI<sp/>Rd,<sp/>Rs1,<sp/>imm[4:0]</highlight></codeline>
<codeline><highlight class="normal">(RV64)<sp/>BITREVI<sp/>Rd,<sp/>Rs1,<sp/>imm[5:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Reverse the bit positions of the source operand within a specified width starting from bit 0. The reversed width is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
This instruction reverses the bit positions of the content of Rs1. The reversed bit width is calculated as imm[4:0]+1 (RV32) or imm[5:0]+1 (RV64). The upper bits beyond the reversed width are filled with zeros. After the bit reverse operation, the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">msb<sp/>=<sp/>imm[4:0];<sp/>(RV32)</highlight></codeline>
<codeline><highlight class="normal">msb<sp/>=<sp/>imm[5:0];<sp/>(RV64)</highlight></codeline>
<codeline><highlight class="normal">rev[0:msb]<sp/>=<sp/>Rs1[msb:0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>ZE(rev[msb:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="576" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="576" bodyend="581"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0e9da2de29b3f47f38a315ca8f3e5f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_BPICK</definition>
        <argsstring>(unsigned long a, unsigned long b, unsigned long c)</argsstring>
        <name>__RV_BPICK</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>BPICK (Bit-wise Pick) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">BPICK<sp/>Rd,<sp/>Rs1,<sp/>Rs2,<sp/>Rc</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Select from two source operands based on a bit mask in the third operand.</para><para><bold>Description</bold>:<linebreak/>
This instruction selects individual bits from Rs1 or Rs2, based on the bit mask value in Rc. If a bit in Rc is 1, the corresponding bit is from Rs1; otherwise, the corresponding bit is from Rs2. The selection results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd[x]<sp/>=<sp/>Rc[x]?<sp/>Rs1[x]<sp/>:<sp/>Rs2[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=31...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64,<sp/>x=63...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="616" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="616" bodyend="621"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga766a420ef985764c0d0d8bcc2eb66e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_INSB</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_INSB</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>INSB (Insert Byte) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">(RV32)<sp/>INSB<sp/>Rd,<sp/>Rs1,<sp/>imm[1:0]</highlight></codeline>
<codeline><highlight class="normal">(RV64)<sp/>INSB<sp/>Rd,<sp/>Rs1,<sp/>imm[2:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Insert byte 0 of a 32-bit or 64-bit register into one of the byte elements of another register.</para><para><bold>Description</bold>:<linebreak/>
This instruction inserts byte 0 of Rs1 into byte <computeroutput>imm[1:0]</computeroutput> (RV32) or <computeroutput>imm[2:0]</computeroutput> (RV64) of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">bpos<sp/>=<sp/>imm[1:0];<sp/>(RV32)</highlight></codeline>
<codeline><highlight class="normal">bpos<sp/>=<sp/>imm[2:0];<sp/>(RV64)</highlight></codeline>
<codeline><highlight class="normal">Rd.B[bpos]<sp/>=<sp/>Rs1.B[0]</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1278" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1278" bodyend="1282"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga1e5062cc77c31e898d6a85e7768a7b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_MADDR32</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_MADDR32</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MADDR32 (Multiply and Add to 32-Bit Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MADDR32<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit contents of two registers and add the lower 32-bit multiplication result to the 32-bit content of a destination register. Write the final result back to the destination register.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2. It adds the lower 32-bit multiplication result to the lower 32-bit content of Rd and writes the final result (RV32) or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either signed or unsigned integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1<sp/>*<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1.W[0]<sp/>*<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal">tres[31:0]<sp/>=<sp/>Rd.W[0]<sp/>+<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(tres[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5654" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5654" bodyend="5658"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga8260760ab7c146507ec4507862534332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_MSUBR32</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_MSUBR32</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MSUBR32 (Multiply and Subtract from 32-Bit Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MSUBR32<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit contents of two registers and subtract the lower 32-bit multiplication result from the 32-bit content of a destination register. Write the final result back to the destination register.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2, subtracts the lower 32-bit multiplication result from the lower 32-bit content of Rd, then writes the final result (RV32) or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either signed or unsigned integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1<sp/>*<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>-<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1.W[0]<sp/>*<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal">tres[31:0]<sp/>=<sp/>Rd.W[0]<sp/>-<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(tres[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5776" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5776" bodyend="5780"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gac34824012cfe56f0a6fb9baf2fb1ba33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SRA_U</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_SRA_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA.u (Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform an arithmetic right shift operation with rounding. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are filled with the sign-bit and the shift amount is specified by the low-order 5-bits (RV32) or 6-bits (RV64) of the Rs2 register. For the rounding operation, a value of 1 is added to the most significant discarded bit of the data to calculate the final result. And the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[31:-1]<sp/>=<sp/>SE33(Rs1[31:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[31:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[5:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[63:-1]<sp/>=<sp/>SE65(Rs1[63:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[63:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9523" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9523" bodyend="9528"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga19fde10e69ceda8b79f4cba59c073654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SRAI_U</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_SRAI_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI.u (Rounding Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI.u<sp/>Rd,<sp/>Rs1,<sp/>imm6u[4:0]<sp/>(RV32)</highlight></codeline>
<codeline><highlight class="normal">SRAI.u<sp/>Rd,<sp/>Rs1,<sp/>imm6u[5:0]<sp/>(RV64)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform an arithmetic right shift operation with rounding. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are filled with the sign-bit and the shift amount is specified by the imm6u[4:0] (RV32) or imm6u[5:0] (RV64) constant . For the rounding operation, a value of 1 is added to the most significant discarded bit of the data to calculate the final result. And the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>imm6u[4:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[31:-1]<sp/>=<sp/>SE33(Rs1[31:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[31:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>imm6u[5:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[63:-1]<sp/>=<sp/>SE65(Rs1[63:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[63:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9578" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9578" bodyend="9583"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaaea4771a7ac766be7bfec89c7bf6cda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SWAP8</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SWAP8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SWAP8 (Swap Byte within Halfword) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SWAP8<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Swap the bytes within each halfword of a register.</para><para><bold>Description</bold>:<linebreak/>
This instruction swaps the bytes within each halfword of Rs1 and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>CONCAT(Rs1.H[x][7:0],Rs1.H[x][15:8]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10921" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10921" bodyend="10926"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gadab9655b01398363507f94180fd41ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SWAP16</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SWAP16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SWAP16 (Swap Halfword within Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SWAP16<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Swap the 16-bit halfwords within each word of a register.</para><para><bold>Description</bold>:<linebreak/>
This instruction swaps the 16-bit halfwords within each word of Rs1 and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],Rs1.H[x][31:16]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10958" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10958" bodyend="10963"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga336d44003e6037e4945a513994b5f601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_WEXTI</definition>
        <argsstring>(long long a, unsigned int b)</argsstring>
        <name>__RV_WEXTI</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>WEXTI (Extract Word from 64-bit Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">WEXTI<sp/>Rd,<sp/>Rs1,<sp/>#LSBloc</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or a register (RV64) starting from a specified immediate LSB bit position.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified by Rs1(4,1) starting from a specified immediate LSB bit position, #LSBloc. The extracted word is written to Rd. Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the 64-bit value and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the 64-bit value.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction extracts a 32-bit word from a 64-bit value in Rs1 starting from a specified immediate LSB bit position, #LSBloc. The extracted word is sign-extended and written to lower 32- bit of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">src[63:0]<sp/>=<sp/>Concat(R[Idx1],<sp/>R[Idx0]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>src[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">ExtractW<sp/>=<sp/>Rs1[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(ExtractW)</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13374" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13374" bodyend="13379"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga92ce02b48c9b1f373c8b7e602c6bcc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_WEXT</definition>
        <argsstring>(long long a, unsigned int b)</argsstring>
        <name>__RV_WEXT</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>WEXT (Extract Word from 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">WEXT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or a register (RV64) starting from a specified LSB bit position in a register.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified by Rs1(4,1) starting from a specified LSB bit position, specified in Rs2[4:0]. The extracted word is written to Rd. Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the 64-bit value and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the 64-bit value.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">src[63:0]<sp/>=<sp/>Concat(R[Idx1],<sp/>R[Idx0]);</highlight></codeline>
<codeline><highlight class="normal">LSBloc<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>src[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">LSBloc<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal">ExtractW<sp/>=<sp/>Rs1[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(ExtractW)</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13424" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13424" bodyend="13429"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Non-SIMD Miscellaneous Instructions. </para>    </briefdescription>
    <detaileddescription>
<para>There are 13 Miscellaneous Instructions here. </para>    </detaileddescription>
  </compounddef>
</doxygen>
