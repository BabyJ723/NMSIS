<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__CPU__Intrinsic" kind="group">
    <compoundname>NMSIS_Core_CPU_Intrinsic</compoundname>
    <title>Intrinsic Functions for CPU Intructions</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" prot="public" static="no">
        <name>WFI_SleepMode_Type</name>
        <enumvalue id="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a791734cb0f58f266b18223e28e2feea2" prot="public">
          <name>WFI_SHALLOW_SLEEP</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Shallow sleep mode, the core_clk will poweroff. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a26cef3a380cffa72dea68b994a3acc3f" prot="public">
          <name>WFI_DEEP_SLEEP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Deep sleep mode, the core_clk and core_ano_clk will poweroff. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>WFI Sleep Mode enumeration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="588" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="588" bodyend="591"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga3113efdf11b109a9cbd50fae783d1adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __NOP</definition>
        <argsstring>(void)</argsstring>
        <name>__NOP</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>NOP Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>No Operation does nothing. This instruction can be used for code alignment purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="528" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="528" bodyend="531"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __WFI</definition>
        <argsstring>(void)</argsstring>
        <name>__WFI</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Wait For Interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>Wait For Interrupt is is executed using CSR_WFE.WFE=0 and WFI instruction. It will suspends execution until interrupt, NMI or Debug happened. When Core is waked up by interrupt, if<orderedlist>
<listitem><para>mstatus.MIE == 1(interrupt enabled), Core will enter ISR code</para></listitem><listitem><para>mstatus.MIE == 0(interrupt disabled), Core will resume previous execution </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="542" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="542" bodyend="546"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" compoundref="riscv__encoding_8h" startline="523">CSR_WFE</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" compoundref="riscv__encoding_8h" startline="146">WFE_WFE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __WFE</definition>
        <argsstring>(void)</argsstring>
        <name>__WFE</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Wait For Event. </para>        </briefdescription>
        <detaileddescription>
<para>Wait For Event is executed using CSR_WFE.WFE=1 and WFI instruction. It will suspends execution until event, NMI or Debug happened. When Core is waked up, Core will resume previous execution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="555" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="555" bodyend="560"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" compoundref="riscv__encoding_8h" startline="523">CSR_WFE</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" compoundref="riscv__encoding_8h" startline="146">WFE_WFE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga2d22b9286eefbf1e1b73ed50ce443183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __EBREAK</definition>
        <argsstring>(void)</argsstring>
        <name>__EBREAK</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Breakpoint Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="569" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="569" bodyend="572"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga639ad274fdb079a1219006725d772c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECALL</definition>
        <argsstring>(void)</argsstring>
        <name>__ECALL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Environment Call Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The ECALL instruction is used to make a service request to the execution environment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="580" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="580" bodyend="583"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __set_wfi_sleepmode</definition>
        <argsstring>(WFI_SleepMode_Type mode)</argsstring>
        <name>__set_wfi_sleepmode</name>
        <param>
          <type><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" kindref="member">WFI_SleepMode_Type</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set Sleep mode of WFI. </para>        </briefdescription>
        <detaileddescription>
<para>Set the SLEEPVALUE CSR register to control the WFI Sleep mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The sleep mode to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="600" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="600" bodyend="603"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" compoundref="core__feature__base_8h" startline="321">__RV_CSR_WRITE</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb" compoundref="riscv__encoding_8h" startline="521">CSR_SLEEPVALUE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __TXEVT</definition>
        <argsstring>(void)</argsstring>
        <name>__TXEVT</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send TX Event. </para>        </briefdescription>
        <detaileddescription>
<para>Set the CSR TXEVT to control send a TX Event. The Core will output signal tx_evt as output event signal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="611" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="611" bodyend="614"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga730f164e5d79c6b27d2187a1e7a17e25" compoundref="riscv__encoding_8h" startline="522">CSR_TXEVT</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_mcycle_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_mcycle_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable MCYCLE counter. </para>        </briefdescription>
        <detaileddescription>
<para>Clear the CY bit of MCOUNTINHIBIT to 0 to enable MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="621" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="621" bodyend="624"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_mcycle_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_mcycle_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable MCYCLE counter. </para>        </briefdescription>
        <detaileddescription>
<para>Set the CY bit of MCOUNTINHIBIT to 1 to disable MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="631" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="631" bodyend="634"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_minstret_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_minstret_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Clear the IR bit of MCOUNTINHIBIT to 0 to enable MINSTRET Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="641" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="641" bodyend="644"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_minstret_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_minstret_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Set the IR bit of MCOUNTINHIBIT to 1 to disable MINSTRET Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="651" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="651" bodyend="654"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_all_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_all_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable MCYCLE &amp; MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Clear the IR and CY bit of MCOUNTINHIBIT to 1 to enable MINSTRET &amp; MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="661" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="661" bodyend="664"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_all_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_all_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable MCYCLE &amp; MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Set the IR and CY bit of MCOUNTINHIBIT to 1 to disable MINSTRET &amp; MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="671" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="671" bodyend="674"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga5b4c34e720fb0c9e939540333dd640e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __FENCE_I</definition>
        <argsstring>(void)</argsstring>
        <name>__FENCE_I</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Fence.i Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The FENCE.I instruction is used to synchronize the instruction and data streams. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="694" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="694" bodyend="697"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint8_t</type>
        <definition>__STATIC_FORCEINLINE uint8_t __LB</definition>
        <argsstring>(volatile void *addr)</argsstring>
        <name>__LB</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Load 8bit value from address (8 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Load 8 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of type uint8_t at (*addr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="728" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="728" bodyend="734"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint16_t</type>
        <definition>__STATIC_FORCEINLINE uint16_t __LH</definition>
        <argsstring>(volatile void *addr)</argsstring>
        <name>__LH</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Load 16bit value from address (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Load 16 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of type uint16_t at (*addr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="742" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="742" bodyend="748"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __LW</definition>
        <argsstring>(volatile void *addr)</argsstring>
        <name>__LW</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Load 32bit value from address (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Load 32 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of type uint32_t at (*addr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="756" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="756" bodyend="762"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __SB</definition>
        <argsstring>(volatile void *addr, uint8_t val)</argsstring>
        <name>__SB</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write 8bit value to address (8 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Write 8 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="786" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="786" bodyend="789"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __SH</definition>
        <argsstring>(volatile void *addr, uint16_t val)</argsstring>
        <name>__SH</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write 16bit value to address (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Write 16 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="797" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="797" bodyend="800"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __SW</definition>
        <argsstring>(volatile void *addr, uint32_t val)</argsstring>
        <name>__SW</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write 32bit value to address (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Write 32 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="808" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="808" bodyend="811"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga8dab656e3251b574311b852efa785109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __CAS_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t oldval, uint32_t newval)</argsstring>
        <name>__CAS_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>oldval</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>newval</declname>
        </param>
        <briefdescription>
<para>Compare and Swap 32bit value using LR and SC. </para>        </briefdescription>
        <detaileddescription>
<para>Compare old value with memory, if identical, store new value in memory. Return the initial value in memory. Success is indicated by comparing return value with OLD. memory address, return 0 if successful, otherwise return !0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oldval</parametername>
</parameternamelist>
<parameterdescription>
<para>Old value of the data in address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newval</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be stored into the address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the initial value in memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="837" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="837" bodyend="852"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga68f1ebfff49ba330ac04996d3e2b9df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __AMOSWAP_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t newval)</argsstring>
        <name>__AMOSWAP_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>newval</declname>
        </param>
        <briefdescription>
<para>Atomic Swap 32bit value into memory. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically swap new 32bit value into memory using amoswap.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newval</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be stored into the address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the original value in memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="861" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="861" bodyend="868"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gac12ad95ec020f1c2c83c46231468a40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOADD_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOADD_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic Add with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically ADD 32bit value with value in memory using amoadd.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ADDed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value + add value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="877" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="877" bodyend="884"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga927482a006985e82d90512f19ea68f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOAND_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOAND_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic And with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically AND 32bit value with value in memory using amoand.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ANDed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value &amp; and value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="893" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="893" bodyend="900"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaa6f71a398756f05bbc1ef4b4a548174f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOOR_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOOR_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic OR with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically OR 32bit value with value in memory using amoor.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ORed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value | and value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="909" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="909" bodyend="916"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga69a2e79b90f42d82c236fae1aced5c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOXOR_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOXOR_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic XOR with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically XOR 32bit value with value in memory using amoxor.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be XORed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value ^ and value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="925" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="925" bodyend="932"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga75a6dc5418991df25ef66de5e16dbd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __AMOMAXU_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t value)</argsstring>
        <name>__AMOMAXU_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic unsigned MAX with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically unsigned max compare 32bit value with value in memory using amomaxu.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the bigger value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="941" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="941" bodyend="948"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga13034a453b85372f85974b178bd3ee6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOMAX_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOMAX_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic signed MAX with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically signed max compare 32bit value with value in memory using amomax.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the bigger value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="957" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="957" bodyend="964"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga75515ac6719d3abca5030cb4fd2f4c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __AMOMINU_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t value)</argsstring>
        <name>__AMOMINU_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic unsigned MIN with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically unsigned min compare 32bit value with value in memory using amominu.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the smaller value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="973" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="973" bodyend="980"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gadd554cdf00f5417208433154e9c9228e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOMIN_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOMIN_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic signed MIN with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically signed min compare 32bit value with value in memory using amomin.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the smaller value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="989" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="989" bodyend="996"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" prot="public" static="no">
        <name>__FENCE</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref> volatile (&quot;fence &quot; #p &quot;,&quot; #s : : : &quot;memory&quot;)</initializer>
        <briefdescription>
<para>Execute fence instruction, p -&gt; pred, s -&gt; succ. </para>        </briefdescription>
        <detaileddescription>
<para>the FENCE instruction ensures that all memory accesses from instructions preceding the fence in program order (the <computeroutput>predecessor set</computeroutput>) appear earlier in the global memory order than memory accesses from instructions appearing after the fence in program order (the <computeroutput>successor set</computeroutput>). For details, please refer to The RISC-V Instruction Set Manual <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predecessor set, such as iorw, rw, r, w </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>successor set, such as iorw, rw, r, w </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="686" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3" prot="public" static="no">
        <name>__RWMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(iorw,iorw)</initializer>
        <briefdescription>
<para>Read &amp; Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="700" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga74918217f0fe94af72bfe5d406d4164b" prot="public" static="no">
        <name>__RMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(ir,ir)</initializer>
        <briefdescription>
<para>Read Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="703" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga4063a0176acd66b4cdad567b45f3249b" prot="public" static="no">
        <name>__WMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(ow,ow)</initializer>
        <briefdescription>
<para>Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="706" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga4e8baf26c3f68696f2b2ad0510eafdb5" prot="public" static="no">
        <name>__SMP_RWMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(rw,rw)</initializer>
        <briefdescription>
<para>SMP Read &amp; Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="709" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga78c8abb848ec15a6e9dcce8c9e4dc1ba" prot="public" static="no">
        <name>__SMP_RMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(r,r)</initializer>
        <briefdescription>
<para>SMP Read Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="712" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga96d95139b3239e90fad24caf26da2160" prot="public" static="no">
        <name>__SMP_WMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(w,w)</initializer>
        <briefdescription>
<para>SMP Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="715" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga653c374f1130650b2f115a92bdf23f7b" prot="public" static="no">
        <name>__CPU_RELAX</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref> volatile (&quot;&quot; : : : &quot;memory&quot;)</initializer>
        <briefdescription>
<para>CPU relax for busy loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="718" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that generate RISC-V CPU instructions. </para>    </briefdescription>
    <detaileddescription>
<para>The following functions generate specified RISC-V instructions that cannot be directly accessed by compiler. </para>    </detaileddescription>
  </compounddef>
</doxygen>
