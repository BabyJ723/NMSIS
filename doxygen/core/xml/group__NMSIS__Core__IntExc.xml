<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__IntExc" kind="group">
    <compoundname>NMSIS_Core_IntExc</compoundname>
    <title>Interrupts and Exceptions</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" prot="public" static="no">
        <name>IRQn_Type</name>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a2095f58b6c0de45b782b1196a0939e02" prot="public">
          <name>Reserved0_IRQn</name>
          <initializer>=   0</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8add6253fd238cff7fa4b35e4ef81ffc07" prot="public">
          <name>Reserved1_IRQn</name>
          <initializer>=   1</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a0fa696d4b9c15fc563c9fa01141e465e" prot="public">
          <name>Reserved2_IRQn</name>
          <initializer>=   2</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a02546766328e3c4539ca22a21284955a" prot="public">
          <name>SysTimerSW_IRQn</name>
          <initializer>=   3</initializer>
          <briefdescription>
<para>System Timer SW interrupt. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8aff930d0f4734a469931373907ae78b34" prot="public">
          <name>Reserved3_IRQn</name>
          <initializer>=   4</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a9880320a990d718ad2459749ee144884" prot="public">
          <name>Reserved4_IRQn</name>
          <initializer>=   5</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a8a821fe7adf1f38a119e41910796c56b" prot="public">
          <name>Reserved5_IRQn</name>
          <initializer>=   6</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a1c65f7884cf42cfc70b0016245780dc9" prot="public">
          <name>SysTimer_IRQn</name>
          <initializer>=   7</initializer>
          <briefdescription>
<para>System Timer Interrupt. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a6b7f1d8c68bc7bd0a62f19fd0e708838" prot="public">
          <name>Reserved6_IRQn</name>
          <initializer>=   8</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8afc0887f9ed1d32ff9100f7c9083b9e96" prot="public">
          <name>Reserved7_IRQn</name>
          <initializer>=   9</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8ab38c7d66cde0d826a8cb0950367e541f" prot="public">
          <name>Reserved8_IRQn</name>
          <initializer>=  10</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a267b7f65ca16a33f9a194c73a840bbad" prot="public">
          <name>Reserved9_IRQn</name>
          <initializer>=  11</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a0c975cba7f7a26a24b3c0672bb31bd91" prot="public">
          <name>Reserved10_IRQn</name>
          <initializer>=  12</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a65650d04b0f7bb94cc12d0834284c657" prot="public">
          <name>Reserved11_IRQn</name>
          <initializer>=  13</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a77b582a8c5b4f6a71e28cf4f7cb427f5" prot="public">
          <name>Reserved12_IRQn</name>
          <initializer>=  14</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a83d402104ce385a44aca7f0e6923045f" prot="public">
          <name>Reserved13_IRQn</name>
          <initializer>=  15</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a18ffa53a85e8eeacdf533fe75fcb79e3" prot="public">
          <name>Reserved14_IRQn</name>
          <initializer>=  16</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a1318a58d8c42de0ed910336b0bb92425" prot="public">
          <name>Reserved15_IRQn</name>
          <initializer>=  17</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8a2560f554a6c84ae4cfab56e1f4bcb021" prot="public">
          <name>Reserved16_IRQn</name>
          <initializer>=  18</initializer>
          <briefdescription>
<para>Internal reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8abf73d47e24ab97a72266dd22fd05d7c4" prot="public">
          <name>FirstDeviceSpecificInterrupt_IRQn</name>
          <initializer>= 19</initializer>
          <briefdescription>
<para>First Device Specific Interrupt. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__IntExc_1gga7e1129cd8a196f4284d41db3e82ad5c8adddd70a514a83716a447d622adf17c78" prot="public">
          <name>SOC_INT_MAX</name>
          <briefdescription>
<para>Number of total interrupts. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Definition of IRQn numbers. </para>        </briefdescription>
        <detaileddescription>
<para>The core interrupt enumeration names for IRQn values are defined in the file <bold>&lt;Device&gt;.h</bold>.<itemizedlist>
<listitem><para>Interrupt ID(IRQn) from 0 to 18 are reserved for core internal interrupts.</para></listitem><listitem><para>Interrupt ID(IRQn) start from 19 represent device-specific external interrupts.</para></listitem><listitem><para>The first device-specific interrupt has the IRQn value 19.</para></listitem></itemizedlist>
</para><para>The table below describes the core interrupt names and their availability in various Nuclei Cores. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="172" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="172" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga38900ce869dd78e9b432ac90d8006082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetCfgNlbits</definition>
        <argsstring>(uint32_t nlbits)</argsstring>
        <name>__ECLIC_SetCfgNlbits</name>
        <param>
          <type>uint32_t</type>
          <declname>nlbits</declname>
        </param>
        <briefdescription>
<para>Set nlbits value. </para>        </briefdescription>
        <detaileddescription>
<para>This function set the nlbits value of CLICCFG register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nlbits</parametername>
</parameternamelist>
<parameterdescription>
<para>nlbits value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>nlbits is used to set the width of level in the CLICINTCTL[i]. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga47f628da4dcf09a2fc43bfb7c8de1528" kindref="member">ECLIC_GetCfgNlbits</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="258" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="258" bodyend="262"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga6c31823bbd3bd593dcecd6d7d5f0afbb" compoundref="core__feature__eclic_8h" startline="96">CLIC_CLICCFG_NLBIT_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga0ee0922b5a83b6ff92fed6c9dea63da3" compoundref="core__feature__eclic_8h" startline="95">CLIC_CLICCFG_NLBIT_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetCfgNlbits</definition>
        <argsstring>(void)</argsstring>
        <name>__ECLIC_GetCfgNlbits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get nlbits value. </para>        </briefdescription>
        <detaileddescription>
<para>This function get the nlbits value of CLICCFG register. <simplesect kind="return"><para>nlbits value of CLICCFG register </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>nlbits is used to set the width of level in the CLICINTCTL[i]. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gad35a05a1e8fb89332d59c7db2904756b" kindref="member">ECLIC_SetCfgNlbits</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="274" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="274" bodyend="277"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga6c31823bbd3bd593dcecd6d7d5f0afbb" compoundref="core__feature__eclic_8h" startline="96">CLIC_CLICCFG_NLBIT_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga0ee0922b5a83b6ff92fed6c9dea63da3" compoundref="core__feature__eclic_8h" startline="95">CLIC_CLICCFG_NLBIT_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga1ccefb6dd64211176683848ef52e5b8f" compoundref="core__feature__eclic_8h" startline="616" endline="631">__ECLIC_GetLevelIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga5e47fae9a66b286f1d0df6799e5a244c" compoundref="core__feature__eclic_8h" startline="677" endline="690">__ECLIC_GetPriorityIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1" compoundref="core__feature__eclic_8h" startline="582" endline="603">__ECLIC_SetLevelIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207" compoundref="core__feature__eclic_8h" startline="647" endline="664">__ECLIC_SetPriorityIRQ</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga062b7c1b16828b4dbc502a303648dbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoVer</definition>
        <argsstring>(void)</argsstring>
        <name>__ECLIC_GetInfoVer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the ECLIC version number. </para>        </briefdescription>
        <detaileddescription>
<para>This function gets the hardware version information from CLICINFO register. <simplesect kind="return"><para>hardware version number in CLICINFO register. </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function gets harware version information from CLICINFO register.</para></listitem><listitem><para>Bit 20:17 for architecture version, bit 16:13 for implementation version. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga6308d1600c92e3f9dc67c7837c68f854" kindref="member">ECLIC_GetInfoNum</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="290" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="290" bodyend="293"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2b40a58247f1ae1eb207ebfd224a6519" compoundref="core__feature__eclic_8h" startline="102">CLIC_CLICINFO_VER_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga3047dd362f08b827b4f3595fdee555e1" compoundref="core__feature__eclic_8h" startline="101">CLIC_CLICINFO_VER_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga6db42f6efa6f57690930a78b35c64b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoCtlbits</definition>
        <argsstring>(void)</argsstring>
        <name>__ECLIC_GetInfoCtlbits</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get CLICINTCTLBITS. </para>        </briefdescription>
        <detaileddescription>
<para>This function gets CLICINTCTLBITS from CLICINFO register. <simplesect kind="return"><para>CLICINTCTLBITS from CLICINFO register. </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>In the CLICINTCTL[i] registers, with 2 &lt;= CLICINTCTLBITS &lt;= 8.</para></listitem><listitem><para>The implemented bits are kept left-justified in the most-significant bits of each 8-bit CLICINTCTL[I] register, with the lower unimplemented bits treated as hardwired to 1. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga6308d1600c92e3f9dc67c7837c68f854" kindref="member">ECLIC_GetInfoNum</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="307" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="307" bodyend="310"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga146a1208d7982a0ec073f9c3bb77528f" compoundref="core__feature__eclic_8h" startline="99">CLIC_CLICINFO_CTLBIT_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gac63632ddf28ed47570b441f003ba5c5f" compoundref="core__feature__eclic_8h" startline="98">CLIC_CLICINFO_CTLBIT_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga2875bb0f9e3ceb6c750dcd5396d099b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetInfoNum</definition>
        <argsstring>(void)</argsstring>
        <name>__ECLIC_GetInfoNum</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of maximum interrupt inputs supported. </para>        </briefdescription>
        <detaileddescription>
<para>This function gets number of maximum interrupt inputs supported from CLICINFO register. <simplesect kind="return"><para>number of maximum interrupt inputs supported from CLICINFO register. </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function gets number of maximum interrupt inputs supported from CLICINFO register.</para></listitem><listitem><para>The num_interrupt field specifies the actual number of maximum interrupt inputs supported in this implementation. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2b075534f2e421549ebe16b9c97a496f" kindref="member">ECLIC_GetInfoCtlbits</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="323" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="323" bodyend="326"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga7f3148e774c092b06d81b400ac6c80bb" compoundref="core__feature__eclic_8h" startline="105">CLIC_CLICINFO_NUM_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga39c37a90e1445851aede44b002a83a99" compoundref="core__feature__eclic_8h" startline="104">CLIC_CLICINFO_NUM_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gaf4be616cd91685175abee3f2af47b342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetMth</definition>
        <argsstring>(uint8_t mth)</argsstring>
        <name>__ECLIC_SetMth</name>
        <param>
          <type>uint8_t</type>
          <declname>mth</declname>
        </param>
        <briefdescription>
<para>Set Machine Mode Interrupt Level Threshold. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets machine mode interrupt level threshold. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mth</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt Level Threshold. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaf52f1885d59864d30dd5da7681f5985b" kindref="member">ECLIC_GetMth</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="336" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="336" bodyend="339"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga36108f1b6b9e2545727701d856a63c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint8_t</type>
        <definition>__STATIC_FORCEINLINE uint8_t __ECLIC_GetMth</definition>
        <argsstring>(void)</argsstring>
        <name>__ECLIC_GetMth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get Machine Mode Interrupt Level Threshold. </para>        </briefdescription>
        <detaileddescription>
<para>This function gets machine mode interrupt level threshold. <simplesect kind="return"><para>Interrupt Level Threshold. </para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga59e29ad3023110a58eb9163d976f44c6" kindref="member">ECLIC_SetMth</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="349" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="349" bodyend="352"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gae081f15804b168a9573aca186c6176aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_EnableIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_EnableIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Enable a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function enables the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2fd91a5d186fe3fb4ca3bed07df78813" kindref="member">ECLIC_DisableIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="365" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="365" bodyend="368"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga70aa615d81bc48ea8ed2b64c09c2d63f" compoundref="core__feature__eclic_8h" startline="111">CLIC_INTIE_IE_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gad91c17c202ac4f466a9501c88d23e825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetEnableIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetEnableIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get a specific interrupt enable status. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the interrupt enable status for the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0 Interrupt is not enabled</para></listitem><listitem><para>1 Interrupt is pending </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaef478ada8e8906c9fe8d4dc2311a39e1" kindref="member">ECLIC_EnableIRQ</ref></para></listitem><listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2fd91a5d186fe3fb4ca3bed07df78813" kindref="member">ECLIC_DisableIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="384" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="384" bodyend="387"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga70aa615d81bc48ea8ed2b64c09c2d63f" compoundref="core__feature__eclic_8h" startline="111">CLIC_INTIE_IE_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gaa34edbcf50501a1ef4ebe1e2fbfae2b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_DisableIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_DisableIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Disable a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function disables the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the external interrupt to disable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaef478ada8e8906c9fe8d4dc2311a39e1" kindref="member">ECLIC_EnableIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="399" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="399" bodyend="402"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga70aa615d81bc48ea8ed2b64c09c2d63f" compoundref="core__feature__eclic_8h" startline="111">CLIC_INTIE_IE_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gaa20c0e2158dbe29f589468de10abde12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __ECLIC_GetPendingIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetPendingIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get the pending specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the pending status of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>0 Interrupt is not pending</para></listitem><listitem><para>1 Interrupt is pending </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2776c309447ab5f7258266299df2f6aa" kindref="member">ECLIC_SetPendingIRQ</ref></para></listitem><listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2006752b49d78e3247b2b355652a429a" kindref="member">ECLIC_ClearPendingIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="418" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="418" bodyend="421"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gad7395594207c3fa20c423a1c9ae26cb7" compoundref="core__feature__eclic_8h" startline="108">CLIC_INTIP_IP_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gadadcfda306ae9024c5e7a5a79c3d49de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetPendingIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_SetPendingIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Set a specific interrupt to pending. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the pending bit for the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaf5a8f8a271f159769eac14959748ec92" kindref="member">ECLIC_GetPendingIRQ</ref></para></listitem><listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2006752b49d78e3247b2b355652a429a" kindref="member">ECLIC_ClearPendingIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="434" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="434" bodyend="437"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gad7395594207c3fa20c423a1c9ae26cb7" compoundref="core__feature__eclic_8h" startline="108">CLIC_INTIP_IP_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga79f14465b1588b3c970efd8d55422638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_ClearPendingIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_ClearPendingIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Clear a specific interrupt from pending. </para>        </briefdescription>
        <detaileddescription>
<para>This function removes the pending state of the specific interrupt <emphasis>IRQn</emphasis>. <emphasis>IRQn</emphasis> cannot be a negative number. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2776c309447ab5f7258266299df2f6aa" kindref="member">ECLIC_SetPendingIRQ</ref></para></listitem><listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaf5a8f8a271f159769eac14959748ec92" kindref="member">ECLIC_GetPendingIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="451" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="451" bodyend="454"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gad7395594207c3fa20c423a1c9ae26cb7" compoundref="core__feature__eclic_8h" startline="108">CLIC_INTIP_IP_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gaecf87e71c0c4a2ee711f0c292c3ebd8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetTrigIRQ</definition>
        <argsstring>(IRQn_Type IRQn, uint32_t trig)</argsstring>
        <name>__ECLIC_SetTrigIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>trig</declname>
        </param>
        <briefdescription>
<para>Set trigger mode and polarity for a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function set trigger mode and polarity of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trig</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>00 level trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfa6c8507eafc6f68410f8e5f3f5c0f4e12" kindref="member">ECLIC_LEVEL_TRIGGER</ref></para></listitem><listitem><para>01 positive edge trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfa077bcb1671a8e81875733c437aa989db" kindref="member">ECLIC_POSTIVE_EDGE_TRIGGER</ref></para></listitem><listitem><para>02 level trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfa6c8507eafc6f68410f8e5f3f5c0f4e12" kindref="member">ECLIC_LEVEL_TRIGGER</ref></para></listitem><listitem><para>03 negative edge trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfad5184faf1eeb1cd9f5d79f903b65297c" kindref="member">ECLIC_NEGTIVE_EDGE_TRIGGER</ref> </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gadaaf360694309accdc74c0808161755c" kindref="member">ECLIC_GetTrigIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="472" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="472" bodyend="476"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga476263a60ffcbb45417ab2b6864d47b4" compoundref="core__feature__eclic_8h" startline="114">CLIC_INTATTR_TRIG_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gac4ec4063ec15f49408130b8a095a2a91" compoundref="core__feature__eclic_8h" startline="113">CLIC_INTATTR_TRIG_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gabe634783ac950552cb51588e78ff2a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetTrigIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetTrigIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get trigger mode and polarity for a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function get trigger mode and polarity of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>00 level trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfa6c8507eafc6f68410f8e5f3f5c0f4e12" kindref="member">ECLIC_LEVEL_TRIGGER</ref></para></listitem><listitem><para>01 positive edge trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfa077bcb1671a8e81875733c437aa989db" kindref="member">ECLIC_POSTIVE_EDGE_TRIGGER</ref></para></listitem><listitem><para>02 level trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfa6c8507eafc6f68410f8e5f3f5c0f4e12" kindref="member">ECLIC_LEVEL_TRIGGER</ref></para></listitem><listitem><para>03 negative edge trigger, <ref refid="group__NMSIS__Core__ECLIC__Registers_1gga35f79c25d5118ccfde82872bc5946ecfad5184faf1eeb1cd9f5d79f903b65297c" kindref="member">ECLIC_NEGTIVE_EDGE_TRIGGER</ref> </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gac0681d16f62ce0b08e48e89131995a05" kindref="member">ECLIC_SetTrigIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="493" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="493" bodyend="496"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga476263a60ffcbb45417ab2b6864d47b4" compoundref="core__feature__eclic_8h" startline="114">CLIC_INTATTR_TRIG_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gac4ec4063ec15f49408130b8a095a2a91" compoundref="core__feature__eclic_8h" startline="113">CLIC_INTATTR_TRIG_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga226570d14c924615a955e07b9883e415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetShvIRQ</definition>
        <argsstring>(IRQn_Type IRQn, uint32_t shv)</argsstring>
        <name>__ECLIC_SetShvIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shv</declname>
        </param>
        <briefdescription>
<para>Set interrupt working mode for a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function set selective hardware vector or non-vector working mode of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shv</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>0 non-vector mode, <ref refid="group__NMSIS__Core__ECLIC__Registers_1ga6a01697e0ba89c691f98fee801f4a25c" kindref="member">ECLIC_NON_VECTOR_INTERRUPT</ref></para></listitem><listitem><para>1 vector mode, <ref refid="group__NMSIS__Core__ECLIC__Registers_1ga915384ab6567d38315e8cf5a566f4840" kindref="member">ECLIC_VECTOR_INTERRUPT</ref> </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaa8dc0e0203d692a0cc565e59906fb706" kindref="member">ECLIC_GetShvIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="511" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="511" bodyend="515"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2b6efddec2286b358747be5985110b3a" compoundref="core__feature__eclic_8h" startline="117">CLIC_INTATTR_SHV_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga49ea87f8a0207a2622f0ce467b7158dc" compoundref="core__feature__eclic_8h" startline="116">CLIC_INTATTR_SHV_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gad7d7238a79c39c226a8289d027266cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ECLIC_GetShvIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetShvIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get interrupt working mode for a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function get selective hardware vector or non-vector working mode of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shv<itemizedlist>
<listitem><para>0 non-vector mode, <ref refid="group__NMSIS__Core__ECLIC__Registers_1ga6a01697e0ba89c691f98fee801f4a25c" kindref="member">ECLIC_NON_VECTOR_INTERRUPT</ref></para></listitem><listitem><para>1 vector mode, <ref refid="group__NMSIS__Core__ECLIC__Registers_1ga915384ab6567d38315e8cf5a566f4840" kindref="member">ECLIC_VECTOR_INTERRUPT</ref> </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga0bd2875fbd02a00bec78735940704c13" kindref="member">ECLIC_SetShvIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="530" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="530" bodyend="533"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2b6efddec2286b358747be5985110b3a" compoundref="core__feature__eclic_8h" startline="117">CLIC_INTATTR_SHV_Msk</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga49ea87f8a0207a2622f0ce467b7158dc" compoundref="core__feature__eclic_8h" startline="116">CLIC_INTATTR_SHV_Pos</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga2c72ee40cad78719f6d60767b75f6dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetCtrlIRQ</definition>
        <argsstring>(IRQn_Type IRQn, uint8_t intctrl)</argsstring>
        <name>__ECLIC_SetCtrlIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>intctrl</declname>
        </param>
        <briefdescription>
<para>Modify ECLIC Interrupt Input Control Register for a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function modify ECLIC Interrupt Input Control(CLICINTCTL[i]) register of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">intctrl</parametername>
</parameternamelist>
<parameterdescription>
<para>Set value for CLICINTCTL[i] register </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga32d7fe236e9b906bfee340fb42a1a644" kindref="member">ECLIC_GetCtrlIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="546" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="546" bodyend="549"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
        <referencedby refid="group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1" compoundref="core__feature__eclic_8h" startline="582" endline="603">__ECLIC_SetLevelIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207" compoundref="core__feature__eclic_8h" startline="647" endline="664">__ECLIC_SetPriorityIRQ</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint8_t</type>
        <definition>__STATIC_FORCEINLINE uint8_t __ECLIC_GetCtrlIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetCtrlIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get ECLIC Interrupt Input Control Register value for a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function modify ECLIC Interrupt Input Control register of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of ECLIC Interrupt Input Control register </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga44797af8a09e6b798cc7cb2bc3b9602b" kindref="member">ECLIC_SetCtrlIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="562" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="562" bodyend="565"/>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1gab5a72455ad01a7caea954a82c907256d" compoundref="core__feature__eclic_8h" startline="145">ECLIC</references>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga1ccefb6dd64211176683848ef52e5b8f" compoundref="core__feature__eclic_8h" startline="616" endline="631">__ECLIC_GetLevelIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga5e47fae9a66b286f1d0df6799e5a244c" compoundref="core__feature__eclic_8h" startline="677" endline="690">__ECLIC_GetPriorityIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1" compoundref="core__feature__eclic_8h" startline="582" endline="603">__ECLIC_SetLevelIRQ</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207" compoundref="core__feature__eclic_8h" startline="647" endline="664">__ECLIC_SetPriorityIRQ</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetLevelIRQ</definition>
        <argsstring>(IRQn_Type IRQn, uint8_t lvl_abs)</argsstring>
        <name>__ECLIC_SetLevelIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>lvl_abs</declname>
        </param>
        <briefdescription>
<para>Set ECLIC Interrupt level of a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function set interrupt level of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lvl_abs</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt level </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative.</para></listitem><listitem><para>If lvl_abs to be set is larger than the max level allowed, it will be force to be max level.</para></listitem><listitem><para>When you set level value you need use clciinfo.nlbits to get the width of level. Then we could know the maximum of level. CLICINTCTLBITS is how many total bits are present in the CLICINTCTL register. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaf323b6babdd4236644d84057332e7533" kindref="member">ECLIC_GetLevelIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="582" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="582" bodyend="603"/>
        <references refid="group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab" compoundref="core__feature__eclic_8h" startline="274" endline="277">__ECLIC_GetCfgNlbits</references>
        <references refid="group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da" compoundref="core__feature__eclic_8h" startline="562" endline="565">__ECLIC_GetCtrlIRQ</references>
        <references refid="group__NMSIS__Core__IntExc_1ga2c72ee40cad78719f6d60767b75f6dcd" compoundref="core__feature__eclic_8h" startline="546" endline="549">__ECLIC_SetCtrlIRQ</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga34443f8b2b2935d099e6a0119b96c712" compoundref="core__feature__eclic_8h" startline="119">ECLIC_MAX_NLBITS</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga1ccefb6dd64211176683848ef52e5b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint8_t</type>
        <definition>__STATIC_FORCEINLINE uint8_t __ECLIC_GetLevelIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetLevelIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get ECLIC Interrupt level of a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function get interrupt level of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt level </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gad6f35a2f69908b97b083c5e31c1c5aad" kindref="member">ECLIC_SetLevelIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="616" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="616" bodyend="631"/>
        <references refid="group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab" compoundref="core__feature__eclic_8h" startline="274" endline="277">__ECLIC_GetCfgNlbits</references>
        <references refid="group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da" compoundref="core__feature__eclic_8h" startline="562" endline="565">__ECLIC_GetCtrlIRQ</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga34443f8b2b2935d099e6a0119b96c712" compoundref="core__feature__eclic_8h" startline="119">ECLIC_MAX_NLBITS</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetPriorityIRQ</definition>
        <argsstring>(IRQn_Type IRQn, uint8_t pri)</argsstring>
        <name>__ECLIC_SetPriorityIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pri</declname>
        </param>
        <briefdescription>
<para>Get ECLIC Interrupt priority of a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function get interrupt priority of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pri</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative.</para></listitem><listitem><para>If pri to be set is larger than the max priority allowed, it will be force to be max priority.</para></listitem><listitem><para>Priority width is CLICINTCTLBITS minus clciinfo.nlbits if clciinfo.nlbits is less than CLICINTCTLBITS. Otherwise priority width is 0. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga0fe4f3d20b099c74db7dfef3eea81817" kindref="member">ECLIC_GetPriorityIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="647" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="647" bodyend="664"/>
        <references refid="group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab" compoundref="core__feature__eclic_8h" startline="274" endline="277">__ECLIC_GetCfgNlbits</references>
        <references refid="group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da" compoundref="core__feature__eclic_8h" startline="562" endline="565">__ECLIC_GetCtrlIRQ</references>
        <references refid="group__NMSIS__Core__IntExc_1ga2c72ee40cad78719f6d60767b75f6dcd" compoundref="core__feature__eclic_8h" startline="546" endline="549">__ECLIC_SetCtrlIRQ</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga34443f8b2b2935d099e6a0119b96c712" compoundref="core__feature__eclic_8h" startline="119">ECLIC_MAX_NLBITS</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga5e47fae9a66b286f1d0df6799e5a244c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint8_t</type>
        <definition>__STATIC_FORCEINLINE uint8_t __ECLIC_GetPriorityIRQ</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetPriorityIRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get ECLIC Interrupt priority of a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function get interrupt priority of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt priority </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga721375660a030d16e429a9718c1271c8" kindref="member">ECLIC_SetPriorityIRQ</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="677" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="677" bodyend="690"/>
        <references refid="group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab" compoundref="core__feature__eclic_8h" startline="274" endline="277">__ECLIC_GetCfgNlbits</references>
        <references refid="group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da" compoundref="core__feature__eclic_8h" startline="562" endline="565">__ECLIC_GetCtrlIRQ</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga34443f8b2b2935d099e6a0119b96c712" compoundref="core__feature__eclic_8h" startline="119">ECLIC_MAX_NLBITS</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga2e80049df57b285d4dd43454377c0845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECLIC_SetVector</definition>
        <argsstring>(IRQn_Type IRQn, rv_csr_t vector)</argsstring>
        <name>__ECLIC_SetVector</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type><ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Set Interrupt Vector of a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function set interrupt handler address of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt handler address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative.</para></listitem><listitem><para>You can set the CSR_CSR_MTVT to set interrupt vector table entry address.</para></listitem><listitem><para>If your vector table is placed in readonly section, the vector for IRQn will not be modified. For this case, you need to use the correct irq handler name defined in your vector table as your irq handler function name.</para></listitem><listitem><para>This function will only work correctly when the vector table is placed in an read-write enabled section. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga76b3769badcf8362e1cb6a058f65c65e" kindref="member">ECLIC_GetVector</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="708" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="708" bodyend="723"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga5e44edb3f3d95986c92f8efad5db0c2c" compoundref="riscv__encoding_8h" startline="495">CSR_MTVT</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga7b8025dd8eac9993066d730cee6475a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> <ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
        <definition>__STATIC_FORCEINLINE rv_csr_t __ECLIC_GetVector</definition>
        <argsstring>(IRQn_Type IRQn)</argsstring>
        <name>__ECLIC_GetVector</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <briefdescription>
<para>Get Interrupt Vector of a specific interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>This function get interrupt handler address of the specific interrupt <emphasis>IRQn</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt handler address </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>IRQn must not be negative.</para></listitem><listitem><para>You can read CSR_CSR_MTVT to get interrupt vector table entry address. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaa7cacacc369af014a0008fe3b5705b77" kindref="member">ECLIC_SetVector</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="737" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="737" bodyend="746"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga5e44edb3f3d95986c92f8efad5db0c2c" compoundref="riscv__encoding_8h" startline="495">CSR_MTVT</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gaec014abd3940e642f652b97b70d7ac8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __set_exc_entry</definition>
        <argsstring>(rv_csr_t addr)</argsstring>
        <name>__set_exc_entry</name>
        <param>
          <type><ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Set Exception entry address. </para>        </briefdescription>
        <detaileddescription>
<para>This function set exception handler address to &apos;CSR_MTVEC&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception handler address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function use to set exception handler address to &apos;CSR_MTVEC&apos;. Address is 4 bytes align. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga05bee6a5e41963ef1845c8a7e5a09c89" kindref="member">__get_exc_entry</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="758" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="758" bodyend="763"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" compoundref="core__feature__base_8h" startline="321">__RV_CSR_WRITE</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga22f5cd17199a966b4b840dd56d151216" compoundref="riscv__encoding_8h" startline="330">CSR_MTVEC</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2bcc1789c000ec72b06b7d7e736aa1c3" compoundref="core__feature__eclic_8h" startline="120">ECLIC_MODE_MTVEC_Msk</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga05bee6a5e41963ef1845c8a7e5a09c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> <ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
        <definition>__STATIC_FORCEINLINE rv_csr_t __get_exc_entry</definition>
        <argsstring>(void)</argsstring>
        <name>__get_exc_entry</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get Exception entry address. </para>        </briefdescription>
        <detaileddescription>
<para>This function get exception handler address from &apos;CSR_MTVEC&apos;. <simplesect kind="return"><para>Exception handler address </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function use to get exception handler address from &apos;CSR_MTVEC&apos;. Address is 4 bytes align </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gaec014abd3940e642f652b97b70d7ac8e" kindref="member">__set_exc_entry</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="775" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="775" bodyend="779"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga22f5cd17199a966b4b840dd56d151216" compoundref="riscv__encoding_8h" startline="330">CSR_MTVEC</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2bcc1789c000ec72b06b7d7e736aa1c3" compoundref="core__feature__eclic_8h" startline="120">ECLIC_MODE_MTVEC_Msk</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gadbe0f14f32c5989304fd05faf0cff648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __set_nonvec_entry</definition>
        <argsstring>(rv_csr_t addr)</argsstring>
        <name>__set_nonvec_entry</name>
        <param>
          <type><ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Set Non-vector interrupt entry address. </para>        </briefdescription>
        <detaileddescription>
<para>This function set Non-vector interrupt address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-vector interrupt entry address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function use to set non-vector interrupt entry address to &apos;CSR_MTVT2&apos; if</para></listitem><listitem><para>CSR_MTVT2 bit0 is 1. If &apos;CSR_MTVT2&apos; bit0 is 0 then set address to &apos;CSR_MTVEC&apos; </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1ga2fe20dcdecc453c6709448944b1f5350" kindref="member">__get_nonvec_entry</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="792" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="792" bodyend="801"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" compoundref="core__feature__base_8h" startline="321">__RV_CSR_WRITE</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga22f5cd17199a966b4b840dd56d151216" compoundref="riscv__encoding_8h" startline="330">CSR_MTVEC</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga7d9dcb2dd7d7c764aab4b68033b383f2" compoundref="riscv__encoding_8h" startline="517">CSR_MTVT2</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2bcc1789c000ec72b06b7d7e736aa1c3" compoundref="core__feature__eclic_8h" startline="120">ECLIC_MODE_MTVEC_Msk</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1ga2fe20dcdecc453c6709448944b1f5350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> <ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
        <definition>__STATIC_FORCEINLINE rv_csr_t __get_nonvec_entry</definition>
        <argsstring>(void)</argsstring>
        <name>__get_nonvec_entry</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get Non-vector interrupt entry address. </para>        </briefdescription>
        <detaileddescription>
<para>This function get Non-vector interrupt address. <simplesect kind="return"><para>Non-vector interrupt handler address </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function use to get non-vector interrupt entry address from &apos;CSR_MTVT2&apos; if</para></listitem><listitem><para>CSR_MTVT2 bit0 is 1. If &apos;CSR_MTVT2&apos; bit0 is 0 then get address from &apos;CSR_MTVEC&apos;. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><ref refid="group__NMSIS__Core__IntExc_1gadbe0f14f32c5989304fd05faf0cff648" kindref="member">__set_nonvec_entry</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="814" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="814" bodyend="822"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga22f5cd17199a966b4b840dd56d151216" compoundref="riscv__encoding_8h" startline="330">CSR_MTVEC</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga7d9dcb2dd7d7c764aab4b68033b383f2" compoundref="riscv__encoding_8h" startline="517">CSR_MTVT2</references>
        <references refid="group__NMSIS__Core__ECLIC__Registers_1ga2bcc1789c000ec72b06b7d7e736aa1c3" compoundref="core__feature__eclic_8h" startline="120">ECLIC_MODE_MTVEC_Msk</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExc_1gac5b9521ea1bd5260330714b8032d04d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> <ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref></type>
        <definition>__STATIC_FORCEINLINE rv_csr_t __get_nmi_entry</definition>
        <argsstring>(void)</argsstring>
        <name>__get_nmi_entry</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get NMI interrupt entry from &apos;CSR_MNVEC&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>This function get NMI interrupt address from &apos;CSR_MNVEC&apos;. <simplesect kind="return"><para>NMI interrupt handler address </para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function use to get NMI interrupt handler address from &apos;CSR_MNVEC&apos;. If CSR_MMISC_CTL[9] = 1 &apos;CSR_MNVEC&apos;</para></listitem><listitem><para>will be equal as mtvec. If CSR_MMISC_CTL[9] = 0 &apos;CSR_MNVEC&apos; will be equal as reset vector.</para></listitem><listitem><para>NMI entry is defined via <ref refid="group__NMSIS__Core__CSR__Registers_1gabec3fb75f542861f5dcd5a1cda1df932" kindref="member">CSR_MMISC_CTL</ref>, writing to <ref refid="group__NMSIS__Core__CSR__Registers_1ga13df3ff8aec804cae346b61b2643c589" kindref="member">CSR_MNVEC</ref> will be ignored. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="834" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="834" bodyend="837"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga13df3ff8aec804cae346b61b2643c589" compoundref="riscv__encoding_8h" startline="504">CSR_MNVEC</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gad35a05a1e8fb89332d59c7db2904756b" prot="public" static="no">
        <name>ECLIC_SetCfgNlbits</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga38900ce869dd78e9b432ac90d8006082" kindref="member">__ECLIC_SetCfgNlbits</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="212" column="14" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga47f628da4dcf09a2fc43bfb7c8de1528" prot="public" static="no">
        <name>ECLIC_GetCfgNlbits</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga1dce18ecc4a504cc128c62596d25f3ab" kindref="member">__ECLIC_GetCfgNlbits</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="213" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga5d8158db12cd1bdfe0bfc82667eeffc5" prot="public" static="no">
        <name>ECLIC_GetInfoVer</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga062b7c1b16828b4dbc502a303648dbb1" kindref="member">__ECLIC_GetInfoVer</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="214" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga2b075534f2e421549ebe16b9c97a496f" prot="public" static="no">
        <name>ECLIC_GetInfoCtlbits</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga6db42f6efa6f57690930a78b35c64b40" kindref="member">__ECLIC_GetInfoCtlbits</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="215" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga6308d1600c92e3f9dc67c7837c68f854" prot="public" static="no">
        <name>ECLIC_GetInfoNum</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga2875bb0f9e3ceb6c750dcd5396d099b7" kindref="member">__ECLIC_GetInfoNum</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="216" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga59e29ad3023110a58eb9163d976f44c6" prot="public" static="no">
        <name>ECLIC_SetMth</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gaf4be616cd91685175abee3f2af47b342" kindref="member">__ECLIC_SetMth</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="217" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaf52f1885d59864d30dd5da7681f5985b" prot="public" static="no">
        <name>ECLIC_GetMth</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga36108f1b6b9e2545727701d856a63c6e" kindref="member">__ECLIC_GetMth</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="218" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaef478ada8e8906c9fe8d4dc2311a39e1" prot="public" static="no">
        <name>ECLIC_EnableIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gae081f15804b168a9573aca186c6176aa" kindref="member">__ECLIC_EnableIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="219" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="219" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__SysTimer_1ga349805c25d9aa753c6fd69b3c0151126" compoundref="core__feature__timer_8h" startline="304" endline="312">SysTick_Config</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gacc2434143882fd815f46f546ecaf1371" prot="public" static="no">
        <name>ECLIC_GetEnableIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gad91c17c202ac4f466a9501c88d23e825" kindref="member">__ECLIC_GetEnableIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="220" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga2fd91a5d186fe3fb4ca3bed07df78813" prot="public" static="no">
        <name>ECLIC_DisableIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gaa34edbcf50501a1ef4ebe1e2fbfae2b5" kindref="member">__ECLIC_DisableIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="221" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga2776c309447ab5f7258266299df2f6aa" prot="public" static="no">
        <name>ECLIC_SetPendingIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gadadcfda306ae9024c5e7a5a79c3d49de" kindref="member">__ECLIC_SetPendingIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="222" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaf5a8f8a271f159769eac14959748ec92" prot="public" static="no">
        <name>ECLIC_GetPendingIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gaa20c0e2158dbe29f589468de10abde12" kindref="member">__ECLIC_GetPendingIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="223" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga2006752b49d78e3247b2b355652a429a" prot="public" static="no">
        <name>ECLIC_ClearPendingIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga79f14465b1588b3c970efd8d55422638" kindref="member">__ECLIC_ClearPendingIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="224" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gac0681d16f62ce0b08e48e89131995a05" prot="public" static="no">
        <name>ECLIC_SetTrigIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gaecf87e71c0c4a2ee711f0c292c3ebd8a" kindref="member">__ECLIC_SetTrigIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="225" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gadaaf360694309accdc74c0808161755c" prot="public" static="no">
        <name>ECLIC_GetTrigIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gabe634783ac950552cb51588e78ff2a57" kindref="member">__ECLIC_GetTrigIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="226" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga0bd2875fbd02a00bec78735940704c13" prot="public" static="no">
        <name>ECLIC_SetShvIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga226570d14c924615a955e07b9883e415" kindref="member">__ECLIC_SetShvIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="227" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="227" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__SysTimer_1ga349805c25d9aa753c6fd69b3c0151126" compoundref="core__feature__timer_8h" startline="304" endline="312">SysTick_Config</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaa8dc0e0203d692a0cc565e59906fb706" prot="public" static="no">
        <name>ECLIC_GetShvIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gad7d7238a79c39c226a8289d027266cc0" kindref="member">__ECLIC_GetShvIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="228" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga44797af8a09e6b798cc7cb2bc3b9602b" prot="public" static="no">
        <name>ECLIC_SetCtrlIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga2c72ee40cad78719f6d60767b75f6dcd" kindref="member">__ECLIC_SetCtrlIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="229" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga32d7fe236e9b906bfee340fb42a1a644" prot="public" static="no">
        <name>ECLIC_GetCtrlIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga0c552df637ed3e5830ae27fc712593da" kindref="member">__ECLIC_GetCtrlIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="230" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gad6f35a2f69908b97b083c5e31c1c5aad" prot="public" static="no">
        <name>ECLIC_SetLevelIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gae1d0b0d592b55bc57be6704ceeb314b1" kindref="member">__ECLIC_SetLevelIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="231" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="231" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__SysTimer_1ga349805c25d9aa753c6fd69b3c0151126" compoundref="core__feature__timer_8h" startline="304" endline="312">SysTick_Config</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaf323b6babdd4236644d84057332e7533" prot="public" static="no">
        <name>ECLIC_GetLevelIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga1ccefb6dd64211176683848ef52e5b8f" kindref="member">__ECLIC_GetLevelIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="232" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga721375660a030d16e429a9718c1271c8" prot="public" static="no">
        <name>ECLIC_SetPriorityIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1gaafd7870e3de2a0831a5ba0fec6795207" kindref="member">__ECLIC_SetPriorityIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="233" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga0fe4f3d20b099c74db7dfef3eea81817" prot="public" static="no">
        <name>ECLIC_GetPriorityIRQ</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga5e47fae9a66b286f1d0df6799e5a244c" kindref="member">__ECLIC_GetPriorityIRQ</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="234" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaa7cacacc369af014a0008fe3b5705b77" prot="public" static="no">
        <name>ECLIC_SetVector</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga2e80049df57b285d4dd43454377c0845" kindref="member">__ECLIC_SetVector</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="244" column="14" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1ga76b3769badcf8362e1cb6a058f65c65e" prot="public" static="no">
        <name>ECLIC_GetVector</name>
        <initializer><ref refid="group__NMSIS__Core__IntExc_1ga7b8025dd8eac9993066d730cee6475a0" kindref="member">__ECLIC_GetVector</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="245" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gab7b083edd7a39c7aa7b17b5f43f13452" prot="public" static="no">
        <name>SAVE_IRQ_CSR_CONTEXT</name>
        <param></param>
        <briefdescription>
<para>Save necessary CSRs into variables for vector interrupt nesting. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is used to declare variables which are used for saving CSRs(MCAUSE, MEPC, MSUB), and it will read these CSR content into these variables, it need to be used in a vector-interrupt if nesting is required. <simplesect kind="remark"><para><itemizedlist>
<listitem><para>Interrupt will be enabled after this macro is called</para></listitem><listitem><para>It need to be used together with <ref refid="group__NMSIS__Core__IntExc_1gaefefc59dbf6bd6ef8cd0a9b58b2bbeaf" kindref="member">RESTORE_IRQ_CSR_CONTEXT</ref></para></listitem><listitem><para>Don&apos;t use variable names __mcause, __mpec, __msubm in your ISR code</para></listitem><listitem><para>If you want to enable interrupt nesting feature for vector interrupt, you can do it like this: <programlisting><codeline><highlight class="comment">//<sp/>__INTERRUPT<sp/>attribute<sp/>will<sp/>generates<sp/>function<sp/>entry<sp/>and<sp/>exit<sp/>sequences<sp/>suitable</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>use<sp/>in<sp/>an<sp/>interrupt<sp/>handler<sp/>when<sp/>this<sp/>attribute<sp/>is<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gad20602e0e7adfc925c1205d0d38d91f6" kindref="member">__INTERRUPT</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eclic_mtip_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>call<sp/>this<sp/>to<sp/>save<sp/>CSRs</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__IntExc_1gab7b083edd7a39c7aa7b17b5f43f13452" kindref="member">SAVE_IRQ_CSR_CONTEXT</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!Interrupt<sp/>is<sp/>enabled<sp/>here!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!Higher<sp/>priority<sp/>interrupt<sp/>could<sp/>nest<sp/>it!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>you<sp/>own<sp/>interrupt<sp/>handling<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>call<sp/>this<sp/>to<sp/>restore<sp/>CSRs</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__IntExc_1gaefefc59dbf6bd6ef8cd0a9b58b2bbeaf" kindref="member">RESTORE_IRQ_CSR_CONTEXT</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="869" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExc_1gaefefc59dbf6bd6ef8cd0a9b58b2bbeaf" prot="public" static="no">
        <name>RESTORE_IRQ_CSR_CONTEXT</name>
        <param></param>
        <briefdescription>
<para>Restore necessary CSRs from variables for vector interrupt nesting. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is used restore CSRs(MCAUSE, MEPC, MSUB) from pre-defined variables in <ref refid="group__NMSIS__Core__IntExc_1gab7b083edd7a39c7aa7b17b5f43f13452" kindref="member">SAVE_IRQ_CSR_CONTEXT</ref> macro. <simplesect kind="remark"><para><itemizedlist>
<listitem><para>Interrupt will be disabled after this macro is called</para></listitem><listitem><para>It need to be used together with <ref refid="group__NMSIS__Core__IntExc_1gab7b083edd7a39c7aa7b17b5f43f13452" kindref="member">SAVE_IRQ_CSR_CONTEXT</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" line="884" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_eclic.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that manage interrupts and exceptions via the ECLIC. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
