<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="core__feature__fpu_8h" kind="file">
    <compoundname>core_feature_fpu.h</compoundname>
    <includedby refid="nmsis__core_8h" local="yes">nmsis_core.h</includedby>
    <invincdepgraph>
      <node id="19">
        <label>core_feature_fpu.h</label>
        <link refid="core_feature_fpu.h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>nmsis_core.h</label>
        <link refid="nmsis__core_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gafa83f561b446add5c453e0feb255d2e6" prot="public" static="no">
        <name>__RISCV_FLEN</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="59" column="11" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga8cc990586c8cd66746a89ea04a952306" prot="public" static="no">
        <name>__get_FCSR</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gabba4da62b155cd22e3bd1a8ec402cf78" kindref="member">CSR_FCSR</ref>)</initializer>
        <briefdescription>
<para>Get FCSR CSR Register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="65" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga2a5b820d47fe120ac23382db72f6cbb8" prot="public" static="no">
        <name>__set_FCSR</name>
        <param><defname>val</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" kindref="member">__RV_CSR_WRITE</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gabba4da62b155cd22e3bd1a8ec402cf78" kindref="member">CSR_FCSR</ref>, (val))</initializer>
        <briefdescription>
<para>Set FCSR CSR Register with val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="67" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gaa6595ca9d101dda1feb9826d0905bd60" prot="public" static="no">
        <name>__get_FRM</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gaab22a5666b6fd37cde09583f0ca66133" kindref="member">CSR_FRM</ref>)</initializer>
        <briefdescription>
<para>Get FRM CSR Register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="69" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gaae42d30f7a65effccb13210406c69f6a" prot="public" static="no">
        <name>__set_FRM</name>
        <param><defname>val</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" kindref="member">__RV_CSR_WRITE</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gaab22a5666b6fd37cde09583f0ca66133" kindref="member">CSR_FRM</ref>, (val))</initializer>
        <briefdescription>
<para>Set FRM CSR Register with val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="71" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gaa679e9260657efa33c5340841e8a6aff" prot="public" static="no">
        <name>__get_FFLAGS</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gaf25caf1486cedbc47afdd5afd81be307" kindref="member">CSR_FFLAGS</ref>)</initializer>
        <briefdescription>
<para>Get FFLAGS CSR Register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="73" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga5c875e72325d398dc16301eec09eec0d" prot="public" static="no">
        <name>__set_FFLAGS</name>
        <param><defname>val</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" kindref="member">__RV_CSR_WRITE</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gaf25caf1486cedbc47afdd5afd81be307" kindref="member">CSR_FFLAGS</ref>, (val))</initializer>
        <briefdescription>
<para>Set FFLAGS CSR Register with val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="75" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga56907288398563598c7ed6c203bde07c" prot="public" static="no">
        <name>__enable_FPU</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref>, <ref refid="group__NMSIS__Core__CSR__Encoding_1gab7b9c10a700f7570d44c49f369b6fcce" kindref="member">MSTATUS_FS</ref>)</initializer>
        <briefdescription>
<para>Enable FPU Unit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="78" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga3cb1d30a444036111b1e83853315e11a" prot="public" static="no">
        <name>__disable_FPU</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref>, <ref refid="group__NMSIS__Core__CSR__Encoding_1gab7b9c10a700f7570d44c49f369b6fcce" kindref="member">MSTATUS_FS</ref>)</initializer>
        <briefdescription>
<para>Disable FPU Unit. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>We can save power by disable FPU Unit.</para></listitem><listitem><para>When FPU Unit is disabled, any access to FPU related CSR registers and FPU instructions will cause illegal Instuction Exception. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="86" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gada7714c5b13faee62cd17c11b33099bc" prot="public" static="no">
        <name>__RV_FLW</name>
        <param><defname>freg</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>ofs</defname></param>
        <briefdescription>
<para>Load a single-precision value from memory into float point register freg using flw instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The FLW instruction loads a single-precision floating point value from memory address (addr + ofs) into floating point register freg(f0-f31) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freg</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point register, eg. <ref refid="group__NMSIS__Core__CSR__Encoding_1gab630278e8a24dd620cb6a512b51bc45f" kindref="member">FREG(0)</ref>, f0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory base address, 4 byte aligned required </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>a 12-bit immediate signed byte offset value, should be an const value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>FLW and FSW operations need to make sure the address is 4 bytes aligned, otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)</para></listitem><listitem><para>FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="103" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga8589da14b8ba3b8370752efc3e71f060" prot="public" static="no">
        <name>__RV_FSW</name>
        <param><defname>freg</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>ofs</defname></param>
        <briefdescription>
<para>Store a single-precision value from float point freg into memory using fsw instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The FSW instruction stores a single-precision value from floating point register to memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freg</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point register(f0-f31), eg. <ref refid="group__NMSIS__Core__CSR__Encoding_1gab630278e8a24dd620cb6a512b51bc45f" kindref="member">FREG(0)</ref>, f0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory base address, 4 byte aligned required </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>a 12-bit immediate signed byte offset value, should be an const value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>FLW and FSW operations need to make sure the address is 4 bytes aligned, otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)</para></listitem><listitem><para>FLW and FSW do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="124" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gad4c739198e28d81dc036a4ceafeaaa14" prot="public" static="no">
        <name>__RV_FLD</name>
        <param><defname>freg</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>ofs</defname></param>
        <briefdescription>
<para>Load a double-precision value from memory into float point register freg using fld instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The FLD instruction loads a double-precision floating point value from memory address (addr + ofs) into floating point register freg(f0-f31) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freg</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point register, eg. <ref refid="group__NMSIS__Core__CSR__Encoding_1gab630278e8a24dd620cb6a512b51bc45f" kindref="member">FREG(0)</ref>, f0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory base address, 8 byte aligned required </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>a 12-bit immediate signed byte offset value, should be an const value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para><itemizedlist>
<listitem><para>Function only available for double precision floating point unit, FLEN = 64 </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>FLD and FSD operations need to make sure the address is 8 bytes aligned, otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)</para></listitem><listitem><para>FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="147" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gacabdf0d10c9c364361d498887d2a31ee" prot="public" static="no">
        <name>__RV_FSD</name>
        <param><defname>freg</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>ofs</defname></param>
        <briefdescription>
<para>Store a double-precision value from float point freg into memory using fsd instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The FSD instruction stores double-precision value from floating point register to memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freg</parametername>
</parameternamelist>
<parameterdescription>
<para>The floating point register(f0-f31), eg. <ref refid="group__NMSIS__Core__CSR__Encoding_1gab630278e8a24dd620cb6a512b51bc45f" kindref="member">FREG(0)</ref>, f0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory base address, 8 byte aligned required </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>a 12-bit immediate signed byte offset value, should be an const value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para><itemizedlist>
<listitem><para>Function only available for double precision floating point unit, FLEN = 64 </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>FLD and FSD operations need to make sure the address is 8 bytes aligned, otherwise it will cause exception code 4(Load address misaligned) or 6 (Store/AMO address misaligned)</para></listitem><listitem><para>FLD and FSD do not modify the bits being transferred; in particular, the payloads of non-canonical NaNs are preserved. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="170" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga7284e0420eb63c1858739f326695c3d7" prot="public" static="no">
        <name>__RV_FLOAD</name>
        <initializer><ref refid="group__NMSIS__Core__FPU__Functions_1gad4c739198e28d81dc036a4ceafeaaa14" kindref="member">__RV_FLD</ref></initializer>
        <briefdescription>
<para>Load a float point value from memory into float point register freg using flw/fld instruction. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>For Single-Precison Floating-Point Mode(__FPU_PRESENT == 1, __RISCV_FLEN == 32): It will call <ref refid="group__NMSIS__Core__FPU__Functions_1gada7714c5b13faee62cd17c11b33099bc" kindref="member">__RV_FLW</ref> to load a single-precision floating point value from memory to floating point register</para></listitem><listitem><para>For Double-Precison Floating-Point Mode(__FPU_PRESENT == 2, __RISCV_FLEN == 64): It will call <ref refid="group__NMSIS__Core__FPU__Functions_1gad4c739198e28d81dc036a4ceafeaaa14" kindref="member">__RV_FLD</ref> to load a double-precision floating point value from memory to floating point register</para></listitem></itemizedlist>
</para><para><simplesect kind="attention"><para>Function behaviour is different for __FPU_PRESENT = 1 or 2, please see the real function this macro represent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="208" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1gafeca0b04cdcb27f77b10f2ece682e4a3" prot="public" static="no">
        <name>__RV_FSTORE</name>
        <initializer><ref refid="group__NMSIS__Core__FPU__Functions_1gacabdf0d10c9c364361d498887d2a31ee" kindref="member">__RV_FSD</ref></initializer>
        <briefdescription>
<para>Store a float value from float point freg into memory using fsw/fsd instruction. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>For Single-Precison Floating-Point Mode(__FPU_PRESENT == 1, __RISCV_FLEN == 32): It will call <ref refid="group__NMSIS__Core__FPU__Functions_1ga8589da14b8ba3b8370752efc3e71f060" kindref="member">__RV_FSW</ref> to store floating point register into memory</para></listitem><listitem><para>For Double-Precison Floating-Point Mode(__FPU_PRESENT == 2, __RISCV_FLEN == 64): It will call <ref refid="group__NMSIS__Core__FPU__Functions_1gacabdf0d10c9c364361d498887d2a31ee" kindref="member">__RV_FSD</ref> to store floating point register into memory</para></listitem></itemizedlist>
</para><para><simplesect kind="attention"><para>Function behaviour is different for __FPU_PRESENT = 1 or 2, please see the real function this macro represent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="209" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0" prot="public" static="no">
        <name>SAVE_FPU_CONTEXT</name>
        <param></param>
        <briefdescription>
<para>Save FPU context into variables for interrupt nesting. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is used to declare variables which are used for saving FPU context, and it will store the nessary fpu registers into these variables, it need to be used in a interrupt when in this interrupt fpu registers are used. <simplesect kind="remark"><para><itemizedlist>
<listitem><para>It need to be used together with <ref refid="group__NMSIS__Core__FPU__Functions_1ga9a78b83eedadc42478e23a10aa8ebc07" kindref="member">RESTORE_FPU_CONTEXT</ref></para></listitem><listitem><para>Don&apos;t use variable names __fpu_context in your ISR code</para></listitem><listitem><para>If you isr code will use fpu registers, and this interrupt is nested. Then you can do it like this: <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eclic_mtip_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!Interrupt<sp/>is<sp/>enabled<sp/>here!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!Higher<sp/>priority<sp/>interrupt<sp/>could<sp/>nest<sp/>it!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Necessary<sp/>only<sp/>when<sp/>you<sp/>need<sp/>to<sp/>use<sp/>fpu<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>isr<sp/>handler<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0" kindref="member">SAVE_FPU_CONTEXT</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>you<sp/>own<sp/>interrupt<sp/>handling<sp/>code<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pair<sp/>of<sp/>SAVE_FPU_CONTEXT()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__FPU__Functions_1ga9a78b83eedadc42478e23a10aa8ebc07" kindref="member">RESTORE_FPU_CONTEXT</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="243" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__FPU__Functions_1ga9a78b83eedadc42478e23a10aa8ebc07" prot="public" static="no">
        <name>RESTORE_FPU_CONTEXT</name>
        <param></param>
        <briefdescription>
<para>Restore necessary fpu registers from variables for interrupt nesting. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is used restore necessary fpu registers from pre-defined variables in <ref refid="group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0" kindref="member">SAVE_FPU_CONTEXT</ref> macro. <simplesect kind="remark"><para><itemizedlist>
<listitem><para>It need to be used together with <ref refid="group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0" kindref="member">SAVE_FPU_CONTEXT</ref> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="274" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__NMSIS__Core__FPU__Functions_1ga2e1e58dd537699f8674a335d64c8705a" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t rv_fpu_t</definition>
        <argsstring></argsstring>
        <name>rv_fpu_t</name>
        <briefdescription>
<para>Type of FPU register, depends on the FLEN defined in RISC-V. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" line="211" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>FPU feature API header file for Nuclei N/NX Core. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CORE_FEATURE_FPU_H__</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__CORE_FEATURE_FPU_H__</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>FPU<sp/>Feature<sp/>Configuration<sp/>Macro:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>1.<sp/>__FPU_PRESENT:<sp/><sp/>Define<sp/>whether<sp/>Floating<sp/>Point<sp/>Unit(FPU)<sp/>is<sp/>present<sp/>or<sp/>not</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>0:<sp/>Not<sp/>present</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>1:<sp/>Single<sp/>precision<sp/>FPU<sp/>present,<sp/>__RISCV_FLEN<sp/>==<sp/>32</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>2:<sp/>Double<sp/>precision<sp/>FPU<sp/>present,<sp/>__RISCV_FLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>FPU<sp/>Operations<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor">#if<sp/>defined(__FPU_PRESENT)<sp/>&amp;&amp;<sp/>(__FPU_PRESENT<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__FPU_PRESENT<sp/>==<sp/>1</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/>#define<sp/>__RISCV_FLEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>__FPU_PRESENT<sp/>==<sp/>2</highlight></codeline>
<codeline lineno="59" refid="group__NMSIS__Core__FPU__Functions_1gafa83f561b446add5c453e0feb255d2e6" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__RISCV_FLEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__RISCV_FLEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__riscv_flen</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__FPU_PRESENT<sp/>==<sp/>1<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="65" refid="group__NMSIS__Core__FPU__Functions_1ga8cc990586c8cd66746a89ea04a952306" refkind="member"><highlight class="preprocessor">#define<sp/>__get_FCSR()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_READ(CSR_FCSR)</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="67" refid="group__NMSIS__Core__FPU__Functions_1ga2a5b820d47fe120ac23382db72f6cbb8" refkind="member"><highlight class="preprocessor">#define<sp/>__set_FCSR(val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_WRITE(CSR_FCSR,<sp/>(val))</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="69" refid="group__NMSIS__Core__FPU__Functions_1gaa6595ca9d101dda1feb9826d0905bd60" refkind="member"><highlight class="preprocessor">#define<sp/>__get_FRM()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_READ(CSR_FRM)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="71" refid="group__NMSIS__Core__FPU__Functions_1gaae42d30f7a65effccb13210406c69f6a" refkind="member"><highlight class="preprocessor">#define<sp/>__set_FRM(val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_WRITE(CSR_FRM,<sp/>(val))</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="73" refid="group__NMSIS__Core__FPU__Functions_1gaa679e9260657efa33c5340841e8a6aff" refkind="member"><highlight class="preprocessor">#define<sp/>__get_FFLAGS()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_READ(CSR_FFLAGS)</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="75" refid="group__NMSIS__Core__FPU__Functions_1ga5c875e72325d398dc16301eec09eec0d" refkind="member"><highlight class="preprocessor">#define<sp/>__set_FFLAGS(val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_WRITE(CSR_FFLAGS,<sp/>(val))</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="78" refid="group__NMSIS__Core__FPU__Functions_1ga56907288398563598c7ed6c203bde07c" refkind="member"><highlight class="preprocessor">#define<sp/>__enable_FPU()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_SET(CSR_MSTATUS,<sp/>MSTATUS_FS)</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="86" refid="group__NMSIS__Core__FPU__Functions_1ga3cb1d30a444036111b1e83853315e11a" refkind="member"><highlight class="preprocessor">#define<sp/>__disable_FPU()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CSR_CLEAR(CSR_MSTATUS,<sp/>MSTATUS_FS)</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group__NMSIS__Core__FPU__Functions_1gada7714c5b13faee62cd17c11b33099bc" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_FLW(freg,<sp/>addr,<sp/>ofs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__addr<sp/>=<sp/>(rv_csr_t)(addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;flw<sp/>&quot;<sp/>STRINGIFY(freg)<sp/>&quot;,<sp/>%0(%1)<sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>:<sp/>&quot;I&quot;(ofs),<sp/>&quot;r&quot;(__addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="124" refid="group__NMSIS__Core__FPU__Functions_1ga8589da14b8ba3b8370752efc3e71f060" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_FSW(freg,<sp/>addr,<sp/>ofs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__addr<sp/>=<sp/>(rv_csr_t)(addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;fsw<sp/>&quot;<sp/>STRINGIFY(freg)<sp/>&quot;,<sp/>%0(%1)<sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>:<sp/>&quot;I&quot;(ofs),<sp/>&quot;r&quot;(__addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="147" refid="group__NMSIS__Core__FPU__Functions_1gad4c739198e28d81dc036a4ceafeaaa14" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_FLD(freg,<sp/>addr,<sp/>ofs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__addr<sp/>=<sp/>(rv_csr_t)(addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;fld<sp/>&quot;<sp/>STRINGIFY(freg)<sp/>&quot;,<sp/>%0(%1)<sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>:<sp/>&quot;I&quot;(ofs),<sp/>&quot;r&quot;(__addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="170" refid="group__NMSIS__Core__FPU__Functions_1gacabdf0d10c9c364361d498887d2a31ee" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_FSD(freg,<sp/>addr,<sp/>ofs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__addr<sp/>=<sp/>(rv_csr_t)(addr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;fsd<sp/>&quot;<sp/>STRINGIFY(freg)<sp/>&quot;,<sp/>%0(%1)<sp/><sp/>&quot;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>:<sp/>&quot;I&quot;(ofs),<sp/>&quot;r&quot;(__addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor">#if<sp/>__FPU_PRESENT<sp/>==<sp/>1</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__RV_FLOAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLW</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__RV_FSTORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSW</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="206"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__FPU__Functions_1ga2e1e58dd537699f8674a335d64c8705a" kindref="member">rv_fpu_t</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__FPU_PRESENT<sp/>==<sp/>2</highlight></codeline>
<codeline lineno="208" refid="group__NMSIS__Core__FPU__Functions_1ga7284e0420eb63c1858739f326695c3d7" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__RV_FLOAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLD</highlight></codeline>
<codeline lineno="209" refid="group__NMSIS__Core__FPU__Functions_1gafeca0b04cdcb27f77b10f2ece682e4a3" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__RV_FSTORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSD</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="211" refid="group__NMSIS__Core__FPU__Functions_1ga2e1e58dd537699f8674a335d64c8705a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="group__NMSIS__Core__FPU__Functions_1ga2e1e58dd537699f8674a335d64c8705a" kindref="member">rv_fpu_t</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__FPU_PRESENT<sp/>==<sp/>2<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="243" refid="group__NMSIS__Core__FPU__Functions_1ga84c57d7bc6ecc4dcb457283e84636cb0" refkind="member"><highlight class="preprocessor">#define<sp/>SAVE_FPU_CONTEXT()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_fpu_t<sp/>__fpu_context[20];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(0),<sp/><sp/>__fpu_context,<sp/>0<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(1),<sp/><sp/>__fpu_context,<sp/>1<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(2),<sp/><sp/>__fpu_context,<sp/>2<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(3),<sp/><sp/>__fpu_context,<sp/>3<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(4),<sp/><sp/>__fpu_context,<sp/>4<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(5),<sp/><sp/>__fpu_context,<sp/>5<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(6),<sp/><sp/>__fpu_context,<sp/>6<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(7),<sp/><sp/>__fpu_context,<sp/>7<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(10),<sp/>__fpu_context,<sp/>8<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(11),<sp/>__fpu_context,<sp/>9<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(12),<sp/>__fpu_context,<sp/>10<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(13),<sp/>__fpu_context,<sp/>11<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(14),<sp/>__fpu_context,<sp/>12<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(15),<sp/>__fpu_context,<sp/>13<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(16),<sp/>__fpu_context,<sp/>14<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(17),<sp/>__fpu_context,<sp/>15<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(28),<sp/>__fpu_context,<sp/>16<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(29),<sp/>__fpu_context,<sp/>17<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(30),<sp/>__fpu_context,<sp/>18<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FSTORE(FREG(31),<sp/>__fpu_context,<sp/>19<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="274" refid="group__NMSIS__Core__FPU__Functions_1ga9a78b83eedadc42478e23a10aa8ebc07" refkind="member"><highlight class="preprocessor">#define<sp/>RESTORE_FPU_CONTEXT()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(0),<sp/><sp/>__fpu_context,<sp/>0<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(1),<sp/><sp/>__fpu_context,<sp/>1<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(2),<sp/><sp/>__fpu_context,<sp/>2<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(3),<sp/><sp/>__fpu_context,<sp/>3<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(4),<sp/><sp/>__fpu_context,<sp/>4<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(5),<sp/><sp/>__fpu_context,<sp/>5<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(6),<sp/><sp/>__fpu_context,<sp/>6<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(7),<sp/><sp/>__fpu_context,<sp/>7<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(10),<sp/>__fpu_context,<sp/>8<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(11),<sp/>__fpu_context,<sp/>9<sp/><sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(12),<sp/>__fpu_context,<sp/>10<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(13),<sp/>__fpu_context,<sp/>11<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(14),<sp/>__fpu_context,<sp/>12<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(15),<sp/>__fpu_context,<sp/>13<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(16),<sp/>__fpu_context,<sp/>14<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(17),<sp/>__fpu_context,<sp/>15<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(28),<sp/>__fpu_context,<sp/>16<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(29),<sp/>__fpu_context,<sp/>17<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(30),<sp/>__fpu_context,<sp/>18<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_FLOAD(FREG(31),<sp/>__fpu_context,<sp/>19<sp/>&lt;&lt;<sp/>LOG_FPREGBYTES);</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SAVE_FPU_CONTEXT()</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RESTORE_FPU_CONTEXT()</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__FPU_PRESENT<sp/>&gt;<sp/>0<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_FPU_Functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_fpu.h"/>
  </compounddef>
</doxygen>
