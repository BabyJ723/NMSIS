<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic_32B_COMPUTATION</compoundname>
    <title>32-bit Computation Instructions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga636b734793493bbcf7a61dfa55749e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_MAXW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_MAXW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MAXW (32-bit Signed Word Maximum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MAXW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the larger value from the 32-bit contents of two general registers.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the larger value as the result, and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs1.W[0]<sp/>&gt;=<sp/>Rs2.W[0])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(Rs1.W[0]);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(Rs2.W[0]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5693" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5693" bodyend="5698"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga60a38a5ee2cab1dd916cf4745c86a77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_MINW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_MINW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MINW (32-bit Signed Word Minimum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MINW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the smaller value from the 32-bit contents of two general registers.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the smaller value as the result, and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs1.W[0]<sp/>&gt;=<sp/>Rs2.W[0])<sp/>{<sp/>Rd<sp/>=<sp/>SE(Rs2.W[0]);<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>Rd<sp/>=<sp/>SE(Rs1.W[0]);<sp/>}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5729" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5729" bodyend="5734"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gab76bac5299a9c41ce034594a704a126b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_MULR64</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_MULR64</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MULR64 (Multiply Word Unsigned to 64-bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MULR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit unsigned integer contents of two registers and write the 64-bit result.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit content of Rs1 with that of Rs2 and writes the 64-bit multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result. The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2 and writes the 64-bit multiplication result to Rd. The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>CONCAT(1`b0,Rs1)<sp/>u*<sp/>CONCAT(1`b0,Rs2);</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).1(0)][31:0]<sp/>=<sp/>Mresult[63:32];</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).0(0)][31:0]<sp/>=<sp/>Mresult[31:0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Mresult[63:0];</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>CONCAT(1`b0,Rs1.W[0])<sp/>u*<sp/>CONCAT(1`b0,Rs2.W[0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5827" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5827" bodyend="5832"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga70bfdde5df211d5aa20cf406736d2ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_MULSR64</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_MULSR64</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MULSR64 (Multiply Word Signed to 64-bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MULSR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed integer contents of two registers and write the 64-bit result.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and writes the 64-bit multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result. The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and writes the 64-bit multiplication result to Rd. The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Ra<sp/>s*<sp/>Rb;</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).1(0)][31:0]<sp/>=<sp/>Mresult[63:32];</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).0(0)][31:0]<sp/>=<sp/>Mresult[31:0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Ra.W[0]<sp/>s*<sp/>Rb.W[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Mresult[63:0];</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5879" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5879" bodyend="5884"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga162b41b571bd84dcd8860437417544dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_RADDW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_RADDW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RADDW (32-bit Signed Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RADDW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add 32-bit signed integers and the results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the first 32-bit signed integer in Rs1 with the first 32-bit signed integer in Rs2. The result is first arithmetically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7FFFFFFF,<sp/>Rs2<sp/>=<sp/>0x7FFFFFFF,<sp/>Rd<sp/>=<sp/>0x7FFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80000000,<sp/>Rs2<sp/>=<sp/>0x80000000,<sp/>Rd<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x40000000,<sp/>Rs2<sp/>=<sp/>0x80000000,<sp/>Rd<sp/>=<sp/>0xE0000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6354" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6354" bodyend="6359"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad19388580ce1a2cc1afee60f9d73e60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_RSUBW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_RSUBW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSUBW (32-bit Signed Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSUBW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract 32-bit signed integers and the result is halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit signed integer in Rs1. The result is first arithmetically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7FFFFFFF,<sp/>Rs2<sp/>=<sp/>0x80000000,<sp/>Rd<sp/>=<sp/>0x7FFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80000000,<sp/>Rs2<sp/>=<sp/>0x7FFFFFFF,<sp/>Rd<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80000000,<sp/>Rs2<sp/>=<sp/>0x40000000,<sp/>Rd<sp/>=<sp/>0xA0000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6773" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6773" bodyend="6778"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad8c7e0a31ab014db941c83a0a704da8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URADDW</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_URADDW</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URADDW (32-bit Unsigned Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URADDW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add 32-bit unsigned integers and the results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the first 32-bit unsigned integer in Rs1 with the first 32-bit unsigned integer in Rs2. The result is first logically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFFFFFF,<sp/>Rb<sp/>=<sp/>0x7FFFFFFF<sp/>Rt<sp/>=<sp/>0x7FFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80000000,<sp/>Rb<sp/>=<sp/>0x80000000<sp/>Rt<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x40000000,<sp/>Rb<sp/>=<sp/>0x80000000<sp/>Rt<sp/>=<sp/>0x60000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12929" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12929" bodyend="12934"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gaf80c041da49050e0469a6e945f5df1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URSUBW</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_URSUBW</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSUBW (32-bit Unsigned Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSUBW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract 32-bit unsigned integers and the result is halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit signed integer in Rs1. The result is first logically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFFFFFF,<sp/>Rb<sp/>=<sp/>0x80000000<sp/>Rt<sp/>=<sp/>0xFFFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80000000,<sp/>Rb<sp/>=<sp/>0x7FFFFFFF<sp/>Rt<sp/>=<sp/>0x00000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80000000,<sp/>Rb<sp/>=<sp/>0x40000000<sp/>Rt<sp/>=<sp/>0x20000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13321" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13321" bodyend="13326"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>32-bit Computation Instructions </para>    </briefdescription>
    <detaileddescription>
<para>there are 8 32-bit Computation Instructions </para>    </detaileddescription>
  </compounddef>
</doxygen>
