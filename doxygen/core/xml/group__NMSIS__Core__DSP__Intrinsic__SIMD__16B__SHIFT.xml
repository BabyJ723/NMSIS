<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic_SIMD_16B_SHIFT</compoundname>
    <title>SIMD 16-bit Shift Instructions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae0d8b0f00c558d5a7f1119b9d261779f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLL16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_KSLL16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLL16 (SIMD 16-bit Saturating Shift Left Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the low-order 4-bits of the value in the Rs2 register. Any shifted value greater than 2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is saturated to -2^15. And the saturated results are written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="4683" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4683" bodyend="4688"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga0c6a91d4acd34104ed5b47e48e910114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLLI16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_KSLLI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLLI16 (SIMD 16-bit Saturating Shift Left Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLLI16<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the imm4u constant. Any shifted value greater than 2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is saturated to -2^15. And the saturated results are written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="4735" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4735" bodyend="4740"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaa85a466f43c98b2a2b34dc19e9c8e9d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLRA16</definition>
        <argsstring>(unsigned long a, int b)</argsstring>
        <name>__RV_KSLRA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRA16 (SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KSLRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q15 saturation for the left shift. The <computeroutput>.u</computeroutput> form performs additional rounding up operations for the right shift.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[4:0]. However, the behavior of <computeroutput>Rs2[4:0]==-2^4 (0x10)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[4:0]==-(2^4-1) (0x11)</computeroutput>. The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <computeroutput>.u</computeroutput> form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">if<sp/>(Rs2[4:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>16)?<sp/>15<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="4936" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4936" bodyend="4941"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae5b84af52b3d277117a4ee509df1504d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLRA16_U</definition>
        <argsstring>(unsigned long a, int b)</argsstring>
        <name>__RV_KSLRA16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRA16.u (SIMD 16-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KSLRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q15 saturation for the left shift. The <computeroutput>.u</computeroutput> form performs additional rounding up operations for the right shift.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[4:0]. However, the behavior of <computeroutput>Rs2[4:0]==-2^4 (0x10)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[4:0]==-(2^4-1) (0x11)</computeroutput>. The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <computeroutput>.u</computeroutput> form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">if<sp/>(Rs2[4:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>16)?<sp/>15<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="5003" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5003" bodyend="5008"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga567ef612a72bcfbdc3a12a55bafb3b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SLL16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SLL16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SLL16 (SIMD 16-bit Shift Left Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SLL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left shift operations simultaneously. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit elements in Rs1 are left-shifted logically. And the results are written to Rd. The shifted out bits are filled with zero and the shift amount is specified by the low-order 4-bits of the value in the Rs2 register.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="7197" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7197" bodyend="7202"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab06cdcffba110b801df98ee2208e4cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SLLI16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SLLI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SLLI16 (SIMD 16-bit Shift Left Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SLLI16<sp/>Rd,<sp/>Rs1,<sp/>imm4[3:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit element logical left shift operations simultaneously. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the imm4[3:0] constant. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4[3:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="7237" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7237" bodyend="7242"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab98c44f440802e210dd48403997977fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA16 (SIMD 16-bit Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRA16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRA16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="9846" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9846" bodyend="9851"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRA16_U</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRA16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA16.u (SIMD 16-bit Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRA16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRA16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="9900" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9900" bodyend="9905"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaffe133a900a4f69acef9ba2f6cafa2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRAI16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRAI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI16 (SIMD 16-bit Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI16<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRAI16.u<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRAI16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRAI16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="9954" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9954" bodyend="9959"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gacd5b381585f2c53c1c791b1ade509e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRAI16_U</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRAI16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI16.u (SIMD 16-bit Rounding Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI16<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRAI16.u<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRAI16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRAI16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="10008" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10008" bodyend="10013"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gad077385854832151e700839fb03cfcfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRL16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRL16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRL16 (SIMD 16-bit Shift Right Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRL16<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
<codeline><highlight class="normal"><sp/>SRL16.u<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding upoperations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRL16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRL16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="10270" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10270" bodyend="10275"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga9b9494b2d305f51510e789484cbfd60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRL16_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRL16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRL16.u (SIMD 16-bit Rounding Shift Right Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRL16<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
<codeline><highlight class="normal"><sp/>SRL16.u<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding upoperations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRL16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRL16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="10322" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10322" bodyend="10327"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gac7770810e1893581d9153635fc943107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRLI16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRLI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRLI16 (SIMD 16-bit Shift Right Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRLI16<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRLI16.u<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRLI16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRLI16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="10374" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10374" bodyend="10379"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga98ef01d7b5346045b83eaa411234d83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRLI16_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRLI16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRLI16.u (SIMD 16-bit Rounding Shift Right Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRLI16<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRLI16.u<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(`.u`<sp/>form)<sp/>{<sp/>//<sp/>SRLI16.u</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{<sp/>//<sp/>SRLI16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="10426" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10426" bodyend="10431"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SIMD 16-bit Shift Instructions. </para>    </briefdescription>
    <detaileddescription>
<para>there are 14 SIMD 16-bit shift instructions. </para>    </detaileddescription>
  </compounddef>
</doxygen>
