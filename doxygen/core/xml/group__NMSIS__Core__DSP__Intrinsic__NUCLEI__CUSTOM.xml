<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic_NUCLEI_CUSTOM</compoundname>
    <title>Nuclei Customized DSP Instructions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga036660946bc3f379a731983caffca53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKHM8</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKHM8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKHM8 (64-bit SIMD Signed Saturating Q7 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKHM8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>DKHM8</computeroutput> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7 content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.</para><para>The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen. The result will be saturated to 0x7F and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">op1t<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">op1b<sp/>=<sp/>Rs1.B[x];<sp/>op2b<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x80<sp/>!=<sp/>aop<sp/>|<sp/>0x80<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7F;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0,2,4,6</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13715" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13715" bodyend="13720"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gae39257eb12a014d3059394217135b9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKHM16</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKHM16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKHM16 (64-bit SIMD Signed Saturating Q15 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKHM16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to Q15 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>DKHM16</computeroutput> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in Rs2.</para><para>The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,<sp/>2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13770" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13770" bodyend="13775"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7279c1730c173384063a9bef9c986010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKABS8</definition>
        <argsstring>(unsigned long long a)</argsstring>
        <name>__RV_DKABS8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>DKABS8 (64-bit SIMD 8-bit Saturating Absolute) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKABS8<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of 8-bit signed integer elements simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of 8-bit signed integer elements stored in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates 0x7f as the output and sets the OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0x7f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[7]<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-src;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13815" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13815" bodyend="13820"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7d5691b06128c42939278415561c2dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKABS16</definition>
        <argsstring>(unsigned long long a)</argsstring>
        <name>__RV_DKABS16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>DKABS16 (64-bit SIMD 16-bit Saturating Absolute) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKABS16<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of 16-bit signed integer elements simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of 16-bit signed integer elements stored in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction generates 0x7fff as the output and sets the OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>0x8000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0x7fff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[15]<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-src;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13860" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13860" bodyend="13865"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga0f7b1184bde378bc5ae6e23f155ecb89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSLRA8</definition>
        <argsstring>(unsigned long long a, int b)</argsstring>
        <name>__RV_DKSLRA8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSLRA8 (64-bit SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSLRA8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q7 saturation for the left shift.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[3:0]. However, the behavior of <computeroutput>Rs2[3:0]==-2^3 (0x8)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[3:0]==-(2^3-1) (0x9)</computeroutput>. The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[3:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>8)?<sp/>7<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(7+sa):0]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x7f;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x80;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13918" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13918" bodyend="13923"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1b02a9f2e52abd456bfdadc1dac9e188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSLRA16</definition>
        <argsstring>(unsigned long long a, int b)</argsstring>
        <name>__RV_DKSLRA16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSLRA16 (64-bit SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSLRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q15 saturation for the left shift.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[4:0]. However, the behavior of <computeroutput>Rs2[4:0]==-2^4 (0x10)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[4:0]==-(2^4-1) (0x11)</computeroutput>. The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[4:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>16)?<sp/>15<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13977" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13977" bodyend="13982"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7f2598c19678a959960b6c6d3379e465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKADD8</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKADD8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKADD8 (64-bit SIMD 8-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 &lt;= Q7 &lt;= 2^7-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>+<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>127)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>127;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-128)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-128;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14024" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14024" bodyend="14029"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaeb50cbc43674d8dd32e7455b6c25b394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKADD16</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKADD16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKADD16 (64-bit SIMD 16-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>+<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>32767)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>32767;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-32768)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-32768;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14071" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14071" bodyend="14076"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga5dbe06f7b351ff1477851894d6d0c927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSUB8</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKSUB8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSUB8 (64-bit SIMD 8-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 &lt;= Q7 &lt;= 2^7-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>-<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^7)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14118" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14118" bodyend="14123"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaa5dfb634a380181e51e0636cb216fbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSUB16</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKSUB16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSUB16 (64-bit SIMD 16-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>-<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14166" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14166" bodyend="14171"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1bdbaa4714d2052c162a076e676f4ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD80</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD80</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD80 (Expand and Copy Byte 0 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD80<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[0][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[0][7:0],<sp/>Rs1.B[0][7:0],<sp/>Rs1.B[0][7:0],<sp/>Rs1.B[0][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14201" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14201" bodyend="14206"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gad690c697580b52820282c03d6a6567c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD81</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD81</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD81 (Expand and Copy Byte 1 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD81<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[1][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[1][7:0],<sp/>Rs1.B[1][7:0],<sp/>Rs1.B[1][7:0],<sp/>Rs1.B[1][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14236" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14236" bodyend="14241"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gafc4a523cfa64150d691bdc5d7d038810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD82</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD82</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD82 (Expand and Copy Byte 2 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD82<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[2][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[2][7:0],<sp/>Rs1.B[2][7:0],<sp/>Rs1.B[2][7:0],<sp/>Rs1.B[2][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14271" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14271" bodyend="14276"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga6d8dce49013b778d0290cd057cf45dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD83</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD83</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD83 (Expand and Copy Byte 3 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD83<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[3][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[3][7:0],<sp/>Rs1.B[3][7:0],<sp/>Rs1.B[3][7:0],<sp/>Rs1.B[3][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14306" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14306" bodyend="14311"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Nuclei Customized DSP Instructions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
