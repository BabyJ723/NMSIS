<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="core__feature__dsp_8h" kind="file">
    <compoundname>core_feature_dsp.h</compoundname>
    <includedby refid="nmsis__core_8h" local="yes">nmsis_core.h</includedby>
    <invincdepgraph>
      <node id="13">
        <label>core_feature_dsp.h</label>
        <link refid="core_feature_dsp.h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>nmsis_core.h</label>
        <link refid="nmsis__core_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="core__feature__dsp_8h_1aa505179349146cf6186640b4c8b47714" prot="public" static="no">
        <name>__PKHBT</name>
        <param><defname>ARG1</defname></param>
        <param><defname>ARG2</defname></param>
        <param><defname>ARG3</defname></param>
        <briefdescription>
<para>Halfword packing instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Combines bits[15:0] of val1 with bits[31:16] of val2 levitated with the val3. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14430" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core__feature__dsp_8h_1ac4be483b8d98e977a69baf4a292a76fe" prot="public" static="no">
        <name>__PKHTB</name>
        <param><defname>ARG1</defname></param>
        <param><defname>ARG2</defname></param>
        <param><defname>ARG3</defname></param>
        <briefdescription>
<para>Halfword packing instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Combines bits[31:16] of val1 with bits[15:0] of val2 right-shifted with the val3. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14433" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14433" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga502647bb2462e3bb724ba292a16e62ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ADD8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_ADD8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ADD8 (SIMD 8-bit Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit integer element additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit integer elements in Rs1 with the 8-bit integer elements in Rs2, and then writes the 8-bit element results to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>Rs1.B[x]<sp/>+<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="360" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="360" bodyend="365"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gacacca4e304ad42fc68a96c785f2a0b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ADD16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_ADD16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ADD16 (SIMD 16-bit Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer element additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit integer elements in Rs1 with the 16-bit integer elements in Rs2, and then writes the 16-bit element results to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>Rs1.H[x]<sp/>+<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="401" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="401" bodyend="406"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga886e1cf9d61d72c7b6028f2e58ad9f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_ADD64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_ADD64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ADD64 (64-bit Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: 64-bit Profile</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit signed or unsigned integers.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit integer of an even/odd pair of registers specified by Rs2(4,1), and then writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction has the same behavior as the ADD instruction in RV64I.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal"><sp/>t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>R[t_H].R[t_L]<sp/>=<sp/>R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"><sp/>Rd<sp/>=<sp/>Rs1<sp/>+<sp/>Rs2;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="454" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="454" bodyend="459"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga3a4b869f2df434f7e9f3f35e79715c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_AVE</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_AVE</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>AVE (Average with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">AVE<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Calculate the average of the contents of two general registers.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the average value of two signed integers stored in Rs1 and Rs2, rounds up a half-integer result to the nearest integer, and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Sum<sp/>=<sp/>CONCAT(Rs1[MSB],Rs1[MSB:0])<sp/>+<sp/>CONCAT(Rs2[MSB],Rs2[MSB:0])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Sum[(MSB+1):1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>MSB=31,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>MSB=63</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="493" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="493" bodyend="498"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_BITREV</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_BITREV</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>BITREV (Bit Reverse) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">BITREV<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Reverse the bit positions of the source operand within a specified width starting from bit 0. The reversed width is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
This instruction reverses the bit positions of the content of Rs1. The reversed bit width is calculated as Rs2[4:0]+1 (RV32) or Rs2[5:0]+1 (RV64). The upper bits beyond the reversed width are filled with zeros. After the bit reverse operation, the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">msb<sp/>=<sp/>Rs2[4:0];<sp/>(</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32)</highlight></codeline>
<codeline><highlight class="normal">msb<sp/>=<sp/>Rs2[5:0];<sp/>(</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64)</highlight></codeline>
<codeline><highlight class="normal">rev[0:msb]<sp/>=<sp/>Rs1[msb:0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>ZE(rev[msb:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="534" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="534" bodyend="539"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga08cd4064dbe07a8f27e148434f55b3b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_BITREVI</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_BITREVI</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>BITREVI (Bit Reverse Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">(RV32)<sp/>BITREVI<sp/>Rd,<sp/>Rs1,<sp/>imm[4:0]</highlight></codeline>
<codeline><highlight class="normal">(RV64)<sp/>BITREVI<sp/>Rd,<sp/>Rs1,<sp/>imm[5:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Reverse the bit positions of the source operand within a specified width starting from bit 0. The reversed width is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
This instruction reverses the bit positions of the content of Rs1. The reversed bit width is calculated as imm[4:0]+1 (RV32) or imm[5:0]+1 (RV64). The upper bits beyond the reversed width are filled with zeros. After the bit reverse operation, the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">msb<sp/>=<sp/>imm[4:0];<sp/>(RV32)</highlight></codeline>
<codeline><highlight class="normal">msb<sp/>=<sp/>imm[5:0];<sp/>(RV64)</highlight></codeline>
<codeline><highlight class="normal">rev[0:msb]<sp/>=<sp/>Rs1[msb:0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>ZE(rev[msb:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="576" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="576" bodyend="581"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0e9da2de29b3f47f38a315ca8f3e5f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_BPICK</definition>
        <argsstring>(unsigned long a, unsigned long b, unsigned long c)</argsstring>
        <name>__RV_BPICK</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>BPICK (Bit-wise Pick) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">BPICK<sp/>Rd,<sp/>Rs1,<sp/>Rs2,<sp/>Rc</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Select from two source operands based on a bit mask in the third operand.</para><para><bold>Description</bold>:<linebreak/>
This instruction selects individual bits from Rs1 or Rs2, based on the bit mask value in Rc. If a bit in Rc is 1, the corresponding bit is from Rs1; otherwise, the corresponding bit is from Rs2. The selection results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd[x]<sp/>=<sp/>Rc[x]?<sp/>Rs1[x]<sp/>:<sp/>Rs2[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=31...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64,<sp/>x=63...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="616" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="616" bodyend="621"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1ga0198a8fa03f62716f0b4d0cec311dfd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __RV_CLROV</definition>
        <argsstring>(void)</argsstring>
        <name>__RV_CLROV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>CLROV (Clear OV flag) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLROV<sp/>#<sp/>pseudo<sp/>mnemonic</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
This pseudo instruction is an alias to <computeroutput>CSRRCI x0, ucode, 1</computeroutput> instruction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="641" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="641" bodyend="644"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga439f0189dfb52d89887cd8905d4f5695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLRS8</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLRS8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLRS8 (SIMD 8-bit Count Leading Redundant Sign) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLRS8<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of redundant sign bits of the 8-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the bits next to the sign bits of the 8-bit elements of Rs1, this instruction counts the number of redundant sign bits and writes the result to the corresponding 8-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>6<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>snum[x](7))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="686" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="686" bodyend="691"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga368e2f49b0007ec1776f04ba5a850226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLRS16</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLRS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLRS16 (SIMD 16-bit Count Leading Redundant Sign) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLRS16<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of redundant sign bits of the 16-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the bits next to the sign bits of the 16-bit elements of Rs1, this instruction counts the number of redundant sign bits and writes the result to the corresponding 16- bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>14<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>snum[x](15))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="733" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="733" bodyend="738"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4f68c42f5bf770045469f5cc5b8dd80c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLRS32</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLRS32</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLRS32 (SIMD 32-bit Count Leading Redundant Sign) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLRS32<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of redundant sign bits of the 32-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the bits next to the sign bits of the 32-bit elements of Rs1, this instruction counts the number of redundant sign bits and writes the result to the corresponding 32- bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.W[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>30<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>snum[x](31))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="780" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="780" bodyend="785"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaf9e26b273480fb62dd48b315270fb3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLO8</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLO8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLO8 (SIMD 8-bit Count Leading One) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLO8<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of leading one bits of the 8-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the most significant bits of the 8-bit elements of Rs1, this instruction counts the number of leading one bits and writes the results to the corresponding 8-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>7<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="827" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="827" bodyend="832"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga00c822eb5d2a5b1ff5bc88790a43103c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLO16</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLO16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLO16 (SIMD 16-bit Count Leading One) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLO16<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of leading one bits of the 16-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the most significant bits of the 16-bit elements of Rs1, this instruction counts the number of leading one bits and writes the results to the corresponding 16-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>15<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="874" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="874" bodyend="879"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga9a3bb8538cb1c67d747dbcf77d50b1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLO32</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLO32</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLO32 (SIMD 32-bit Count Leading One) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLO32<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of leading one bits of the 32-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the most significant bits of the 32-bit elements of Rs1, this instruction counts the number of leading one bits and writes the results to the corresponding 32-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.W[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>31<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="921" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="921" bodyend="926"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gac034821a27f8ab322a689b24ce1257a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLZ8</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLZ8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLZ8 (SIMD 8-bit Count Leading Zero) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLZ8<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of leading zero bits of the 8-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the most significant bits of the 8-bit elements of Rs1, this instruction counts the number of leading zero bits and writes the results to the corresponding 8-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>7<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="968" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="968" bodyend="973"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga862e937fdf95c754472d41ab2df392f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLZ16</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLZ16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLZ16 (SIMD 16-bit Count Leading Zero) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLZ16<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of leading zero bits of the 16-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the most significant bits of the 16-bit elements of Rs1, this instruction counts the number of leading zero bits and writes the results to the corresponding 16-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>15<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0</highlight></codeline>
<codeline><highlight class="normal">for<sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1015" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1015" bodyend="1020"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga5250b89ea0959cf4f02534c5cd30b79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CLZ32</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_CLZ32</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>CLZ32 (SIMD 32-bit Count Leading Zero) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CLZ32<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Count the number of leading zero bits of the 32-bit elements of a general register.</para><para><bold>Description</bold>:<linebreak/>
Starting from the most significant bits of the 32-bit elements of Rs1, this instruction counts the number of leading zero bits and writes the results to the corresponding 32-bit elements of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">snum[x]<sp/>=<sp/>Rs1.W[x];</highlight></codeline>
<codeline><highlight class="normal">cnt[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>31<sp/>to<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(snum[x](i)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cnt[x]<sp/>=<sp/>cnt[x]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>cnt[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1062" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1062" bodyend="1067"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1gaf3b7bef50684b91cf3b8de6045ea9579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CMPEQ8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_CMPEQ8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>CMPEQ8 (SIMD 8-bit Integer Compare Equal) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CMPEQ8<sp/>Rs,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit integer elements equal comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit integer elements in Rs1 with the 8-bit integer elements in Rs2 to see if they are equal. If they are equal, the result is 0xFF; otherwise, the result is 0x0. The 8-bit element comparison results are written to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned numbers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>==<sp/>Rs2.B[x])?<sp/>0xff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1104" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1104" bodyend="1109"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga751703d59ea5e8737f21ba152f348293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CMPEQ16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_CMPEQ16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>CMPEQ16 (SIMD 16-bit Integer Compare Equal) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CMPEQ16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer elements equal comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit integer elements in Rs1 with the 16-bit integer elements in Rs2 to see if they are equal. If they are equal, the result is 0xFFFF; otherwise, the result is 0x0. The 16-bit element comparison results are written to Rt.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned numbers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>==<sp/>Rs2.H[x])?<sp/>0xffff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1146" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1146" bodyend="1151"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga96746dfb052a196b65217708b3d31bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CRAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_CRAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>CRAS16 (SIMD 16-bit Cross Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CRAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer element addition and 16-bit integer element subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs2, and writes the result to [31:16] of 32-bit chunks in Rd; at the same time, it subtracts the 16-bit integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit integer element in [15:0] of 32-bit chunks, and writes the result to [15:0] of 32- bit chunks in Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1192" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1192" bodyend="1197"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabbbc32ee11e188a042cd6f4bae5ae8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_CRSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_CRSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>CRSA16 (SIMD 16-bit Cross Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">CRSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer element subtraction and 16-bit integer element addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit integer element in [31:16] of 32-bit chunks in Rs1, and writes the result to [31:16] of 32-bit chunks in Rd; at the same time, it adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs2 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs1, and writes the result to [15:0] of 32-bit chunks in Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1238" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1238" bodyend="1243"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga766a420ef985764c0d0d8bcc2eb66e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_INSB</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_INSB</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>INSB (Insert Byte) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">(RV32)<sp/>INSB<sp/>Rd,<sp/>Rs1,<sp/>imm[1:0]</highlight></codeline>
<codeline><highlight class="normal">(RV64)<sp/>INSB<sp/>Rd,<sp/>Rs1,<sp/>imm[2:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Insert byte 0 of a 32-bit or 64-bit register into one of the byte elements of another register.</para><para><bold>Description</bold>:<linebreak/>
This instruction inserts byte 0 of Rs1 into byte <computeroutput>imm[1:0]</computeroutput> (RV32) or <computeroutput>imm[2:0]</computeroutput> (RV64) of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">bpos<sp/>=<sp/>imm[1:0];<sp/>(RV32)</highlight></codeline>
<codeline><highlight class="normal">bpos<sp/>=<sp/>imm[2:0];<sp/>(RV64)</highlight></codeline>
<codeline><highlight class="normal">Rd.B[bpos]<sp/>=<sp/>Rs1.B[0]</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1278" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1278" bodyend="1282"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga0316d69cb7b16fe8571d11d53af50918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KABS8</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_KABS8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>KABS8 (SIMD 8-bit Saturating Absolute) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KABS8<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of 8-bit signed integer elements simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of 8-bit signed integer elements stored in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates 0x7f as the output and sets the OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0x7f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[7]<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-src;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1322" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1322" bodyend="1327"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga2144ee330b7d084593a38bc98919399c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KABS16</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_KABS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>KABS16 (SIMD 16-bit Saturating Absolute) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KABS16<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of 16-bit signed integer elements simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of 16-bit signed integer elements stored in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction generates 0x7fff as the output and sets the OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>0x8000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0x7fff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[15]<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-src;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1367" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1367" bodyend="1372"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1bdcf3e62c9328169f9052c3e01a0fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KABSW</definition>
        <argsstring>(signed long a)</argsstring>
        <name>__RV_KABSW</name>
        <param>
          <type>signed long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>KABSW (Scalar 32-bit Absolute Value with Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KABSW<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of a signed 32-bit integer in a general register.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of a signed 32-bit integer stored in Rs1. The result is sign-extended (for RV64) and written to Rd. This instruction with the minimum negative integer input of 0x80000000 will produce a saturated output of maximum positive integer of 0x7fffffff and the OV flag will be set to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs1.W[0]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>Rs1.W[0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>If<sp/>(Rs1.W[0]<sp/>==<sp/>0x80000000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>-Rs1.W[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1414" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1414" bodyend="1419"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga64622c4cea6b25708edcf53511ac2846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KADD8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KADD8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADD8 (SIMD 8-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 &lt;= Q7 &lt;= 2^7-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>+<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>127)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>127;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-128)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-128;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1461" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1461" bodyend="1466"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae514ac0875046449b9d45cd277d85063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KADD16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KADD16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADD16 (SIMD 16-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>+<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>32767)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>32767;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-32768)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-32768;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1508" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1508" bodyend="1513"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gace8675089dafa59f5ba9114232ffe31d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_KADD64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_KADD64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADD64 (64-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit signed integers. The result is saturated to the Q63 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by Rs2(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed integer in Rs2. If the result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal"><sp/>t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>result<sp/>=<sp/>R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"><sp/>result<sp/>=<sp/>Rs1<sp/>+<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1574" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1574" bodyend="1579"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga3d272c3c6988c3c1c76ed6f5896c008e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KADDH</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KADDH</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADDH (Signed Addition with Q15 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADDH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add the signed lower 32-bit content of two registers with Q15 saturation.</para><para><bold>Description</bold>:<linebreak/>
The signed lower 32-bit content of Rs1 is added with the signed lower 32-bit content of Rs2. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then sign- extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>+<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>32767)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>32767;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-32768)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>-32768;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1621" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1621" bodyend="1626"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9faead3db3c1ffb6a8566719b1f46ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KADDW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KADDW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADDW (Signed Addition with Q31 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADDW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add the lower 32-bit signed content of two registers with Q31 saturation.</para><para><bold>Description</bold>:<linebreak/>
The lower 32-bit signed content of Rs1 is added with the lower 32-bit signed content of Rs2. And the result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1] and then sign- extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>+<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>res[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(res[31:0])<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1669" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1669" bodyend="1674"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabeee05c8c6965fc9955a62121324992c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KCRAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KCRAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KCRAS16 (SIMD 16-bit Signed Saturating Cross Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KCRAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating addition and 16-bit signed integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32- bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2; at the same time, it subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(res<sp/>in<sp/>[res1,<sp/>res2])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1726" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1726" bodyend="1731"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga506f2d59400875aba65112bc6563fb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KCRSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KCRSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KCRSA16 (SIMD 16-bit Signed Saturating Cross Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KCRSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element saturating addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd for addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(res<sp/>in<sp/>[res1,<sp/>res2])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1783" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1783" bodyend="1788"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga7e18b0f1cd5e9110bbb38a058eb01d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KDMBB</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KDMBB</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KDMBB (Signed Saturating Double Multiply B16 x B16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KDMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is written into the destination register for RV32 or sign-extended to 64-bits and written into the destination register for RV64. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KDMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>Mresult<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(resQ31);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>0x7FFFFFFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(resQ31);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1838" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1838" bodyend="1843"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga067179bedfe1e3e48bbd8df87bed48dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KDMBT</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KDMBT</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KDMBT (Signed Saturating Double Multiply B16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KDMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is written into the destination register for RV32 or sign-extended to 64-bits and written into the destination register for RV64. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KDMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>Mresult<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(resQ31);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>0x7FFFFFFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(resQ31);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1893" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1893" bodyend="1898"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gaeac5ef72f33c8014a3f045587046c5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KDMTT</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KDMTT</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KDMTT (Signed Saturating Double Multiply T16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KDMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then double and saturate the Q31 result. The result is written into the destination register for RV32 or sign-extended to 64-bits and written into the destination register for RV64. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then doubled and saturated into a Q31 value. The Q31 value is then written into Rd (sign-extended in RV64). When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFFFFFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KDMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>Mresult<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(resQ31);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>0x7FFFFFFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(resQ31);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1948" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1948" bodyend="1953"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1dfb3b7d81e19adc86e14e98971f3e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KDMABB</definition>
        <argsstring>(long t, unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KDMABB</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KDMABB (Signed Saturating Double Multiply Addition B16 x B16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KDMAxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result with the sign-extended lower 32-bit chunk destination register and write the saturated addition result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV flag is set to 1. The result after saturation is written to Rd. When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KDMABB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMABT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMATT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>Mresult<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>0x7FFFFFFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">resadd<sp/>=<sp/>Rd<sp/>+<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">resadd<sp/>=<sp/>Rd.W[0]<sp/>+<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resadd<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resadd<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resadd<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resadd<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>resadd;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(resadd);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2013" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2013" bodyend="2017"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga15d10fbf27043451ffe312f61a7356d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KDMABT</definition>
        <argsstring>(long t, unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KDMABT</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KDMABT (Signed Saturating Double Multiply Addition B16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KDMAxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result with the sign-extended lower 32-bit chunk destination register and write the saturated addition result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV flag is set to 1. The result after saturation is written to Rd. When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KDMABB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMABT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMATT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>Mresult<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>0x7FFFFFFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">resadd<sp/>=<sp/>Rd<sp/>+<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">resadd<sp/>=<sp/>Rd.W[0]<sp/>+<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resadd<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resadd<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resadd<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resadd<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>resadd;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(resadd);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2077" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2077" bodyend="2081"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga64a75e6b0aecedf02afd2df4458a6ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KDMATT</definition>
        <argsstring>(long t, unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KDMATT</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KDMATT (Signed Saturating Double Multiply Addition T16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KDMAxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 integer contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then double and saturate the Q31 result, add the result with the sign-extended lower 32-bit chunk destination register and write the saturated addition result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then doubled and saturated into a Q31 value. The Q31 value is then added with the content of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV flag is set to 1. The result after saturation is written to Rd. When both the two Q15 inputs are 0x8000, saturation will happen and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KDMABB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMABT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KDMATT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>Mresult<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resQ31<sp/>=<sp/>0x7FFFFFFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">resadd<sp/>=<sp/>Rd<sp/>+<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">resadd<sp/>=<sp/>Rd.W[0]<sp/>+<sp/>resQ31;<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resadd<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resadd<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resadd<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>resadd<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>resadd;<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(resadd);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2141" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2141" bodyend="2145"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga4e14ca16506e0e4190fe003aba01d90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KHM8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KHM8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHM8 (SIMD Signed Saturating Q7 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHM8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KHMX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KHM8</computeroutput> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7 content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2. For the <computeroutput>KHMX16</computeroutput> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7 content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2. The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen. The result will be saturated to 0x7F and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHM8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.B[x];<sp/>op2b<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHMX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x80<sp/>!=<sp/>aop<sp/>|<sp/>0x80<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7F;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0,2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=0,2,4,6</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2202" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2202" bodyend="2207"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga147c294001e28791aaf5d757add3ff29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KHMX8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KHMX8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMX8 (SIMD Signed Saturating Crossed Q7 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHM8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KHMX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KHM8</computeroutput> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7 content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2. For the <computeroutput>KHMX16</computeroutput> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7 content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2. The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen. The result will be saturated to 0x7F and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHM8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.B[x];<sp/>op2b<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHMX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x80<sp/>!=<sp/>aop<sp/>|<sp/>0x80<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7F;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0,2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=0,2,4,6</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2264" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2264" bodyend="2269"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga4d6124229f1e4e1bef085b9a1fad5414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KHM16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KHM16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHM16 (SIMD Signed Saturating Q15 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHM16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KHMX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to Q15 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KHM16</computeroutput> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in Rs2. For the <computeroutput>KHMX16</computeroutput> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHM16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHMX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=0,2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2327" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2327" bodyend="2332"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga99ca71b2ac7b14ff937d4ca9946be3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KHMX16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KHMX16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMX16 (SIMD Signed Saturating Crossed Q15 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHM16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KHMX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to Q15 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KHM16</computeroutput> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in Rs2. For the <computeroutput>KHMX16</computeroutput> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHM16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`KHMX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=0,2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2390" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2390" bodyend="2395"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga26af5537e6aca0133b66832596728a8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KHMBB</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KHMBB</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMBB (Signed Saturating Half Multiply B16 x B16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15 number again and saturate the Q15 result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right- shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KHMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult[31:0]<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>Mresult[30:15];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>Rv32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2443" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2443" bodyend="2448"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga96e244df43ec32a722a3562a0a59a6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KHMBT</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KHMBT</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMBT (Signed Saturating Half Multiply B16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15 number again and saturate the Q15 result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right- shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KHMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult[31:0]<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>Mresult[30:15];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>Rv32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2496" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2496" bodyend="2501"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga06a6deed6954a496ac381758e067e850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KHMTT</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KHMTT</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMTT (Signed Saturating Half Multiply T16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15 number again and saturate the Q15 result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right- shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KHMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult[31:0]<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>Mresult[30:15];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>Rv32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2549" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2549" bodyend="2554"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3a415f9cbeefb992bc791099e73c8794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMABB</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMABB</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMABB (SIMD Saturating Signed Multiply Bottom Halfs &amp; Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMABB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMABT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMATT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content of 32-bit elements in another register and add the result to the content of 32-bit elements in the third register. The addition result may be saturated and is written to the third register.<itemizedlist>
<listitem><para>KMABB: rd.W[x] + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMABT rd.W[x] + bottom*top (per 32-bit element)</para></listitem><listitem><para>KMATT rd.W[x] + top*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMABB</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMABT</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMATT</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to<orderedlist>
<listitem><para>The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para></listitem></orderedlist>
</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);<sp/></highlight><highlight class="comment">//<sp/>KMABB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);<sp/></highlight><highlight class="comment">//<sp/>KMABT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);<sp/></highlight><highlight class="comment">//<sp/>KMATT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2613" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2613" bodyend="2617"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3fe17f8a2e70a69f1751a1c0093c3158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMABT</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMABT</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMABT (SIMD Saturating Signed Multiply Bottom &amp; Top Halfs &amp; Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMABB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMABT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMATT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content of 32-bit elements in another register and add the result to the content of 32-bit elements in the third register. The addition result may be saturated and is written to the third register.<itemizedlist>
<listitem><para>KMABB: rd.W[x] + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMABT rd.W[x] + bottom*top (per 32-bit element)</para></listitem><listitem><para>KMATT rd.W[x] + top*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMABB</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMABT</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMATT</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to<orderedlist>
<listitem><para>The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para></listitem></orderedlist>
</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);<sp/></highlight><highlight class="comment">//<sp/>KMABB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);<sp/></highlight><highlight class="comment">//<sp/>KMABT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);<sp/></highlight><highlight class="comment">//<sp/>KMATT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2676" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2676" bodyend="2680"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gad6267dd09022516bcd77ce742b8b40ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMATT</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMATT</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMATT (SIMD Saturating Signed Multiply Top Halfs &amp; Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMABB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMABT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMATT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of 32-bit elements in a register with the 16-bit content of 32-bit elements in another register and add the result to the content of 32-bit elements in the third register. The addition result may be saturated and is written to the third register.<itemizedlist>
<listitem><para>KMABB: rd.W[x] + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMABT rd.W[x] + bottom*top (per 32-bit element)</para></listitem><listitem><para>KMATT rd.W[x] + top*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMABB</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMABT</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMATT</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. The multiplication result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to<orderedlist>
<listitem><para>The results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para></listitem></orderedlist>
</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);<sp/></highlight><highlight class="comment">//<sp/>KMABB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);<sp/></highlight><highlight class="comment">//<sp/>KMABT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);<sp/></highlight><highlight class="comment">//<sp/>KMATT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2739" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2739" bodyend="2743"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga84ab72987eeee69e2392965d8d8944f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMADA</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMADA</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMADA (SIMD Saturating Signed Multiply Two Halfs and Two Adds) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMADA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMAXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then adds the two 32-bit results and 32-bit elements in a third register together. The addition result may be saturated.<itemizedlist>
<listitem><para>KMADA: rd.W[x] + top*top + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMAXDA: rd.W[x] + top*bottom + bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the `KMADA instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMAXDA</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. The result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMADA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMAXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal">OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2803" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2803" bodyend="2807"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga1cab84ebee0378b9c1069e17efdbfd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMAXDA</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMAXDA</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMAXDA (SIMD Saturating Signed Crossed Multiply Two Halfs and Two Adds) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMADA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMAXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then adds the two 32-bit results and 32-bit elements in a third register together. The addition result may be saturated.<itemizedlist>
<listitem><para>KMADA: rd.W[x] + top*top + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMAXDA: rd.W[x] + top*bottom + bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the `KMADA instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMAXDA</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. The result is added to the content of 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMADA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMAXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal">OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2867" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2867" bodyend="2871"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6b9f5141c87a343051b03494705eeac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMADS</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMADS</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMADS (SIMD Saturating Signed Multiply Two Halfs &amp; Subtract &amp; Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMADS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMADRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMAXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then perform a subtraction operation between the two 32-bit results. Then add the subtraction result to the corresponding 32-bit elements in a third register. The addition result may be saturated.<itemizedlist>
<listitem><para>KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)</para></listitem><listitem><para>KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)</para></listitem><listitem><para>KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMADS</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMADRS</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32- bit elements in Rs2. For the <computeroutput>KMAXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2. The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMADS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMADRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMAXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2939" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2939" bodyend="2943"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga13576aa03f836be838f491fe7cc483d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMADRS</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMADRS</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMADRS (SIMD Saturating Signed Multiply Two Halfs &amp; Reverse Subtract &amp; Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMADS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMADRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMAXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then perform a subtraction operation between the two 32-bit results. Then add the subtraction result to the corresponding 32-bit elements in a third register. The addition result may be saturated.<itemizedlist>
<listitem><para>KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)</para></listitem><listitem><para>KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)</para></listitem><listitem><para>KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMADS</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMADRS</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32- bit elements in Rs2. For the <computeroutput>KMAXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2. The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMADS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMADRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMAXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3011" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3011" bodyend="3015"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga4649629156d0af6a2e64c30ae5bee381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMAXDS</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMAXDS</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMAXDS (SIMD Saturating Signed Crossed Multiply Two Halfs &amp; Subtract &amp; Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMADS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMADRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMAXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from 32-bit elements in two registers; and then perform a subtraction operation between the two 32-bit results. Then add the subtraction result to the corresponding 32-bit elements in a third register. The addition result may be saturated.<itemizedlist>
<listitem><para>KMADS: rd.W[x] + (top*top - bottom*bottom) (per 32-bit element)</para></listitem><listitem><para>KMADRS: rd.W[x] + (bottom*bottom - top*top) (per 32-bit element)</para></listitem><listitem><para>KMAXDS: rd.W[x] + (top*bottom - bottom*top) (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMADS</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2. For the <computeroutput>KMADRS</computeroutput> instruction, it multiplies the top 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32- bit elements in Rs2. For the <computeroutput>KMAXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of 32-bit elements in Rs1 with the top 16-bit content of 32-bit elements in Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of 32-bit elements in Rs1 with the bottom 16-bit content of 32-bit elements in Rs2. The subtraction result is then added to the content of the corresponding 32-bit elements in Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The 32-bit results after saturation are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMADS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMADRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMAXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3083" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3083" bodyend="3087"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga9033dac220a33b6a89c2fa0200534e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_KMAR64</definition>
        <argsstring>(long long t, long a, long b)</argsstring>
        <name>__RV_KMAR64</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMAR64 (Signed Multiply and Saturating Add to 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMAR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed elements in two registers and add the 64-bit multiplication results to the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is saturated to the Q63 range and written back to the pair of registers (RV32) or the register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It adds the 64-bit multiplication result to the 64-bit signed data of an even/odd pair of registers specified by Rd(4,1) with unlimited precision. If the 64-bit addition result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It adds the 64-bit multiplication results to the 64-bit signed data of Rd with unlimited precision. If the 64-bit addition result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[t_H].R[t_L]<sp/>+<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>`result`<sp/>has<sp/>unlimited<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rd<sp/>+<sp/>(Rs1.W[0]<sp/>*<sp/>Rs2.W[0])<sp/>+<sp/>(Rs1.W[1]<sp/>*<sp/>Rs2.W[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3151" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3151" bodyend="3155"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2de43c62af85225d40c1ac4210640925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMDA</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMDA</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMDA (SIMD Signed Multiply Two Halfs and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then adds the two 32-bit results together. The addition result may be saturated.<itemizedlist>
<listitem><para>KMDA: top*top + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMXDA: top*bottom + bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32- bit elements of Rs2. For the <computeroutput>KMXDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1. The final results are written to Rd. The 16-bit contents are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>Rs1.W[x]<sp/><sp/>!=<sp/><sp/>0x80008000)<sp/><sp/>or<sp/><sp/>(Rs2.W[x]<sp/><sp/>!=<sp/><sp/>0x80008000<sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>KMDA<sp/><sp/>Rd.W[x]<sp/><sp/>=<sp/><sp/>Rs1.W[x].H[1]<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rs2.W[x].H[1])<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0];<sp/></highlight><highlight class="comment">//<sp/>KMXDA<sp/>Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">+<sp/><sp/>(Rs1.W[x].H[0]<sp/><sp/>*<sp/><sp/>Rs2.W[x].H[1];<sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{<sp/><sp/>Rd.W[x]<sp/><sp/>=<sp/><sp/>0x7fffffff;<sp/><sp/>OV<sp/><sp/>=<sp/><sp/>1;<sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>RV32:<sp/><sp/>x=0<sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3201" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3201" bodyend="3206"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga37c752d6151fb29b43b01b2dd8af55d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMXDA</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMXDA</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMXDA (SIMD Signed Crossed Multiply Two Halfs and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then adds the two 32-bit results together. The addition result may be saturated.<itemizedlist>
<listitem><para>KMDA: top*top + bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMXDA: top*bottom + bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32- bit elements of Rs2. For the <computeroutput>KMXDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The addition result is checked for saturation. If saturation happens, the result is saturated to 2^31-1. The final results are written to Rd. The 16-bit contents are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>Rs1.W[x]<sp/><sp/>!=<sp/><sp/>0x80008000)<sp/><sp/>or<sp/><sp/>(Rs2.W[x]<sp/><sp/>!=<sp/><sp/>0x80008000<sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>KMDA<sp/><sp/>Rd.W[x]<sp/><sp/>=<sp/><sp/>Rs1.W[x].H[1]<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rs2.W[x].H[1])<sp/>+<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0];<sp/></highlight><highlight class="comment">//<sp/>KMXDA<sp/>Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">+<sp/><sp/>(Rs1.W[x].H[0]<sp/><sp/>*<sp/><sp/>Rs2.W[x].H[1];<sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{<sp/><sp/>Rd.W[x]<sp/><sp/>=<sp/><sp/>0x7fffffff;<sp/><sp/>OV<sp/><sp/>=<sp/><sp/>1;<sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>RV32:<sp/><sp/>x=0<sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3252" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3252" bodyend="3257"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gab418c1a557ddfedc1803594cb18fa293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAC</definition>
        <argsstring>(long t, long a, long b)</argsstring>
        <name>__RV_KMMAC</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAC (SIMD Saturating MSW Signed Multiply Word and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAC<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAC.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of two registers and add the most significant 32-bit results with the signed 32-bit integer elements of a third register. The addition results are saturated first and then written back to the third register. The <computeroutput>.u</computeroutput> form performs an additional rounding up operation on the multiplication results before adding the most significant 32-bit part of the results.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The <computeroutput>.u</computeroutput> form of the instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][63:31]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Mres[x][63:32];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3314" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3314" bodyend="3318"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga7d7e1eb9ab21e7f41722684804590f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAC_U</definition>
        <argsstring>(long t, long a, long b)</argsstring>
        <name>__RV_KMMAC_U</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAC.u (SIMD Saturating MSW Signed Multiply Word and Add with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAC<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAC.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of two registers and add the most significant 32-bit results with the signed 32-bit integer elements of a third register. The addition results are saturated first and then written back to the third register. The <computeroutput>.u</computeroutput> form performs an additional rounding up operation on the multiplication results before adding the most significant 32-bit part of the results.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results with the signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The <computeroutput>.u</computeroutput> form of the instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][63:31]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Mres[x][63:32];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3375" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3375" bodyend="3379"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga10e2d0cb6ee70c6e603ce425a74a9b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWB</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWB</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWB (SIMD Saturating MSW Signed Multiply Word and Bottom Half and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWB.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register and add the most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The addition result is written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3437" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3437" bodyend="3441"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga6385e945e25b69987eb34e8e9e862bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWB_U</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWB_U</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWB.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half and Add with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWB.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register and add the most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The addition result is written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3499" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3499" bodyend="3503"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga19bd50c2b77b1749c9c63c64c1f5bb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWB2</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWB2</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWB2 (SIMD Saturating MSW Signed Multiply Word and Bottom Half &amp; 2 and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWB2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWB2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and add the saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The saturated addition result is written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[0]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mres[x][47:14]<sp/>=<sp/>Mres[x][47:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>Mres[x][46:15];<sp/></highlight><highlight class="comment">//<sp/>doubling</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>addop.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3567" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3567" bodyend="3571"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gac281461b8f0907d2d0c1a922ca5e65b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWB2_U</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWB2_U</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWB2.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half &amp; 2 and Add with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWB2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWB2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and add the saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The saturated addition result is written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[0]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mres[x][47:14]<sp/>=<sp/>Mres[x][47:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>Mres[x][46:15];<sp/></highlight><highlight class="comment">//<sp/>doubling</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>addop.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3635" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3635" bodyend="3639"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga447a6dd6e573595ce930f8ba1ab135ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWT</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWT</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWT (SIMD Saturating MSW Signed Multiply Word and Top Half and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWT.u<sp/>Rd<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the signed top 16-bit of the corresponding 32-bit elements of another register and add the most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The addition results are written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed top 16-bit of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3697" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3697" bodyend="3701"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga480bf71de56eefe132ae06a9bdeaf203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWT_U</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWT_U</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWT.u (SIMD Saturating MSW Signed Multiply Word and Top Half and Add with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWT.u<sp/>Rd<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the signed top 16-bit of the corresponding 32-bit elements of another register and add the most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The addition results are written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed top 16-bit of the corresponding 32-bit elements of Rs2 and adds the most significant 32-bit multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3759" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3759" bodyend="3763"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga60e15a6243014fd5b76b7cffa7275eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWT2</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWT2</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWT2 (SIMD Saturating MSW Signed Multiply Word and Top Half &amp; 2 and Add) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWT2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWT2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit elements of one register and the top 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and add the saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The saturated addition result is written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[1]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mres[x][47:14]<sp/>=<sp/>Mres[x][47:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>Mres[x][46:15];<sp/></highlight><highlight class="comment">//<sp/>doubling</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>addop.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3827" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3827" bodyend="3831"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga30aa2050f5f50a26aedc28dfce398db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMAWT2_U</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMMAWT2_U</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMAWT2.u (SIMD Saturating MSW Signed Multiply Word and Top Half &amp; 2 and Add with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMAWT2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMAWT2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit elements of one register and the top 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and add the saturated most significant 32-bit results with the corresponding signed 32-bit elements of a third register. The saturated addition result is written to the corresponding 32-bit elements of the third register. The <computeroutput>.u</computeroutput> form rounds up the multiplication results from the most significant discarded bit before the addition operations.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and adds the saturated most significant 32-bit Q31 multiplication results with the corresponding signed 32-bit elements of Rd. If the addition result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the result before the addition operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[1]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Mres[x][47:14]<sp/>=<sp/>Mres[x][47:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>addop.W[x]<sp/>=<sp/>Mres[x][46:15];<sp/></highlight><highlight class="comment">//<sp/>doubling</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>addop.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3895" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3895" bodyend="3899"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga0e7c48c050ad2b2343ad2a8cf2e38ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMSB</definition>
        <argsstring>(long t, long a, long b)</argsstring>
        <name>__RV_KMMSB</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMSB (SIMD Saturating MSW Signed Multiply Word and Subtract) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMSB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMSB.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of two registers and subtract the most significant 32-bit results from the signed 32-bit elements of a third register. The subtraction results are written to the third register. The <computeroutput>.u</computeroutput> form performs an additional rounding up operation on the multiplication results before subtracting the most significant 32-bit part of the results.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2 and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The <computeroutput>.u</computeroutput> form of the instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][63:31]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>Mres[x][63:32];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="3955" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="3955" bodyend="3959"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gae1c27f8ba264508b78a0de566dd18a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMSB_U</definition>
        <argsstring>(long t, long a, long b)</argsstring>
        <name>__RV_KMMSB_U</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMSB.u (SIMD Saturating MSW Signed Multiply Word and Subtraction with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMSB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMSB.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of two registers and subtract the most significant 32-bit results from the signed 32-bit elements of a third register. The subtraction results are written to the third register. The <computeroutput>.u</computeroutput> form performs an additional rounding up operation on the multiplication results before subtracting the most significant 32-bit part of the results.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed 32-bit elements of Rs2 and subtracts the most significant 32-bit multiplication results from the signed 32-bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The <computeroutput>.u</computeroutput> form of the instruction additionally rounds up the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][63:31]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>Mres[x][63:32];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4015" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4015" bodyend="4019"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaaec865ab687a1764eb5b1e1f5603611d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMWB2</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_KMMWB2</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMWB2 (SIMD Saturating MSW Signed Multiply Word and Bottom Half &amp; 2) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMWB2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMWB2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and write the saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[0]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][46:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][46:15];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4070" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4070" bodyend="4075"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9f55b328152b5b5b840931b5415b2865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMWB2_U</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_KMMWB2_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMWB2.u (SIMD Saturating MSW Signed Multiply Word and Bottom Half &amp; 2 with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMWB2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMWB2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and write the saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed bottom 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[0]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][46:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][46:15];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4126" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4126" bodyend="4131"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaa83e41e92fe13e28b2509a0bf92224bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMWT2</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_KMMWT2</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMWT2 (SIMD Saturating MSW Signed Multiply Word and Top Half &amp; 2) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMWT2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMWT2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and write the saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[1]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][46:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][46:15];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4182" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4182" bodyend="4187"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga1d59336d9cabde5ac5a646abcc0b25c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMMWT2_U</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_KMMWT2_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMMWT2.u (SIMD Saturating MSW Signed Multiply Word and Top Half &amp; 2 with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMMWT2<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMMWT2.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the corresponding 32-bit elements of another register, double the multiplication results and write the saturated most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit Q31 elements of Rs1 with the signed top 16-bit Q15 content of the corresponding 32-bit elements of Rs2, doubles the Q46 results to Q47 numbers and writes the saturated most significant 32-bit Q31 multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit Q47 multiplication results by adding a 1 to bit 15 (i.e., bit 14 before doubling) of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Rs1.W[x]<sp/>==<sp/>0x80000000)<sp/>&amp;<sp/>(Rs2.W[x].H[1]<sp/>==<sp/>0x8000))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>s*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][46:14]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][46:15];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4238" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4238" bodyend="4243"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3922fe2b6d47974c6bd85cba3f826b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMSDA</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMSDA</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMSDA (SIMD Saturating Signed Multiply Two Halfs &amp; Add &amp; Subtract) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMSDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMSXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then subtracts the two 32-bit results from the corresponding 32-bit elements of a third register. The subtraction result may be saturated.<itemizedlist>
<listitem><para>KMSDA: rd.W[x] - top*top - bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMSXDA: rd.W[x] - top*bottom - bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMSDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>KMSXDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The two 32-bit multiplication results are then subtracted from the content of the corresponding 32- bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The 16-bit contents are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMSDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMSXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4301" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4301" bodyend="4305"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gaacebc28be147f66ab73162b37cc35ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KMSXDA</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KMSXDA</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMSXDA (SIMD Saturating Signed Crossed Multiply Two Halfs &amp; Add &amp; Subtract) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMSDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KMSXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then subtracts the two 32-bit results from the corresponding 32-bit elements of a third register. The subtraction result may be saturated.<itemizedlist>
<listitem><para>KMSDA: rd.W[x] - top*top - bottom*bottom (per 32-bit element)</para></listitem><listitem><para>KMSXDA: rd.W[x] - top*bottom - bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>KMSDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>KMSXDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The two 32-bit multiplication results are then subtracted from the content of the corresponding 32- bit elements of Rd. If the subtraction result is beyond the Q31 number range (-2^31 &lt;= Q31 &lt;= 2^31-1), it is saturated to the range and the OV bit is set to 1. The results after saturation are written to Rd. The 16-bit contents are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="comment">//<sp/>KMSDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>KMSXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4363" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4363" bodyend="4367"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac89788561e034d44bea403fd22047a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_KMSR64</definition>
        <argsstring>(long long t, long a, long b)</argsstring>
        <name>__RV_KMSR64</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KMSR64 (Signed Multiply and Saturating Subtract from 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KMSR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed elements in two registers and subtract the 64-bit multiplication results from the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is saturated to the Q63 range and written back to the pair of registers (RV32) or the register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It subtracts the 64-bit multiplication result from the 64-bit signed data of an even/odd pair of registers specified by Rd(4,1) with unlimited precision. If the 64-bit subtraction result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It subtracts the 64-bit multiplication results from the 64-bit signed data in Rd with unlimited precision. If the 64-bit subtraction result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[t_H].R[t_L]<sp/>-<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>`result`<sp/>has<sp/>unlimited<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rd<sp/>-<sp/>(Rs1.W[0]<sp/>*<sp/>Rs2.W[0])<sp/>-<sp/>(Rs1.W[1]<sp/>*<sp/>Rs2.W[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4431" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4431" bodyend="4435"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gab5dc82aa8b7514f882979a71d88fb154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSLLW</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_KSLLW</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLLW (Saturating Shift Left Logical for Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLLW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do logical left shift operation with saturation on a 32-bit word. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The first word data in Rs1 is left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the low-order 5-bits of the value in the Rs2 register. Any shifted value greater than 2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated to -2^31. And the saturated result is sign-extended and written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal">res[(31+sa):0]<sp/>=<sp/>Rs1.W[0]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(res<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>0x7fffffff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>0x80000000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>res[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(res[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4478" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4478" bodyend="4483"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gada4cef0c427d339f01f153c5d750dac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSLLIW</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_KSLLIW</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLLIW (Saturating Shift Left Logical Immediate for Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLLIW<sp/>Rd,<sp/>Rs1,<sp/>imm5u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do logical left shift operation with saturation on a 32-bit word. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The first word data in Rs1 is left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the imm5u constant. Any shifted value greater than 2^31-1 is saturated to 2^31-1. Any shifted value smaller than -2^31 is saturated to -2^31. And the saturated result is sign-extended and written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm5u;</highlight></codeline>
<codeline><highlight class="normal">res[(31+sa):0]<sp/>=<sp/>Rs1.W[0]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(res<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>0x7fffffff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>0x80000000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>res[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(res[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4525" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4525" bodyend="4530"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafed94424b7e8431a31632ac1f9097e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLL8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_KSLL8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLL8 (SIMD 8-bit Saturating Shift Left Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLL8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left shift operations with saturation simultaneously. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the low-order 3-bits of the value in the Rs2 register. Any shifted value greater than 2^7-1 is saturated to 2^7-1. Any shifted value smaller than -2^7 is saturated to -2^7. And the saturated results are written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(7+sa):0]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7f;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x80;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4578" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4578" bodyend="4583"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gaed969114325f5e25f89114b7a26cdfe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLLI8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_KSLLI8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLLI8 (SIMD 8-bit Saturating Shift Left Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLLI8<sp/>Rd,<sp/>Rs1,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left shift operations with saturation simultaneously. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the imm3u constant. Any shifted value greater than 2^7-1 is saturated to 2^7-1. Any shifted value smaller than -2^7 is saturated to -2^7. And the saturated results are written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm3u[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(7+sa):0]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7f;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x80;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4630" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4630" bodyend="4635"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae0d8b0f00c558d5a7f1119b9d261779f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLL16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_KSLL16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLL16 (SIMD 16-bit Saturating Shift Left Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the low-order 4-bits of the value in the Rs2 register. Any shifted value greater than 2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is saturated to -2^15. And the saturated results are written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4683" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4683" bodyend="4688"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga0c6a91d4acd34104ed5b47e48e910114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLLI16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_KSLLI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLLI16 (SIMD 16-bit Saturating Shift Left Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLLI16<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left shift operations with saturation simultaneously. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the imm4u constant. Any shifted value greater than 2^15-1 is saturated to 2^15-1. Any shifted value smaller than -2^15 is saturated to -2^15. And the saturated results are written to Rd. If any saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4735" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4735" bodyend="4740"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga748809588c9a563b78102b3a4e7ae0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLRA8</definition>
        <argsstring>(unsigned long a, int b)</argsstring>
        <name>__RV_KSLRA8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRA8 (SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRA8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KSLRA8.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q7 saturation for the left shift. The <computeroutput>.u</computeroutput> form performs additional rounding up operations for the right shift.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[3:0]. However, the behavior of <computeroutput>Rs2[3:0]==-2^3 (0x8)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[3:0]==-(2^3-1) (0x9)</computeroutput>. The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. For the <computeroutput>.u</computeroutput> form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[3:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>8)?<sp/>7<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:-1]<sp/>=<sp/>SE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(7+sa):0]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x7f;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x80;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4802" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4802" bodyend="4807"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga5e46b6bd44f57528f3dd1a4f509fdb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLRA8_U</definition>
        <argsstring>(unsigned long a, int b)</argsstring>
        <name>__RV_KSLRA8_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRA8.u (SIMD 8-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRA8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KSLRA8.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q7 saturation for the left shift. The <computeroutput>.u</computeroutput> form performs additional rounding up operations for the right shift.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[3:0]. However, the behavior of <computeroutput>Rs2[3:0]==-2^3 (0x8)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[3:0]==-(2^3-1) (0x9)</computeroutput>. The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. For the <computeroutput>.u</computeroutput> form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[3:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>8)?<sp/>7<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:-1]<sp/>=<sp/>SE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(7+sa):0]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x7f;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x80;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4869" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4869" bodyend="4874"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaa85a466f43c98b2a2b34dc19e9c8e9d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLRA16</definition>
        <argsstring>(unsigned long a, int b)</argsstring>
        <name>__RV_KSLRA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRA16 (SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KSLRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q15 saturation for the left shift. The <computeroutput>.u</computeroutput> form performs additional rounding up operations for the right shift.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[4:0]. However, the behavior of <computeroutput>Rs2[4:0]==-2^4 (0x10)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[4:0]==-(2^4-1) (0x11)</computeroutput>. The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <computeroutput>.u</computeroutput> form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[4:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>16)?<sp/>15<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="4936" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="4936" bodyend="4941"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae5b84af52b3d277117a4ee509df1504d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSLRA16_U</definition>
        <argsstring>(unsigned long a, int b)</argsstring>
        <name>__RV_KSLRA16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRA16.u (SIMD 16-bit Shift Left Logical with Saturation or Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KSLRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q15 saturation for the left shift. The <computeroutput>.u</computeroutput> form performs additional rounding up operations for the right shift.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[4:0]. However, the behavior of <computeroutput>Rs2[4:0]==-2^4 (0x10)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[4:0]==-(2^4-1) (0x11)</computeroutput>. The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. For the <computeroutput>.u</computeroutput> form of the instruction, the right-shifted results are added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[4:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>16)?<sp/>15<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5003" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5003" bodyend="5008"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga3a01ea385d7d505ab86f7db697567e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSLRAW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KSLRAW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRAW (Shift Left Logical with Q31 Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRAW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a logical left (positive) or arithmetic right (negative) shift operation with Q31 saturation for the left shift on a 32-bit data.</para><para><bold>Description</bold>:<linebreak/>
The lower 32-bit content of Rs1 is left-shifted logically or right-shifted arithmetically based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[5:0] clamped to the actual shift range of [0, 31]. The left-shifted result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. After the shift operation, the final result is bit-31 sign-extended and written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affected the operation of this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[5:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[5:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>32)?<sp/>31<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[31:0]<sp/>=<sp/>Rs1.W[0]<sp/>&gt;&gt;(arith)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[5:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>Rs1.W[0]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[31:0]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[31:0]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[31:0]<sp/>=<sp/>tmp[31:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>res[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5063" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5063" bodyend="5068"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9f23cd90864721f831fefd87acd4182e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSLRAW_U</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KSLRAW_U</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSLRAW.u (Shift Left Logical with Q31 Saturation or Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSLRAW.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a logical left (positive) or arithmetic right (negative) shift operation with Q31 saturation for the left shift and a rounding up operation for the right shift on a 32-bit data.</para><para><bold>Description</bold>:<linebreak/>
The lower 32-bit content of Rs1 is left-shifted logically or right-shifted arithmetically based on the value of Rs2[5:0]. Rs2[5:0] is in the signed range of [-25, 25-1]. A positive Rs2[5:0] means logical left shift and a negative Rs2[5:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[5:0] clamped to the actual shift range of [0, 31]. The left-shifted result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1]. The right-shifted result is added a 1 to the most significant discarded bit position for rounding effect. After the shift, saturation, or rounding, the final result is bit-31 sign-extended and written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:6] will not affect the operation of this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[5:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[5:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>32)?<sp/>31<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[31:-1]<sp/>=<sp/>SE33(Rs1[31:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rst[31:0]<sp/>=<sp/>res[31:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[5:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>Rs1.W[0]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rst[31:0]<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rst[31:0]<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rst[31:0]<sp/>=<sp/>tmp[31:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>rst[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(rst[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5126" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5126" bodyend="5131"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5623725bde47550878158bc9a52dd0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSTAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KSTAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSTAS16 (SIMD 16-bit Signed Saturating Straight Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSTAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating addition and 16-bit signed integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2; at the same time, it subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(res<sp/>in<sp/>[res1,<sp/>res2])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5183" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5183" bodyend="5188"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga8feffb9748de700f30a52c93302be55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSTSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KSTSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSTSA16 (SIMD 16-bit Signed Saturating Straight Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSTSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating subtraction and 16-bit signed integer element saturating addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it adds the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd for addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(res<sp/>in<sp/>[res1,<sp/>res2])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5240" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5240" bodyend="5245"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga872cc2823228c92d1004bd859af27147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSUB8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KSUB8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUB8 (SIMD 8-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 &lt;= Q7 &lt;= 27 -1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>-<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^7)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5287" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5287" bodyend="5292"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga062dbffd606488852b1e4aabcf6369b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_KSUB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_KSUB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUB16 (SIMD 16-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>-<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5335" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5335" bodyend="5340"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gad703720a47f05b3e322caffbcc45298a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_KSUB64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_KSUB64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUB64 (64-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed integer subtraction. The result is saturated to the Q63 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit signed integer of an even/odd pair of registers specified by Rs1(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer of Rs2 from the 64-bit signed integer of Rs1. If the 64-bit result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rs1<sp/>-<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5401" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5401" bodyend="5406"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gae30012cd8914b62f2fb84236b138f54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSUBH</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KSUBH</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUBH (Signed Subtraction with Q15 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUBH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract the signed lower 32-bit content of two registers with Q15 saturation.</para><para><bold>Description</bold>:<linebreak/>
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit content of Rs1. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>-<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(res[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5448" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5448" bodyend="5453"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga2a28907bd6cda3a2caa1e2200eafaec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSUBW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KSUBW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUBW (Signed Subtraction with Q31 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUBW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract the signed lower 32-bit content of two registers with Q31 saturation.</para><para><bold>Description</bold>:<linebreak/>
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit content of Rs1. And the result is saturated to the 32-bit signed integer range of [-2^31, 2^31-1] and then sign-extened and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>-<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^31)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>(2^31)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-2^31)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">res<sp/>=<sp/>-2^31;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>res[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(res[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5496" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5496" bodyend="5501"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga37ef876bfb8f2a063dd2d6554086efe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KWMMUL</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_KWMMUL</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KWMMUL (SIMD Saturating MSW Signed Multiply Word &amp; Double) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KWMMUL<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KWMMUL.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of two registers, shift the results left 1-bit, saturate, and write the most significant 32-bit results to a register. The <computeroutput>.u</computeroutput> form additionally rounds up the multiplication results from the most signification discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts the multiplication results one bit to the left and takes the most significant 32-bit results. If the shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <computeroutput>.u</computeroutput> form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit 30 before the shift and saturation operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0x80000000<sp/>!=<sp/>Rs1.W[x])<sp/>|<sp/>(0x80000000<sp/>!=<sp/>Rs2.W[x]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Round[x][33:0]<sp/>=<sp/>Mres[x][63:30]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][62:31];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5552" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5552" bodyend="5557"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga5fc98cdba6f2dda6fc65d4c3a836c20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KWMMUL_U</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_KWMMUL_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KWMMUL.u (SIMD Saturating MSW Signed Multiply Word &amp; Double with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KWMMUL<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">KWMMUL.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of two registers, shift the results left 1-bit, saturate, and write the most significant 32-bit results to a register. The <computeroutput>.u</computeroutput> form additionally rounds up the multiplication results from the most signification discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2. It then shifts the multiplication results one bit to the left and takes the most significant 32-bit results. If the shifted result is greater than 2^31-1, it is saturated to 2^31-1 and the OV flag is set to 1. The final element result is written to Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <computeroutput>.u</computeroutput> form of the instruction additionally rounds up the 64-bit multiplication results by adding a 1 to bit 30 before the shift and saturation operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0x80000000<sp/>!=<sp/>Rs1.W[x])<sp/>|<sp/>(0x80000000<sp/>!=<sp/>Rs2.W[x]))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Round[x][33:0]<sp/>=<sp/>Mres[x][63:30]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][62:31];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>0x7fffffff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5608" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5608" bodyend="5613"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga1e5062cc77c31e898d6a85e7768a7b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_MADDR32</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_MADDR32</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MADDR32 (Multiply and Add to 32-Bit Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MADDR32<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit contents of two registers and add the lower 32-bit multiplication result to the 32-bit content of a destination register. Write the final result back to the destination register.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2. It adds the lower 32-bit multiplication result to the lower 32-bit content of Rd and writes the final result (RV32) or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either signed or unsigned integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1<sp/>*<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1.W[0]<sp/>*<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal">tres[31:0]<sp/>=<sp/>Rd.W[0]<sp/>+<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(tres[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5654" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5654" bodyend="5658"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga636b734793493bbcf7a61dfa55749e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_MAXW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_MAXW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MAXW (32-bit Signed Word Maximum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MAXW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the larger value from the 32-bit contents of two general registers.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the larger value as the result, and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs1.W[0]<sp/>&gt;=<sp/>Rs2.W[0])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(Rs1.W[0]);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>SE(Rs2.W[0]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5693" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5693" bodyend="5698"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga60a38a5ee2cab1dd916cf4745c86a77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_MINW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_MINW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MINW (32-bit Signed Word Minimum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MINW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the smaller value from the 32-bit contents of two general registers.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares two signed 32-bit integers stored in Rs1 and Rs2, picks the smaller value as the result, and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs1.W[0]<sp/>&gt;=<sp/>Rs2.W[0])<sp/>{<sp/>Rd<sp/>=<sp/>SE(Rs2.W[0]);<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>Rd<sp/>=<sp/>SE(Rs1.W[0]);<sp/>}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5729" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5729" bodyend="5734"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga8260760ab7c146507ec4507862534332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_MSUBR32</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_MSUBR32</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MSUBR32 (Multiply and Subtract from 32-Bit Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MSUBR32<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit contents of two registers and subtract the lower 32-bit multiplication result from the 32-bit content of a destination register. Write the final result back to the destination register.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2, subtracts the lower 32-bit multiplication result from the lower 32-bit content of Rd, then writes the final result (RV32) or sign-extended result (RV64) back to Rd. The contents of Rs1 and Rs2 can be either signed or unsigned integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1<sp/>*<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>-<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Rs1.W[0]<sp/>*<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal">tres[31:0]<sp/>=<sp/>Rd.W[0]<sp/>-<sp/>Mresult.W[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(tres[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5776" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5776" bodyend="5780"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gab76bac5299a9c41ce034594a704a126b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_MULR64</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_MULR64</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MULR64 (Multiply Word Unsigned to 64-bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MULR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit unsigned integer contents of two registers and write the 64-bit result.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit content of Rs1 with that of Rs2 and writes the 64-bit multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result. The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with that of Rs2 and writes the 64-bit multiplication result to Rd. The lower 32-bit contents of Rs1 and Rs2 are treated as unsigned integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>CONCAT(1`b0,Rs1)<sp/>u*<sp/>CONCAT(1`b0,Rs2);</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).1(0)][31:0]<sp/>=<sp/>Mresult[63:32];</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).0(0)][31:0]<sp/>=<sp/>Mresult[31:0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Mresult[63:0];</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>CONCAT(1`b0,Rs1.W[0])<sp/>u*<sp/>CONCAT(1`b0,Rs2.W[0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5827" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5827" bodyend="5832"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga70bfdde5df211d5aa20cf406736d2ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_MULSR64</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_MULSR64</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>MULSR64 (Multiply Word Signed to 64-bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">MULSR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed integer contents of two registers and write the 64-bit result.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and writes the 64-bit multiplication result to an even/odd pair of registers containing Rd. Rd(4,1) index d determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result. The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the lower 32-bit content of Rs1 with the lower 32-bit content of Rs2 and writes the 64-bit multiplication result to Rd. The lower 32-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Ra<sp/>s*<sp/>Rb;</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).1(0)][31:0]<sp/>=<sp/>Mresult[63:32];</highlight></codeline>
<codeline><highlight class="normal">R[Rd(4,1).0(0)][31:0]<sp/>=<sp/>Mresult[31:0];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mresult<sp/>=<sp/>Ra.W[0]<sp/>s*<sp/>Rb.W[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Mresult[63:0];</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5879" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5879" bodyend="5884"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4d0a417bfde5846e13d2ae5a2da2dbb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_PBSAD</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_PBSAD</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>PBSAD (Parallel Byte Sum of Absolute Difference) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">PBSAD<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Calculate the sum of absolute difference of unsigned 8-bit data elements.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the un-signed 8-bit elements of Rs2 from those of Rs1. Then it adds the absolute value of each difference together and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">absdiff[x]<sp/>=<sp/>ABS(Rs1.B[x]<sp/>-<sp/>Rs2.B[x]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SUM(absdiff[x]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5918" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5918" bodyend="5923"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gab29c8817a341834901b676f1be7e6279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_PBSADA</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_PBSADA</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>PBSADA (Parallel Byte Sum of Absolute Difference Accum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">PBSADA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Calculate the sum of absolute difference of four unsigned 8-bit data elements and accumulate it into a register.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the un-signed 8-bit elements of Rs2 from those of Rs1. It then adds the absolute value of each difference together along with the content of Rd and writes the accumulated result back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">absdiff[x]<sp/>=<sp/>ABS(Rs1.B[x]<sp/>-<sp/>Rs2.B[x]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SUM(absdiff[x]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5960" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5960" bodyend="5964"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gabd698d8de29ab162d919a182b9c6779c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_PKBB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_PKBB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>PKBB16 (Pack Two 16-bit Data from Both Bottom Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">PKBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Pack 16-bit data from 32-bit chunks in two registers.<itemizedlist>
<listitem><para>PKBB16: bottom.bottom</para></listitem><listitem><para>PKBT16 bottom.top</para></listitem><listitem><para>PKTT16 top.top</para></listitem><listitem><para>PKTB16 top.bottom</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0]. (PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKTB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6010" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6010" bodyend="6015"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gaf10c9bb0704694903991a3a77e4134a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_PKBT16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_PKBT16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>PKBT16 (Pack Two 16-bit Data from Bottom and Top Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">PKBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Pack 16-bit data from 32-bit chunks in two registers.<itemizedlist>
<listitem><para>PKBB16: bottom.bottom</para></listitem><listitem><para>PKBT16 bottom.top</para></listitem><listitem><para>PKTT16 top.top</para></listitem><listitem><para>PKTB16 top.bottom</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0]. (PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKTB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6061" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6061" bodyend="6066"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1ga2d33235fc87cd78798e5824e3b84054d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_PKTT16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_PKTT16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>PKTT16 (Pack Two 16-bit Data from Both Top Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">PKBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Pack 16-bit data from 32-bit chunks in two registers.<itemizedlist>
<listitem><para>PKBB16: bottom.bottom</para></listitem><listitem><para>PKBT16 bottom.top</para></listitem><listitem><para>PKTT16 top.top</para></listitem><listitem><para>PKTB16 top.bottom</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0]. (PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKTB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6112" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6112" bodyend="6117"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gacb5418972db5061d6f993f3b4a3a131e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_PKTB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_PKTB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>PKTB16 (Pack Two 16-bit Data from Top and Bottom Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">PKBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">PKTB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Pack 16-bit data from 32-bit chunks in two registers.<itemizedlist>
<listitem><para>PKBB16: bottom.bottom</para></listitem><listitem><para>PKBT16 bottom.top</para></listitem><listitem><para>PKTT16 top.top</para></listitem><listitem><para>PKTB16 top.bottom</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
(PKBB16) moves Rs1.W[x][15:0] to Rd.W[x][31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0]. (PKBT16) moves Rs1.W[x] [15:0] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTT16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [31:16] to Rd.W[x] [15:0]. (PKTB16) moves Rs1.W[x] [31:16] to Rd.W[x] [31:16] and moves Rs2.W[x] [15:0] to Rd.W[x] [15:0].</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][15:0]);<sp/></highlight><highlight class="comment">//<sp/>PKTB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.W[x][31:16],<sp/>Rs2.W[x][31:16]);<sp/></highlight><highlight class="comment">//<sp/>PKTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6163" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6163" bodyend="6168"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga270f185315a2f3d5da8d14e9a89e716b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RADD8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RADD8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RADD8 (SIMD 8-bit Signed Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer element additions simultaneously. The element results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7F,<sp/>Rs2<sp/>=<sp/>0x7F,<sp/>Rd<sp/>=<sp/>0x7F</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80,<sp/>Rs2<sp/>=<sp/>0x80,<sp/>Rd<sp/>=<sp/>0x80</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x40,<sp/>Rs2<sp/>=<sp/>0x80,<sp/>Rd<sp/>=<sp/>0xE0</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>+<sp/>Rs2.B[x])<sp/>s&gt;&gt;<sp/>1;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6208" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6208" bodyend="6213"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga53762c95c79e336f330d308b64b4c40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RADD16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RADD16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RADD16 (SIMD 16-bit Signed Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element additions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2. The results are first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7FFF,<sp/>Rs2<sp/>=<sp/>0x7FFF,<sp/>Rd<sp/>=<sp/>0x7FFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x8000,<sp/>Rs2<sp/>=<sp/>0x8000,<sp/>Rd<sp/>=<sp/>0x8000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x4000,<sp/>Rs2<sp/>=<sp/>0x8000,<sp/>Rd<sp/>=<sp/>0xE000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>+<sp/>Rs2.H[x])<sp/>s&gt;&gt;<sp/>1;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6253" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6253" bodyend="6258"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga152f18d1ef922b3104cc763d00611511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_RADD64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_RADD64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RADD64 (64-bit Signed Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit signed integers. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by Rs2(4,1). The 64-bit addition result is first arithmetically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed integer in Rs2. The 64-bit addition result is first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>+<sp/>Rs2)<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6306" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6306" bodyend="6311"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga162b41b571bd84dcd8860437417544dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_RADDW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_RADDW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RADDW (32-bit Signed Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RADDW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add 32-bit signed integers and the results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the first 32-bit signed integer in Rs1 with the first 32-bit signed integer in Rs2. The result is first arithmetically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7FFFFFFF,<sp/>Rs2<sp/>=<sp/>0x7FFFFFFF,<sp/>Rd<sp/>=<sp/>0x7FFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80000000,<sp/>Rs2<sp/>=<sp/>0x80000000,<sp/>Rd<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x40000000,<sp/>Rs2<sp/>=<sp/>0x80000000,<sp/>Rd<sp/>=<sp/>0xE0000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6354" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6354" bodyend="6359"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga425c896839da2d7162fd68f53a50a9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RCRAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RCRAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RCRAS16 (SIMD 16-bit Signed Halving Cross Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RCRAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element addition and 16-bit signed integer element subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1. The element results are first arithmetically right-shifted by 1 bit and then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`RADD16`<sp/>and<sp/>`RSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][15:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][31:16])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6403" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6403" bodyend="6408"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga98d239e879270c5e4c8dd575e9cb6529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RCRSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RCRSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RCRSA16 (SIMD 16-bit Signed Halving Cross Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RCRSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit signed element integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2. The two results are first arithmetically right-shifted by 1 bit and then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`RADD16`<sp/>and<sp/>`RSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][15:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][31:16])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6452" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6452" bodyend="6457"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1gaff8e2c883c492aff917d183ae7097535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RDOV</definition>
        <argsstring>(void)</argsstring>
        <name>__RV_RDOV</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>RDOV (Read OV flag) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RDOV<sp/>Rd<sp/><sp/>#<sp/>pseudo<sp/>mnemonic</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
This pseudo instruction is an alias to <computeroutput>CSRR Rd, ucode</computeroutput> instruction which maps to the real instruction of <computeroutput>CSRRS Rd, ucode, x0</computeroutput>.</para><para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6479" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6479" bodyend="6484"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaec8b94f14dfbcab9f1230e3d43047de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RSTAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RSTAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSTAS16 (SIMD 16-bit Signed Halving Straight Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSTAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element addition and 16-bit signed integer element subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2, and subtracts the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs1. The element results are first arithmetically right-shifted by 1 bit and then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`RADD16`<sp/>and<sp/>`RSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][31:16])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][15:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6528" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6528" bodyend="6533"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaf9b70a84f1b52fd578ffe432f7bb0492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RSTSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RSTSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSTSA16 (SIMD 16-bit Signed Halving Straight Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSTSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element subtraction and 16-bit signed integer element addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit signed integer element in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit signed element integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit signed integer element in [15:0] of 32-bit chunks in Rs2. The two results are first arithmetically right-shifted by 1 bit and then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`RADD16`<sp/>and<sp/>`RSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][31:16])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][15:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6577" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6577" bodyend="6582"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae3a2b016b3af39c178ef275c7e939bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RSUB8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RSUB8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSUB8 (SIMD 8-bit Signed Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer element subtractions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7F,<sp/>Rs2<sp/>=<sp/>0x80,<sp/>Rd<sp/>=<sp/>0x7F</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80,<sp/>Rs2<sp/>=<sp/>0x7F,<sp/>Rd<sp/>=<sp/>0x80</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1=<sp/>0x80,<sp/>Rs2<sp/>=<sp/>0x40,<sp/>Rd<sp/>=<sp/>0xA0</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>-<sp/>Rs2.B[x])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6624" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6624" bodyend="6629"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabb7544dfa512a408384621aee3956fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_RSUB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_RSUB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSUB16 (SIMD 16-bit Signed Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element subtractions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit signed integer elements in Rs1. The results are first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFF,<sp/>Rb<sp/>=<sp/>0x8000,<sp/>Rt<sp/>=<sp/>0x7FFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x8000,<sp/>Rb<sp/>=<sp/>0x7FFF,<sp/>Rt<sp/>=<sp/>0x8000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x8000,<sp/>Rb<sp/>=<sp/>0x4000,<sp/>Rt<sp/>=<sp/>0xA000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>-<sp/>Rs2.H[x])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6671" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6671" bodyend="6676"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gafc5f4bf4b712ae2559a30356fc9773a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_RSUB64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_RSUB64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSUB64 (64-bit Signed Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed integer subtraction. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer of an even/odd pair of registers specified by Rb(4,1) from the 64-bit signed integer of an even/odd pair of registers specified by Ra(4,1). The subtraction result is first arithmetically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rt(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer in Rs2 from the 64-bit signed integer in Rs1. The 64-bit subtraction result is first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>-<sp/>Rs2)<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6725" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6725" bodyend="6730"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad19388580ce1a2cc1afee60f9d73e60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_RSUBW</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_RSUBW</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSUBW (32-bit Signed Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSUBW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract 32-bit signed integers and the result is halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit signed integer in Rs1. The result is first arithmetically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x7FFFFFFF,<sp/>Rs2<sp/>=<sp/>0x80000000,<sp/>Rd<sp/>=<sp/>0x7FFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80000000,<sp/>Rs2<sp/>=<sp/>0x7FFFFFFF,<sp/>Rd<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Rs1<sp/>=<sp/>0x80000000,<sp/>Rs2<sp/>=<sp/>0x40000000,<sp/>Rd<sp/>=<sp/>0xA0000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6773" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6773" bodyend="6778"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaa595d7e87e2f435c0ceb0e9d8c20ee97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SCLIP8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SCLIP8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCLIP8 (SIMD 8-bit Signed Clip Value) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCLIP8<sp/>Rd,<sp/>Rs1,<sp/>imm3u[2:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Limit the 8-bit signed integer elements of a register into a signed range simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction limits the 8-bit signed integer elements stored in Rs1 into a signed integer range between 2^imm3u-1 and -2^imm3u, and writes the limited results to Rd. For example, if imm3u is 3, the 8-bit input values should be saturated between 7 and -8. If saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&gt;<sp/>(2^imm3u)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>(2^imm3u)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&lt;<sp/>-2^imm3u)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-2^imm3u;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>src</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6821" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6821" bodyend="6826"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga4025d5f632fcaa18a002c764daa577bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SCLIP16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SCLIP16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCLIP16 (SIMD 16-bit Signed Clip Value) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCLIP16<sp/>Rd,<sp/>Rs1,<sp/>imm4u[3:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Limit the 16-bit signed integer elements of a register into a signed range simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction limits the 16-bit signed integer elements stored in Rs1 into a signed integer range between 2imm4u-1 and -2imm4u, and writes the limited results to Rd. For example, if imm4u is 3, the 16-bit input values should be saturated between 7 and -8. If saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&gt;<sp/>(2^imm4u)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>(2^imm4u)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&lt;<sp/>-2^imm4u)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-2^imm4u;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>src</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6869" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6869" bodyend="6874"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga13e5f03af091994e769d38e5f5f3d7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SCLIP32</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_SCLIP32</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCLIP32 (SIMD 32-bit Signed Clip Value) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCLIP32<sp/>Rd,<sp/>Rs1,<sp/>imm5u[4:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Limit the 32-bit signed integer elements of a register into a signed range simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction limits the 32-bit signed integer elements stored in Rs1 into a signed integer range between 2imm5u-1 and -2imm5u, and writes the limited results to Rd. For example, if imm5u is 3, the 32-bit input values should be saturated between 7 and -8. If saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&gt;<sp/>(2^imm5u)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>(2^imm5u)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&lt;<sp/>-2^imm5u)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-2^imm5u;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>src</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6917" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6917" bodyend="6922"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga0b086037e48ff8891523b74b07154810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SCMPLE8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SCMPLE8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCMPLE8 (SIMD 8-bit Signed Compare Less Than &amp; Equal) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCMPLE8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer elements less than &amp; equal comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is true, the result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>{le}<sp/>Rs2.B[x])?<sp/>0xff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6957" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6957" bodyend="6962"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1gad86adb4c738c71d2b9c07e44fb02113c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SCMPLE16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SCMPLE16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCMPLE16 (SIMD 16-bit Signed Compare Less Than &amp; Equal) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCMPLE16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements less than &amp; equal comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>{le}<sp/>Rs2.H[x])?<sp/>0xffff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="6997" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6997" bodyend="7002"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7a01ed10478504e9703dafdccc415ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SCMPLT8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SCMPLT8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCMPLT8 (SIMD 8-bit Signed Compare Less Than) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCMPLT8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer elements less than comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&lt;<sp/>Rs2.B[x])?<sp/>0xff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7036" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7036" bodyend="7041"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga18887b352c5dbe9535424bee83bf7d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SCMPLT16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SCMPLT16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SCMPLT16 (SIMD 16-bit Signed Compare Less Than) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SCMPLT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements less than comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit signed integer elements in Rs1 with the two 16- bit signed integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&lt;<sp/>Rs2.H[x])?<sp/>0xffff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7075" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7075" bodyend="7080"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga99febdacba921c09aff588332a658fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SLL8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SLL8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SLL8 (SIMD 8-bit Shift Left Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SLL8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left shift operations simultaneously. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit elements in Rs1 are left-shifted logically. And the results are written to Rd. The shifted out bits are filled with zero and the shift amount is specified by the low-order 3-bits of the value in the Rs2 register.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7116" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7116" bodyend="7121"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac075fd65d3fa097d22a0a576c1fe65bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SLLI8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SLLI8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SLLI8 (SIMD 8-bit Shift Left Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SLLI8<sp/>Rd,<sp/>Rs1,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left shift operations simultaneously. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit elements in Rs1 are left-shifted logically. And the results are written to Rd. The shifted out bits are filled with zero and the shift amount is specified by the imm3u constant.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm3u[2:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7156" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7156" bodyend="7161"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga567ef612a72bcfbdc3a12a55bafb3b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SLL16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SLL16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SLL16 (SIMD 16-bit Shift Left Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SLL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left shift operations simultaneously. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit elements in Rs1 are left-shifted logically. And the results are written to Rd. The shifted out bits are filled with zero and the shift amount is specified by the low-order 4-bits of the value in the Rs2 register.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7197" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7197" bodyend="7202"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab06cdcffba110b801df98ee2208e4cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SLLI16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SLLI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SLLI16 (SIMD 16-bit Shift Left Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SLLI16<sp/>Rd,<sp/>Rs1,<sp/>imm4[3:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit element logical left shift operations simultaneously. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit elements in Rs1 are left-shifted logically. The shifted out bits are filled with zero and the shift amount is specified by the imm4[3:0] constant. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4[3:0];</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7237" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7237" bodyend="7242"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga4161cf3c9857cbef8d23b6a8e09b49d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMAL</definition>
        <argsstring>(long long a, unsigned long b)</argsstring>
        <name>__RV_SMAL</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMAL (Signed Multiply Halfs &amp; Add 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: Partial-SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMAL<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed bottom 16-bit content of the 32-bit elements of a register with the top 16-bit content of the same 32-bit elements of the same register, and add the results with a 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to another even/odd pair of registers (RV32) or a register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the bottom 16-bit content of the lower 32-bit of Rs2 with the top 16-bit content of the lower 32-bit of Rs2 and adds the result with the 64-bit value of an even/odd pair of registers specified by Rs1(4,1). The 64-bit addition result is written back to an even/odd pair of registers specified by Rd(4,1). The 16-bit values of Rs2, and the 64-bit value of the Rs1(4,1) register- pair are treated as signed integers. Rx(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the bottom 16-bit content of the 32-bit elements of Rs2 with the top 16-bit content of the same 32-bit elements of Rs2 and adds the results with the 64-bit value of Rs1. The 64- bit addition result is written back to Rd. The 16-bit values of Rs2, and the 64-bit value of Rs1 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs2.H[1]<sp/>*<sp/>Rs2.H[0];</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);<sp/>+</highlight></codeline>
<codeline><highlight class="normal">Idx2<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx3<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx3].R[Idx2]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs2.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs2.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rs1<sp/>+<sp/>SE64(Mres[1][31:0])<sp/>+<sp/>SE64(Mres[0][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7297" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7297" bodyend="7302"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaceb791bc1a33f08f2abc7c5ec16c1a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALBB</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALBB</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALBB (Signed Multiply Bottom Halfs &amp; Add 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALBB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALBT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALTT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit content of the corresponding 32-bit elements of another register and add the results with a 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to the register-pair (RV32) or the register (RV64).<itemizedlist>
<listitem><para>SMALBB: rt pair + bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMALBT rt pair + bottom*top (all 32-bit elements)</para></listitem><listitem><para>SMALTT rt pair + top*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALBB</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2. For the <computeroutput>SMALBT</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMALTT</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2. The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALBB</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALBT</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALTT</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[0]<sp/>*<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>SMALBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[0]<sp/>*<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>SMALBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[1]<sp/>*<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>SMALTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres[0][31:0])<sp/>+<sp/>SE64(Mres[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7380" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7380" bodyend="7384"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga74fe212140384150726143f2f43c900f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALBT</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALBT</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALBT (Signed Multiply Bottom Half &amp; Top Half &amp; Add 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALBB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALBT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALTT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit content of the corresponding 32-bit elements of another register and add the results with a 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to the register-pair (RV32) or the register (RV64).<itemizedlist>
<listitem><para>SMALBB: rt pair + bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMALBT rt pair + bottom*top (all 32-bit elements)</para></listitem><listitem><para>SMALTT rt pair + top*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALBB</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2. For the <computeroutput>SMALBT</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMALTT</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2. The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALBB</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALBT</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALTT</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[0]<sp/>*<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>SMALBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[0]<sp/>*<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>SMALBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[1]<sp/>*<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>SMALTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres[0][31:0])<sp/>+<sp/>SE64(Mres[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7462" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7462" bodyend="7466"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga39331e38421eb5f882a615941cf00444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALTT</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALTT</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALTT (Signed Multiply Top Halfs &amp; Add 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALBB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALBT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALTT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of the 32-bit elements of a register with the 16-bit content of the corresponding 32-bit elements of another register and add the results with a 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to the register-pair (RV32) or the register (RV64).<itemizedlist>
<listitem><para>SMALBB: rt pair + bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMALBT rt pair + bottom*top (all 32-bit elements)</para></listitem><listitem><para>SMALTT rt pair + top*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALBB</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2. For the <computeroutput>SMALBT</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMALTT</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2. The multiplication result is added with the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALBB</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALBT</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALTT</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The multiplication results are added with the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[0]<sp/>*<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>SMALBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[0]<sp/>*<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>SMALBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>Rs1.H[1]<sp/>*<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>SMALTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1];</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres[0][31:0])<sp/>+<sp/>SE64(Mres[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7544" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7544" bodyend="7548"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga8320e2679cb96ee46fcaf761925b8708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALDA</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALDA</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALDA (Signed Multiply Two Halfs and Two Adds 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then adds the two 32-bit results and the 64-bit value of an even/odd pair of registers together.<itemizedlist>
<listitem><para>SMALDA: rt pair+ top*top + bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMALXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALDA</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with the top 16-bit content of Rs2 with unlimited precision. For the <computeroutput>SMALXDA</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2 with unlimited precision. The result is added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64- bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64- bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32- bit elements of Rs2 with unlimited precision. For the <computeroutput>SMALXDA</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 with unlimited precision. The results are added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres0[31:0])<sp/>+<sp/>SE64(Mres1[31:0]);</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres0[0][31:0])<sp/>+<sp/>SE64(Mres1[0][31:0])<sp/>+<sp/>SE64(Mres0[1][31:0])<sp/>+</highlight></codeline>
<codeline><highlight class="normal">SE64(Mres1[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7628" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7628" bodyend="7632"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga18e89f90f0b3e3d8c34ceb33b671a61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALXDA</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALXDA</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALXDA (Signed Crossed Multiply Two Halfs and Two Adds 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then adds the two 32-bit results and the 64-bit value of an even/odd pair of registers together.<itemizedlist>
<listitem><para>SMALDA: rt pair+ top*top + bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMALXDA: rt pair+ top*bottom + bottom*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALDA</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then adds the result to the result of multiplying the top 16-bit content of Rs1 with the top 16-bit content of Rs2 with unlimited precision. For the <computeroutput>SMALXDA</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2 with unlimited precision. The result is added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64- bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64- bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32- bit elements of Rs2 with unlimited precision. For the <computeroutput>SMALXDA</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then adds the result to the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 with unlimited precision. The results are added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres0[31:0])<sp/>+<sp/>SE64(Mres1[31:0]);</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres0[0][31:0])<sp/>+<sp/>SE64(Mres1[0][31:0])<sp/>+<sp/>SE64(Mres0[1][31:0])<sp/>+</highlight></codeline>
<codeline><highlight class="normal">SE64(Mres1[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7712" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7712" bodyend="7716"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga68b7e1927e142a46a1e3132a7e04b777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALDS</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALDS</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALDS (Signed Multiply Two Halfs &amp; Subtract &amp; Add 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALDRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation between the two 32-bit results. Then add the subtraction result to the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to the register-pair.<itemizedlist>
<listitem><para>SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)</para></listitem><listitem><para>SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)</para></listitem><listitem><para>SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALDS</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMALDRS</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2. For the <computeroutput>SMALXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2. The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALDRS</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1])<sp/>-<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);<sp/></highlight><highlight class="comment">//<sp/>SMALDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0])<sp/>-<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);<sp/></highlight><highlight class="comment">//<sp/>SMALDRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0])<sp/>-<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);<sp/></highlight><highlight class="comment">//<sp/>SMALXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1])<sp/>-<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[0].H[1])<sp/>-<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres[0][31:0])<sp/>+<sp/>SE64(Mres[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7803" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7803" bodyend="7807"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga9e334955371767a38c1e7069a42025c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALDRS</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALDRS</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALDRS (Signed Multiply Two Halfs &amp; Reverse Subtract &amp; Add 64- bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALDRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation between the two 32-bit results. Then add the subtraction result to the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to the register-pair.<itemizedlist>
<listitem><para>SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)</para></listitem><listitem><para>SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)</para></listitem><listitem><para>SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALDS</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMALDRS</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2. For the <computeroutput>SMALXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2. The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALDRS</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1])<sp/>-<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);<sp/></highlight><highlight class="comment">//<sp/>SMALDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0])<sp/>-<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);<sp/></highlight><highlight class="comment">//<sp/>SMALDRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0])<sp/>-<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);<sp/></highlight><highlight class="comment">//<sp/>SMALXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1])<sp/>-<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[0].H[1])<sp/>-<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres[0][31:0])<sp/>+<sp/>SE64(Mres[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7894" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7894" bodyend="7898"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaf31ec8bdff7f1f55254aaeb13979c70c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMALXDS</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMALXDS</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMALXDS (Signed Crossed Multiply Two Halfs &amp; Subtract &amp; Add 64- bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMALDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALDRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMALXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation between the two 32-bit results. Then add the subtraction result to the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The addition result is written back to the register-pair.<itemizedlist>
<listitem><para>SMALDS: rt pair + (top*top - bottom*bottom) (all 32-bit elements)</para></listitem><listitem><para>SMALDRS: rt pair + (bottom*bottom - top*top) (all 32-bit elements)</para></listitem><listitem><para>SMALXDS: rt pair + (top*bottom - bottom*top) (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMALDS</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMALDRS</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of Rs1 with the bottom 16-bit content of Rs2. For the <computeroutput>SMALXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2. The subtraction result is then added to the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit addition result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMALDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALDRS</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMALXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The subtraction results are then added to the 64-bit value of Rd. The 64-bit addition result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1])<sp/>-<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);<sp/></highlight><highlight class="comment">//<sp/>SMALDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0])<sp/>-<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);<sp/></highlight><highlight class="comment">//<sp/>SMALDRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0])<sp/>-<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);<sp/></highlight><highlight class="comment">//<sp/>SMALXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>+<sp/>SE64(Mres[31:0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1])<sp/>-<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[0].H[1])<sp/>-<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALDRS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMALXDS</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[0].H[0])<sp/>-<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>SE64(Mres[0][31:0])<sp/>+<sp/>SE64(Mres[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="7985" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="7985" bodyend="7989"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga89c1afcd9898226795ae2112d2fbea40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMAR64</definition>
        <argsstring>(long long t, long a, long b)</argsstring>
        <name>__RV_SMAR64</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMAR64 (Signed Multiply and Add to 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMAR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed elements in two registers and add the 64-bit multiplication result to the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is written back to the pair of registers (RV32) or a register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It adds the 64-bit multiplication result to the 64-bit signed data of an even/odd pair of registers specified by Rd(4,1). The addition result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It adds the 64-bit multiplication results to the 64-bit signed data of Rd. The addition result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>R[t_H].R[t_L]<sp/>+<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>(Rs1.W[0]<sp/>*<sp/>Rs2.W[0])<sp/>+<sp/>(Rs1.W[1]<sp/>*<sp/>Rs2.W[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8037" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8037" bodyend="8041"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga08927c1a80a7e90b4bf485ece9ff01f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMAQA</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMAQA</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMAQA (Signed Multiply Four Bytes with 32-bit Adds) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: Partial-SIMD (Reduction)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMAQA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do four signed 8-bit multiplications from 32-bit chunks of two registers; and then adds the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four signed 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the signed content of the corresponding 32-bit chunks of Rd. The final results are written back to the corresponding 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>(Rs1.W[x].B[3]<sp/>s*<sp/>Rs2.W[x].B[3])<sp/>+<sp/>(Rs1.W[x].B[2]<sp/>s*<sp/>Rs2.W[x].B[2])<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>(Rs1.W[x].B[1]<sp/>s*<sp/>Rs2.W[x].B[1])<sp/>+<sp/>(Rs1.W[x].B[0]<sp/>s*<sp/>Rs2.W[x].B[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1,0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8081" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8081" bodyend="8085"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga7354acb478473376227c883968d8b78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMAQA_SU</definition>
        <argsstring>(long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMAQA_SU</name>
        <param>
          <type>long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMAQA.SU (Signed and Unsigned Multiply Four Bytes with 32-bit Adds) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: Partial-SIMD (Reduction)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMAQA.SU<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do four <computeroutput>signed x unsigned</computeroutput> 8-bit multiplications from 32-bit chunks of two registers; and then adds the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the four signed 8-bit elements of 32-bit chunks of Rs1 with the four unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the signed content of the corresponding 32-bit chunks of Rd. The final results are written back to the corresponding 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>(Rs1.W[x].B[3]<sp/>su*<sp/>Rs2.W[x].B[3])<sp/>+<sp/>(Rs1.W[x].B[2]<sp/>su*<sp/>Rs2.W[x].B[2])<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>(Rs1.W[x].B[1]<sp/>su*<sp/>Rs2.W[x].B[1])<sp/>+<sp/>(Rs1.W[x].B[0]<sp/>su*<sp/>Rs2.W[x].B[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8126" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8126" bodyend="8130"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafc3ca4c25f1796c6c129b0a72fdb4ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SMAX8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMAX8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMAX8 (SIMD 8-bit Signed Maximum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMAX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer elements finding maximum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2 and selects the numbers that is greater than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&gt;<sp/>Rs2.B[x])?<sp/>Rs1.B[x]<sp/>:<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8164" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8164" bodyend="8169"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga9fefb44ce69dae8452a1f78462b36ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SMAX16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMAX16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMAX16 (SIMD 16-bit Signed Maximum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMAX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements finding maximum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2 and selects the numbers that is greater than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&gt;<sp/>Rs2.H[x])?<sp/>Rs1.H[x]<sp/>:<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8203" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8203" bodyend="8208"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6078c3498de77bbaeabbf7017fa023ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMBB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMBB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMBB16 (SIMD Signed Multiply Bottom Half &amp; Bottom Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16- bit content of the 32-bit elements of another register and write the result to a third register.<itemizedlist>
<listitem><para>SMBB16: W[x].bottom*W[x].bottom</para></listitem><listitem><para>SMBT16: W[x].bottom *W[x].top</para></listitem><listitem><para>SMTT16: W[x].top * W[x].top</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SMBB16</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMBT16</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMTT16</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0];<sp/></highlight><highlight class="comment">//<sp/>SMBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1];<sp/></highlight><highlight class="comment">//<sp/>SMBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1];<sp/></highlight><highlight class="comment">//<sp/>SMTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8255" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8255" bodyend="8260"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2f8364cbb057b9952017ad1bd3230a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMBT16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMBT16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMBT16 (SIMD Signed Multiply Bottom Half &amp; Top Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16- bit content of the 32-bit elements of another register and write the result to a third register.<itemizedlist>
<listitem><para>SMBB16: W[x].bottom*W[x].bottom</para></listitem><listitem><para>SMBT16: W[x].bottom *W[x].top</para></listitem><listitem><para>SMTT16: W[x].top * W[x].top</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SMBB16</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMBT16</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMTT16</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0];<sp/></highlight><highlight class="comment">//<sp/>SMBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1];<sp/></highlight><highlight class="comment">//<sp/>SMBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1];<sp/></highlight><highlight class="comment">//<sp/>SMTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8307" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8307" bodyend="8312"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gab253cabd0fb5ac51b6b897cd3e8d6e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMTT16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMTT16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMTT16 (SIMD Signed Multiply Top Half &amp; Top Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMBB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMBT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMTT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 16-bit content of the 32-bit elements of a register with the signed 16- bit content of the 32-bit elements of another register and write the result to a third register.<itemizedlist>
<listitem><para>SMBB16: W[x].bottom*W[x].bottom</para></listitem><listitem><para>SMBT16: W[x].bottom *W[x].top</para></listitem><listitem><para>SMTT16: W[x].top * W[x].top</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SMBB16</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMBT16</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMTT16</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The multiplication results are written to Rd. The 16-bit contents of Rs1 and Rs2 are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0];<sp/></highlight><highlight class="comment">//<sp/>SMBB16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1];<sp/></highlight><highlight class="comment">//<sp/>SMBT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1];<sp/></highlight><highlight class="comment">//<sp/>SMTT16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8359" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8359" bodyend="8364"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga056df0d47cc4dcef5739bb15f2a324ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMDS</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMDS</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMDS (SIMD Signed Multiply Two Halfs and Subtract) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMDRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation between the two 32-bit results.<itemizedlist>
<listitem><para>SMDS: top*top - bottom*bottom (per 32-bit element)</para></listitem><listitem><para>SMDRS: bottom*bottom - top*top (per 32-bit element)</para></listitem><listitem><para>SMXDS: top*bottom - bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SMDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMDRS</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of multiplication are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>SMDS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>SMDRS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>SMXDS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8418" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8418" bodyend="8423"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gafab251aa9c5e64dc004c9dc3b8c7c0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMDRS</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMDRS</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMDRS (SIMD Signed Multiply Two Halfs and Reverse Subtract) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMDRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation between the two 32-bit results.<itemizedlist>
<listitem><para>SMDS: top*top - bottom*bottom (per 32-bit element)</para></listitem><listitem><para>SMDRS: bottom*bottom - top*top (per 32-bit element)</para></listitem><listitem><para>SMXDS: top*bottom - bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SMDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMDRS</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of multiplication are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>SMDS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>SMDRS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>SMXDS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8477" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8477" bodyend="8482"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga45c60f7cb5ae0e2ddaeca68e0a76283b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMXDS</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMXDS</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMXDS (SIMD Signed Crossed Multiply Two Halfs and Subtract) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMDRS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMXDS<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then perform a subtraction operation between the two 32-bit results.<itemizedlist>
<listitem><para>SMDS: top*top - bottom*bottom (per 32-bit element)</para></listitem><listitem><para>SMDRS: bottom*bottom - top*top (per 32-bit element)</para></listitem><listitem><para>SMXDS: top*bottom - bottom*top (per 32-bit element)</para></listitem></itemizedlist>
</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SMDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMDRS</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMXDS</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2 and then subtracts the result from the result of multiplying the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2. The subtraction result is written to the corresponding 32-bit element of Rd. The 16-bit contents of multiplication are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>SMDS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>SMDRS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>SMXDS:</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>(Rs1.W[x].H[1]<sp/>*<sp/>Rs2.W[x].H[0])<sp/>-<sp/>(Rs1.W[x].H[0]<sp/>*<sp/>Rs2.W[x].H[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8536" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8536" bodyend="8541"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga3b9ace3565fb4cea93a55736046498e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SMIN8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMIN8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMIN8 (SIMD 8-bit Signed Minimum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMIN8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer elements finding minimum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&lt;<sp/>Rs2.B[x])?<sp/>Rs1.B[x]<sp/>:<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8575" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8575" bodyend="8580"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga5b8419c5f8c624d1a0e16c43efb798eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SMIN16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMIN16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMIN16 (SIMD 16-bit Signed Minimum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMIN16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements finding minimum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2 and selects the numbers that is less than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&lt;<sp/>Rs2.H[x])?<sp/>Rs1.H[x]<sp/>:<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8614" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8614" bodyend="8619"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga17b1cc8cce90ea3852050e9ec0b28795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMMUL</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_SMMUL</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMMUL (SIMD MSW Signed Multiply Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMMUL<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMMUL.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed integer elements of two registers and write the most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form performs an additional rounding up operation on the multiplication results before taking the most significant 32-bit part of the results.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.<itemizedlist>
<listitem><para>For <computeroutput>smmul/RV32</computeroutput> instruction, it is an alias to <computeroutput>mulh/RV32</computeroutput> instruction.</para></listitem></itemizedlist>
</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][63:31]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][63:32];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8665" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8665" bodyend="8670"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga18c56b42dfb546e0a39ee1a0554e6e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMMUL_U</definition>
        <argsstring>(long a, long b)</argsstring>
        <name>__RV_SMMUL_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMMUL.u (SIMD MSW Signed Multiply Word with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMMUL<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMMUL.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed integer elements of two registers and write the most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form performs an additional rounding up operation on the multiplication results before taking the most significant 32-bit part of the results.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the 32-bit elements of Rs1 with the 32-bit elements of Rs2 and writes the most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The 32-bit elements of Rs1 and Rs2 are treated as signed integers. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 64-bit multiplication results by adding a 1 to bit 31 of the results.<itemizedlist>
<listitem><para>For <computeroutput>smmul/RV32</computeroutput> instruction, it is an alias to <computeroutput>mulh/RV32</computeroutput> instruction.</para></listitem></itemizedlist>
</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][63:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][63:31]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][63:32];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8716" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8716" bodyend="8721"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9842af8b6adf990ea70a5261e546a26c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMMWB</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_SMMWB</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMMWB (SIMD MSW Signed Multiply Word and Bottom Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMMWB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMMWB.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register, and write the most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8766" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8766" bodyend="8771"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga4b7617e39d73f38ac27a24644008aacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMMWB_U</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_SMMWB_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMMWB.u (SIMD MSW Signed Multiply Word and Bottom Half with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMMWB<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMMWB.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the bottom 16-bit of the corresponding 32-bit elements of another register, and write the most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the signed bottom 16-bit content of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8816" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8816" bodyend="8821"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga92298c74bc685e608de8c743f4348940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMMWT</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_SMMWT</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMMWT (SIMD MSW Signed Multiply Word and Top Half) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMMWT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMMWT.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the corresponding 32-bit elements of another register, and write the most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the top signed 16-bit content of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8866" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8866" bodyend="8871"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga75f579bae285694b96c319bd0c0daffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SMMWT_U</definition>
        <argsstring>(long a, unsigned long b)</argsstring>
        <name>__RV_SMMWT_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMMWT.u (SIMD MSW Signed Multiply Word and Top Half with Rounding) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMMWT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMMWT.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed 32-bit integer elements of one register and the top 16-bit of the corresponding 32-bit elements of another register, and write the most significant 32-bit results to the corresponding 32-bit elements of a register. The <computeroutput>.u</computeroutput> form rounds up the results from the most significant discarded bit.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the signed 32-bit elements of Rs1 with the top signed 16-bit content of the corresponding 32-bit elements of Rs2 and writes the most significant 32-bit multiplication results to the corresponding 32-bit elements of Rd. The <computeroutput>.u</computeroutput> form of the instruction rounds up the most significant 32-bit of the 48-bit multiplication results by adding a 1 to bit 15 of the results.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Mres[x][47:0]<sp/>=<sp/>Rs1.W[x]<sp/>*<sp/>Rs2.W[x].H[1];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Round[x][32:0]<sp/>=<sp/>Mres[x][47:15]<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Round[x][32:1];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.W[x]<sp/>=<sp/>Mres[x][47:16];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8916" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8916" bodyend="8921"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gac49482a84d29e662acb7438c5821cc8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMSLDA</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMSLDA</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMSLDA (Signed Multiply Two Halfs &amp; Add &amp; Subtract 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMSLDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMSLXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then subtracts the two 32-bit results from the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The subtraction result is written back to the register-pair.<itemizedlist>
<listitem><para>SMSLDA: rd pair - top*top - bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMSLXDA: rd pair - top*bottom - bottom*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMSLDA</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMSLXDA</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2. The two multiplication results are subtracted from the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit subtraction result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMSLDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMSLXDA</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The four multiplication results are subtracted from the 64-bit value of Rd. The 64-bit subtraction result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>-<sp/>SE64(Mres0[31:0])<sp/>-<sp/>SE64(Mres1[31:0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>-<sp/>SE64(Mres0[0][31:0])<sp/>-<sp/>SE64(Mres1[0][31:0])<sp/>-<sp/>SE64(Mres0[1][31:0])<sp/>-</highlight></codeline>
<codeline><highlight class="normal">SE64(Mres1[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="8999" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="8999" bodyend="9003"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gad6cb1fab36698a107205e10b5ae71436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMSLXDA</definition>
        <argsstring>(long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SMSLXDA</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMSLXDA (Signed Crossed Multiply Two Halfs &amp; Add &amp; Subtract 64- bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMSLDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMSLXDA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do two signed 16-bit multiplications from the 32-bit elements of two registers; and then subtracts the two 32-bit results from the 64-bit value of an even/odd pair of registers (RV32) or a register (RV64). The subtraction result is written back to the register-pair.<itemizedlist>
<listitem><para>SMSLDA: rd pair - top*top - bottom*bottom (all 32-bit elements)</para></listitem><listitem><para>SMSLXDA: rd pair - top*bottom - bottom*top (all 32-bit elements)</para></listitem></itemizedlist>
</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMSLDA</computeroutput> instruction, it multiplies the bottom 16-bit content of Rs1 with the bottom 16-bit content Rs2 and multiplies the top 16-bit content of Rs1 with the top 16-bit content of Rs2. For the <computeroutput>SMSLXDA</computeroutput> instruction, it multiplies the top 16-bit content of Rs1 with the bottom 16-bit content of Rs2 and multiplies the bottom 16-bit content of Rs1 with the top 16-bit content of Rs2. The two multiplication results are subtracted from the 64-bit value of an even/odd pair of registers specified by Rd(4,1). The 64-bit subtraction result is written back to the register-pair. The 16-bit values of Rs1 and Rs2, and the 64-bit value of the register-pair are treated as signed integers. Rd(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMSLDA</computeroutput> instruction, it multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the top 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. For the <computeroutput>SMSLXDA</computeroutput> instruction, it multiplies the top 16-bit content of the 32-bit elements of Rs1 with the bottom 16-bit content of the 32-bit elements of Rs2 and multiplies the bottom 16-bit content of the 32-bit elements of Rs1 with the top 16-bit content of the 32-bit elements of Rs2. The four multiplication results are subtracted from the 64-bit value of Rd. The 64-bit subtraction result is written back to Rd. The 16-bit values of Rs1 and Rs2, and the 64-bit value of Rd are treated as signed integers.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[31:0]<sp/>=<sp/>(Rs1.H[0]<sp/>*<sp/>Rs2.H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[31:0]<sp/>=<sp/>(Rs1.H[1]<sp/>*<sp/>Rs2.H[0]);</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[Idx1].R[Idx0]<sp/>=<sp/>R[Idx1].R[Idx0]<sp/>-<sp/>SE64(Mres0[31:0])<sp/>-<sp/>SE64(Mres1[31:0]);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SMSLXDA</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Mres0[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[0]<sp/>*<sp/>Rs2.W[0].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[0][31:0]<sp/>=<sp/>(Rs1.W[0].H[1]<sp/>*<sp/>Rs2.W[0].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Mres0[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[0]<sp/>*<sp/>Rs2.W[1].H[1]);</highlight></codeline>
<codeline><highlight class="normal">Mres1[1][31:0]<sp/>=<sp/>(Rs1.W[1].H[1]<sp/>*<sp/>Rs2.W[1].H[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>-<sp/>SE64(Mres0[0][31:0])<sp/>-<sp/>SE64(Mres1[0][31:0])<sp/>-<sp/>SE64(Mres0[1][31:0])<sp/>-</highlight></codeline>
<codeline><highlight class="normal">SE64(Mres1[1][31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9081" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9081" bodyend="9085"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga97d5fc417db0b47d8ee805ef3eb9d8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_SMSR64</definition>
        <argsstring>(long long t, long a, long b)</argsstring>
        <name>__RV_SMSR64</name>
        <param>
          <type>long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMSR64 (Signed Multiply and Subtract from 64- Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMSR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit signed elements in two registers and subtract the 64-bit multiplication results from the 64-bit signed data of a pair of registers (RV32) or a register (RV64). The result is written back to the pair of registers (RV32) or a register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed data of Rs1 with that of Rs2. It subtracts the 64-bit multiplication result from the 64-bit signed data of an even/odd pair of registers specified by Rd(4,1). The subtraction result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit signed elements of Rs1 with that of Rs2. It subtracts the 64-bit multiplication results from the 64-bit signed data of Rd. The subtraction result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>R[t_H].R[t_L]<sp/>-<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>-<sp/>(Rs1.W[0]<sp/>*<sp/>Rs2.W[0])<sp/>-<sp/>(Rs1.W[1]<sp/>*<sp/>Rs2.W[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9134" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9134" bodyend="9138"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gaa89f0815a309bf7e0c79c8ac9030c209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_SMUL8</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_SMUL8</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMUL8 (SIMD Signed 8-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMUL8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMULX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do signed 8-bit multiplications and generate four 16-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMUL8</computeroutput> instruction, multiply the 8-bit data elements of Rs1 with the corresponding 8-bit data elements of Rs2. For the <computeroutput>SMULX8</computeroutput> instruction, multiply the first and second 8-bit data elements of Rs1 with the second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data elements of Rs1 with the fourth and third 8-bit data elements of Rs2. The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the two 16-bit results calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMUL8</computeroutput> instruction, multiply the 8-bit data elements of Rs1 with the corresponding 8-bit data elements of Rs2. For the <computeroutput>SMULX8</computeroutput> instruction, multiply the first and second 8-bit data elements of Rs1 with the second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data elements of Rs1 with the fourth and third 8-bit data elements of Rs2. The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/>=<sp/>op1t[x/2]<sp/>s*<sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/>=<sp/>op1b[x/2]<sp/>s*<sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].H[1]<sp/>=<sp/>rest[1];<sp/>R[t_H].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">R[t_L].H[1]<sp/>=<sp/>rest[0];<sp/>R[t_L].H[0]<sp/>=<sp/>resb[0];</highlight></codeline>
<codeline><highlight class="normal">x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/>=<sp/>op1t[x/2]<sp/>s*<sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/>=<sp/>op1b[x/2]<sp/>s*<sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1].H[1]<sp/>=<sp/>rest[1];<sp/>Rd.W[1].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0].H[1]<sp/>=<sp/>rest[0];<sp/>Rd.W[0].H[0]<sp/>=<sp/>resb[0];</highlight></codeline>
<codeline><highlight class="normal">x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9216" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9216" bodyend="9221"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga6960884895453cad6b8ac126b66ee892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_SMULX8</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_SMULX8</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMULX8 (SIMD Signed Crossed 8-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMUL8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMULX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do signed 8-bit multiplications and generate four 16-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMUL8</computeroutput> instruction, multiply the 8-bit data elements of Rs1 with the corresponding 8-bit data elements of Rs2. For the <computeroutput>SMULX8</computeroutput> instruction, multiply the first and second 8-bit data elements of Rs1 with the second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data elements of Rs1 with the fourth and third 8-bit data elements of Rs2. The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the two 16-bit results calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMUL8</computeroutput> instruction, multiply the 8-bit data elements of Rs1 with the corresponding 8-bit data elements of Rs2. For the <computeroutput>SMULX8</computeroutput> instruction, multiply the first and second 8-bit data elements of Rs1 with the second and first 8-bit data elements of Rs2. At the same time, multiply the third and fourth 8-bit data elements of Rs1 with the fourth and third 8-bit data elements of Rs2. The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/>=<sp/>op1t[x/2]<sp/>s*<sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/>=<sp/>op1b[x/2]<sp/>s*<sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].H[1]<sp/>=<sp/>rest[1];<sp/>R[t_H].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">R[t_L].H[1]<sp/>=<sp/>rest[0];<sp/>R[t_L].H[0]<sp/>=<sp/>resb[0];</highlight></codeline>
<codeline><highlight class="normal">x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/>=<sp/>op1t[x/2]<sp/>s*<sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/>=<sp/>op1b[x/2]<sp/>s*<sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1].H[1]<sp/>=<sp/>rest[1];<sp/>Rd.W[1].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0].H[1]<sp/>=<sp/>rest[0];<sp/>Rd.W[0].H[0]<sp/>=<sp/>resb[0];</highlight></codeline>
<codeline><highlight class="normal">x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9299" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9299" bodyend="9304"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1gad0ccc8d1d7b5b8c0c2b7133b7243dc91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_SMUL16</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_SMUL16</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMUL16 (SIMD Signed 16-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMUL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMULX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do signed 16-bit multiplications and generate two 32-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMUL16</computeroutput> instruction, multiply the top 16-bit Q15 content of Rs1 with the top 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the bottom 16-bit Q15 content of Rs2. For the <computeroutput>SMULX16</computeroutput> instruction, multiply the top 16-bit Q15 content of Rs1 with the bottom 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the top 16- bit Q15 content of Rs2. The two Q30 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the 32-bit result calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMUL16</computeroutput> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. For the <computeroutput>SMULX16</computeroutput> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. The two 32-bit Q30 results are then written into Rd. The result calculated from the top 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>s*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">R[t_L]<sp/>=<sp/>resb;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>s*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0]<sp/>=<sp/>resb;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9384" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9384" bodyend="9389"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga2eb023a945b38fad971202a788f3899c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_SMULX16</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_SMULX16</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SMULX16 (SIMD Signed Crossed 16-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SMUL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SMULX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do signed 16-bit multiplications and generate two 32-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>SMUL16</computeroutput> instruction, multiply the top 16-bit Q15 content of Rs1 with the top 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the bottom 16-bit Q15 content of Rs2. For the <computeroutput>SMULX16</computeroutput> instruction, multiply the top 16-bit Q15 content of Rs1 with the bottom 16-bit Q15 content of Rs2. At the same time, multiply the bottom 16-bit Q15 content of Rs1 with the top 16- bit Q15 content of Rs2. The two Q30 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the 32-bit result calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>SMUL16</computeroutput> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. For the <computeroutput>SMULX16</computeroutput> instruction, multiply the top 16-bit Q15 content of the lower 32-bit word in Rs1 with the bottom 16-bit Q15 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit Q15 content of the lower 32-bit word in Rs1 with the top 16-bit Q15 content of the lower 32-bit word in Rs2. The two 32-bit Q30 results are then written into Rd. The result calculated from the top 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>s*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">R[t_L]<sp/>=<sp/>resb;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`SMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>s*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0]<sp/>=<sp/>resb;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9469" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9469" bodyend="9474"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gac34824012cfe56f0a6fb9baf2fb1ba33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SRA_U</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_SRA_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA.u (Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform an arithmetic right shift operation with rounding. The shift amount is a variable from a GPR.</para><para><bold>Description</bold>:<linebreak/>
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are filled with the sign-bit and the shift amount is specified by the low-order 5-bits (RV32) or 6-bits (RV64) of the Rs2 register. For the rounding operation, a value of 1 is added to the most significant discarded bit of the data to calculate the final result. And the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[31:-1]<sp/>=<sp/>SE33(Rs1[31:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[31:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[5:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[63:-1]<sp/>=<sp/>SE65(Rs1[63:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[63:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9523" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9523" bodyend="9528"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga19fde10e69ceda8b79f4cba59c073654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_SRAI_U</definition>
        <argsstring>(long a, unsigned int b)</argsstring>
        <name>__RV_SRAI_U</name>
        <param>
          <type>long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI.u (Rounding Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI.u<sp/>Rd,<sp/>Rs1,<sp/>imm6u[4:0]<sp/>(RV32)</highlight></codeline>
<codeline><highlight class="normal">SRAI.u<sp/>Rd,<sp/>Rs1,<sp/>imm6u[5:0]<sp/>(RV64)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform an arithmetic right shift operation with rounding. The shift amount is an immediate value.</para><para><bold>Description</bold>:<linebreak/>
This instruction right-shifts the content of Rs1 arithmetically. The shifted out bits are filled with the sign-bit and the shift amount is specified by the imm6u[4:0] (RV32) or imm6u[5:0] (RV64) constant . For the rounding operation, a value of 1 is added to the most significant discarded bit of the data to calculate the final result. And the result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>imm6u[4:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[31:-1]<sp/>=<sp/>SE33(Rs1[31:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[31:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">sa<sp/>=<sp/>imm6u[5:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[63:-1]<sp/>=<sp/>SE65(Rs1[63:(sa-1)])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>res[63:0];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9578" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9578" bodyend="9583"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60b24db284bacbf2ab9de45e0881b011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRA8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRA8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA8 (SIMD 8-bit Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SRA8.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:-1]<sp/>=<sp/>SE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rd.B[x][7:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9632" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9632" bodyend="9637"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gad6421547bda7f5c8b4ab42d0e771daf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRA8_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRA8_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA8.u (SIMD 8-bit Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SRA8.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:-1]<sp/>=<sp/>SE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rd.B[x][7:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9686" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9686" bodyend="9691"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga06571f245615b47549624828befd354a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRAI8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRAI8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI8 (SIMD 8-bit Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI8<sp/>Rd,<sp/>Rs1,<sp/>imm3u</highlight></codeline>
<codeline><highlight class="normal">SRAI8.u<sp/>Rd,<sp/>Rs1,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the imm3u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm3u[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:-1]<sp/>=<sp/>SE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rd.B[x][7:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9739" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9739" bodyend="9744"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gaeccaed883c7e38bc8a277bdb1c8e899e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRAI8_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRAI8_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI8.u (SIMD 8-bit Rounding Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI8<sp/>Rd,<sp/>Rs1,<sp/>imm3u</highlight></codeline>
<codeline><highlight class="normal">SRAI8.u<sp/>Rd,<sp/>Rs1,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit element arithmetic right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the imm3u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm3u[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:-1]<sp/>=<sp/>SE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rd.B[x][7:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9792" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9792" bodyend="9797"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab98c44f440802e210dd48403997977fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA16 (SIMD 16-bit Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9846" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9846" bodyend="9851"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRA16_U</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRA16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRA16.u (SIMD 16-bit Rounding Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">SRA16.u<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit element arithmetic right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the data elements. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRA16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9900" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9900" bodyend="9905"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaffe133a900a4f69acef9ba2f6cafa2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRAI16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRAI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI16 (SIMD 16-bit Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI16<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRAI16.u<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRAI16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRAI16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="9954" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="9954" bodyend="9959"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gacd5b381585f2c53c1c791b1ade509e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRAI16_U</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SRAI16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRAI16.u (SIMD 16-bit Rounding Shift Right Arithmetic Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRAI16<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRAI16.u<sp/>Rd,<sp/>Rs1,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements arithmetic right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted arithmetically, that is, the shifted out bits are filled with the sign-bit of the 16-bit data elements. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRAI16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:-1]<sp/>=<sp/>SE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRAI16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10008" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10008" bodyend="10013"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga2aae7328ef4464ec4ee58147b4c3be26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRL8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRL8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRL8 (SIMD 8-bit Shift Right Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRL8<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
<codeline><highlight class="normal">SRL8.u<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[8:0]<sp/>=<sp/>ZE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[8:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>ZE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10061" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10061" bodyend="10066"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60905852cd03af20f29f226cfe99b87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRL8_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRL8_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRL8.u (SIMD 8-bit Rounding Shift Right Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRL8<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
<codeline><highlight class="normal">SRL8.u<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the low-order 3-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[8:0]<sp/>=<sp/>ZE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[8:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>ZE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10114" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10114" bodyend="10119"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac7b9034398a191996851f15691fe1e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRLI8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRLI8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRLI8 (SIMD 8-bit Shift Right Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRLI8<sp/>Rt,<sp/>Ra,<sp/>imm3u</highlight></codeline>
<codeline><highlight class="normal">SRLI8.u<sp/>Rt,<sp/>Ra,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the imm3u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm3u[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[8:0]<sp/>=<sp/>ZE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[8:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>ZE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10166" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10166" bodyend="10171"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga868802b4622f92104c7d5467560825d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRLI8_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRLI8_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRLI8.u (SIMD 8-bit Rounding Shift Right Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRLI8<sp/>Rt,<sp/>Ra,<sp/>imm3u</highlight></codeline>
<codeline><highlight class="normal">SRLI8.u<sp/>Rt,<sp/>Ra,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the imm3u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 8-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm3u[2:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI8.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[8:0]<sp/>=<sp/>ZE9(Rs1.B[x][7:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[8:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.B[x]<sp/>=<sp/>ZE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10218" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10218" bodyend="10223"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gad077385854832151e700839fb03cfcfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRL16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRL16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRL16 (SIMD 16-bit Shift Right Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRL16<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
<codeline><highlight class="normal"><sp/>SRL16.u<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding upoperations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10270" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10270" bodyend="10275"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga9b9494b2d305f51510e789484cbfd60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRL16_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRL16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRL16.u (SIMD 16-bit Rounding Shift Right Logical) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRL16<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
<codeline><highlight class="normal"><sp/>SRL16.u<sp/>Rt,<sp/>Ra,<sp/>Rb</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is a variable from a GPR. The <computeroutput>.u</computeroutput> form performs additional rounding upoperations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the low-order 4-bits of the value in the Rs2 register. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRL16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10322" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10322" bodyend="10327"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gac7770810e1893581d9153635fc943107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRLI16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRLI16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRLI16 (SIMD 16-bit Shift Right Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRLI16<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRLI16.u<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10374" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10374" bodyend="10379"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga98ef01d7b5346045b83eaa411234d83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SRLI16_U</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_SRLI16_U</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SRLI16.u (SIMD 16-bit Rounding Shift Right Logical Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SRLI16<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
<codeline><highlight class="normal">SRLI16.u<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical right shift operations simultaneously. The shift amount is an immediate value. The <computeroutput>.u</computeroutput> form performs additional rounding up operations on the shifted results.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements in Rs1 are right-shifted logically, that is, the shifted out bits are filled with zero. The shift amount is specified by the imm4u constant. For the rounding operation of the <computeroutput>.u</computeroutput> form, a value of 1 is added to the most significant discarded bit of each 16-bit data element to calculate the final results. And the results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">sa<sp/>=<sp/>imm4u;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(`.u`<sp/>form)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI16.u</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[16:0]<sp/>=<sp/>ZE17(Rs1.H[x][15:sa-1])<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>res[16:1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>SRLI16</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Rd.H[x]<sp/>=<sp/>ZE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd<sp/>=<sp/>Rs1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10426" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10426" bodyend="10431"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gafdb722620fddf1c66759a8f46cd34a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_STAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_STAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>STAS16 (SIMD 16-bit Straight Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">STAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer element addition and 16-bit integer element subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit integer element in [31:16] of 32-bit chunks in Rs2, and writes the result to [31:16] of 32-bit chunks in Rd; at the same time, it subtracts the 16-bit integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit integer element in [15:0] of 32-bit chunks, and writes the result to [15:0] of 32- bit chunks in Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10472" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10472" bodyend="10477"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4c4ac88f3a4a3db0834b880ad8548543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_STSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_STSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>STSA16 (SIMD 16-bit Straight Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">STSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer element subtraction and 16-bit integer element addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit integer element in [31:16] of 32-bit chunks in Rs1, and writes the result to [31:16] of 32-bit chunks in Rd; at the same time, it adds the 16-bit integer element in [15:0] of 32-bit chunks in Rs2 with the 16-bit integer element in [15:0] of 32-bit chunks in Rs1, and writes the result to [15:0] of 32-bit chunks in Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned operations.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10518" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10518" bodyend="10523"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga9c75e931e8703babf9e8d29f6dfcf280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUB8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SUB8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SUB8 (SIMD 8-bit Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit integer element subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit integer elements in Rs2 from the 8-bit integer elements in Rs1, and then writes the result to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>Rs1.B[x]<sp/>-<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10559" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10559" bodyend="10564"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga2ba13d5be91378558bac3add7c314a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_SUB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SUB16 (SIMD 16-bit Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit integer element subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit integer elements in Rs2 from the 16-bit integer elements in Rs1, and then writes the result to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>Rs1.H[x]<sp/>-<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10600" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10600" bodyend="10605"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga02ed3c841b85e58d5a40d78fa2f5519f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_SUB64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_SUB64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SUB64 (64-bit Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed or unsigned integer subtraction.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit integer of an even/odd pair of registers specified by Rs1(4,1), and then writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit integer of Rs2 from the 64-bit integer of Rs1, and then writes the 64-bit result to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rs1<sp/>-<sp/>Rs2;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10654" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10654" bodyend="10659"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gaecdd51db17293a1d12d85a6bb0cd4abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUNPKD810</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SUNPKD810</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SUNPKD810 (Signed Unpacking Bytes 1 &amp; 0) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte <emphasis>x and byte y</emphasis> of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>SE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>SE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10700" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10700" bodyend="10705"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga922f7523e4d512fe391795edd7a81239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUNPKD820</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SUNPKD820</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SUNPKD820 (Signed Unpacking Bytes 2 &amp; 0) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte <emphasis>x and byte y</emphasis> of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>SE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>SE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10746" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10746" bodyend="10751"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga8d213189a39651f3bcad77da2eb1f530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUNPKD830</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SUNPKD830</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SUNPKD830 (Signed Unpacking Bytes 3 &amp; 0) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte <emphasis>x and byte y</emphasis> of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>SE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>SE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10792" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10792" bodyend="10797"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gad3da1a88ec99f6c5733a3035d26b3bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUNPKD831</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SUNPKD831</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SUNPKD831 (Signed Unpacking Bytes 3 &amp; 1) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte <emphasis>x and byte y</emphasis> of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>SE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>SE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10838" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10838" bodyend="10843"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga869283b10c6656ef6b529487d244449c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SUNPKD832</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SUNPKD832</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SUNPKD832 (Signed Unpacking Bytes 3 &amp; 2) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte <emphasis>x and byte y</emphasis> of 32-bit chunks in a register into two 16-bit signed halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>SUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit signed halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>SE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>SE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10884" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10884" bodyend="10889"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaaea4771a7ac766be7bfec89c7bf6cda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SWAP8</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SWAP8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SWAP8 (Swap Byte within Halfword) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SWAP8<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Swap the bytes within each halfword of a register.</para><para><bold>Description</bold>:<linebreak/>
This instruction swaps the bytes within each halfword of Rs1 and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>CONCAT(Rs1.H[x][7:0],Rs1.H[x][15:8]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10921" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10921" bodyend="10926"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gadab9655b01398363507f94180fd41ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_SWAP16</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_SWAP16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SWAP16 (Swap Halfword within Word) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SWAP16<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Swap the 16-bit halfwords within each word of a register.</para><para><bold>Description</bold>:<linebreak/>
This instruction swaps the 16-bit halfwords within each word of Rs1 and writes the result to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>CONCAT(Rs1.W[x][15:0],Rs1.H[x][31:16]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="10958" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10958" bodyend="10963"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafed7823f6a501d256c3232bd8a1d85d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCLIP8</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_UCLIP8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCLIP8 (SIMD 8-bit Unsigned Clip Value) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCLIP8<sp/>Rt,<sp/>Ra,<sp/>imm3u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Limit the 8-bit signed elements of a register into an unsigned range simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction limits the 8-bit signed elements stored in Rs1 into an unsigned integer range between 2^imm3u-1 and 0, and writes the limited results to Rd. For example, if imm3u is 3, the 8- bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&gt;<sp/>(2^imm3u)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>(2^imm3u)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11005" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11005" bodyend="11010"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga562f85675e7444c4fb1e5e6c28c3c6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCLIP16</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_UCLIP16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCLIP16 (SIMD 16-bit Unsigned Clip Value) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCLIP16<sp/>Rt,<sp/>Ra,<sp/>imm4u</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Limit the 16-bit signed elements of a register into an unsigned range simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction limits the 16-bit signed elements stored in Rs1 into an unsigned integer range between 2imm4u-1 and 0, and writes the limited results to Rd. For example, if imm4u is 3, the 16-bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&gt;<sp/>(2^imm4u)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>(2^imm4u)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11053" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11053" bodyend="11058"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga714c7ecdec825caa36c722bc8edbb2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCLIP32</definition>
        <argsstring>(unsigned long a, unsigned int b)</argsstring>
        <name>__RV_UCLIP32</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCLIP32 (SIMD 32-bit Unsigned Clip Value) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCLIP32<sp/>Rd,<sp/>Rs1,<sp/>imm5u[4:0]</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Limit the 32-bit signed integer elements of a register into an unsigned range simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction limits the 32-bit signed integer elements stored in Rs1 into an unsigned integer range between 2imm5u-1 and 0, and writes the limited results to Rd. For example, if imm5u is 3, the 32-bit input values should be saturated between 7 and 0. If saturation is performed, set OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.W[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&gt;<sp/>(2^imm5u)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>(2^imm5u)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>src</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11102" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11102" bodyend="11107"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7bb0f1ec7077c679107517472935145d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCMPLE8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UCMPLE8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCMPLE8 (SIMD 8-bit Unsigned Compare Less Than &amp; Equal) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCMPLE8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer elements less than &amp; equal comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit unsigned integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is true, the result is 0xFF; otherwise, the result is 0x0. The four comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&lt;=u<sp/>Rs2.B[x])?<sp/>0xff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11142" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11142" bodyend="11147"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga1c90d69f90f54607d8b137b8efafdc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCMPLE16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UCMPLE16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCMPLE16 (SIMD 16-bit Unsigned Compare Less Than &amp; Equal) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCMPLE16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer elements less than &amp; equal comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2 to see if the one in Rs1 is less than or equal to the one in Rs2. If it is true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&lt;=u<sp/>Rs2.H[x])?<sp/>0xffff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11182" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11182" bodyend="11187"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga6d69bc358f1d79a21f67027a3fcf2320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCMPLT8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UCMPLT8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCMPLT8 (SIMD 8-bit Unsigned Compare Less Than) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCMPLT8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer elements less than comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit unsigned integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the result is 0xFF; otherwise, the result is 0x0. The element comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&lt;u<sp/>Rs2.B[x])?<sp/>0xff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11221" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11221" bodyend="11226"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga566fff4ed2e21cc7e247ecb8b2258bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UCMPLT16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UCMPLT16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UCMPLT16 (SIMD 16-bit Unsigned Compare Less Than) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UCMPLT16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer elements less than comparisons simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2 to see if the one in Rs1 is less than the one in Rs2. If it is true, the result is 0xFFFF; otherwise, the result is 0x0. The element comparison results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&lt;u<sp/>Rs2.H[x])?<sp/>0xffff<sp/>:<sp/>0x0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11260" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11260" bodyend="11265"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga4b8d09eb6958b8eabea15a82ab8edef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKADD8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKADD8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADD8 (SIMD 8-bit Unsigned Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit unsigned integer elements in Rs1 with the 8-bit unsigned integer elements in Rs2. If any of the results are beyond the 8-bit unsigned number range (0 &lt;= RES &lt;= 28-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>+<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^8)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^8)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11305" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11305" bodyend="11310"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5ab8ad2484f1d4b0ffbbd48443be73d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKADD16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKADD16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADD16 (SIMD 16-bit Unsigned Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2. If any of the results are beyond the 16-bit unsigned number range (0 &lt;= RES &lt;= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>+<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11350" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11350" bodyend="11355"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UKADD64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_UKADD64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADD64 (64-bit Unsigned Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit unsigned integers. The result is saturated to the U64 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1). If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned integer in Rs2. If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rt(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Ra(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rb(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^64)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^64)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rs1<sp/>+<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^64)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^64)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11412" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11412" bodyend="11417"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gaf5a82ca7a98ea1c06cd7a468d035abcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKADDH</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UKADDH</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADDH (Unsigned Addition with U16 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADDH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add the unsigned lower 32-bit content of two registers with U16 saturation.</para><para><bold>Description</bold>:<linebreak/>
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit content of Rs2. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>+<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11454" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11454" bodyend="11459"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga836b1f78407443c88b5958a7cfb3361f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKADDW</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UKADDW</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADDW (Unsigned Addition with U32 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADDW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add the unsigned lower 32-bit content of two registers with U32 saturation.</para><para><bold>Description</bold>:<linebreak/>
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit content of Rs2. And the result is saturated to the 32-bit unsigned integer range of [0, 2^32-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>+<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^32)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp[31:0]<sp/>=<sp/>(2^32)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>tmp[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11497" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11497" bodyend="11502"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga3d8ee80d3beca9f62d44d96a52037f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKCRAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKCRAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKCRAS16 (SIMD 16-bit Unsigned Saturating Cross Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKCRAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do one 16-bit unsigned integer element saturating addition and one 16-bit unsigned integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2; at the same time, it subtracts the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit unsigned number range (0 &lt;= RES &lt;= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res1<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res1<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res2<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res2<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11553" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11553" bodyend="11558"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga469a05a9449e9ec44d89d5f37df09d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKCRSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKCRSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKCRSA16 (SIMD 16-bit Unsigned Saturating Cross Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKCRSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do one 16-bit unsigned integer element saturating subtraction and one 16-bit unsigned integer element saturating addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 with the 16- bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit unsigned number range (0 &lt;= RES &lt;= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd for addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res1<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res1<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res2<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res2<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11608" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11608" bodyend="11613"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac196974cb320c6111c4708989d0e1e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UKMAR64</definition>
        <argsstring>(unsigned long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKMAR64</name>
        <param>
          <type>unsigned long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKMAR64 (Unsigned Multiply and Saturating Add to 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKMAR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit unsigned elements in two registers and add the 64-bit multiplication results to the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is saturated to the U64 range and written back to the pair of registers (RV32) or the register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It adds the 64-bit multiplication result to the 64-bit unsigned data of an even/odd pair of registers specified by Rd(4,1) with unlimited precision. If the 64-bit addition result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2. It adds the 64-bit multiplication results to the 64-bit unsigned data in Rd with unlimited precision. If the 64-bit addition result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[t_H].R[t_L]<sp/>+<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^64)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^64)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>`result`<sp/>has<sp/>unlimited<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rd<sp/>+<sp/>(Rs1.W[0]<sp/>u*<sp/>Rs2.W[0])<sp/>+<sp/>(Rs1.W[1]<sp/>u*<sp/>Rs2.W[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;<sp/>(2^64)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^64)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11673" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11673" bodyend="11677"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga7feff7a2f338e3730f0af2f054cfdd71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UKMSR64</definition>
        <argsstring>(unsigned long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKMSR64</name>
        <param>
          <type>unsigned long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKMSR64 (Unsigned Multiply and Saturating Subtract from 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKMSR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit unsigned elements in two registers and subtract the 64-bit multiplication results from the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is saturated to the U64 range and written back to the pair of registers (RV32) or a register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It subtracts the 64-bit multiplication result from the 64-bit unsigned data of an even/odd pair of registers specified by Rd(4,1) with unlimited precision. If the 64-bit subtraction result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2. It subtracts the 64-bit multiplication results from the 64-bit unsigned data of Rd with unlimited precision. If the 64-bit subtraction result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[t_H].R[t_L]<sp/>-<sp/>(Rs1<sp/>u*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>`result`<sp/>has<sp/>unlimited<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rd<sp/>-<sp/>(Rs1.W[0]<sp/>u*<sp/>Rs2.W[0])<sp/>-<sp/>(Rs1.W[1]<sp/>u*<sp/>Rs2.W[1]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11738" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11738" bodyend="11742"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gac5ee1051a7643e3ed68a807f61665e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSTAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKSTAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSTAS16 (SIMD 16-bit Unsigned Saturating Straight Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSTAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do one 16-bit unsigned integer element saturating addition and one 16-bit unsigned integer element saturating subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1 with the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2; at the same time, it subtracts the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 from the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit unsigned number range (0 &lt;= RES &lt;= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for addition and [15:0] of 32-bit chunks in Rd for subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res1<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res1<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res2<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res2<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11793" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11793" bodyend="11798"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaed116dce964990e1d8f0905a607b9541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSTSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKSTSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSTSA16 (SIMD 16-bit Unsigned Saturating Straight Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSTSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do one 16-bit unsigned integer element saturating subtraction and one 16-bit unsigned integer element saturating addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs2 from the 16-bit unsigned integer element in [31:16] of 32-bit chunks in Rs1; at the same time, it adds the 16-bit unsigned integer element in [15:0] of 32-bit chunks in Rs2 with the 16- bit unsigned integer element in [15:0] of 32-bit chunks in Rs1. If any of the results are beyond the 16-bit unsigned number range (0 &lt;= RES &lt;= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to [31:16] of 32-bit chunks in Rd for subtraction and [15:0] of 32-bit chunks in Rd for addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res1<sp/>=<sp/>Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][31:16];</highlight></codeline>
<codeline><highlight class="normal">res2<sp/>=<sp/>Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][15:0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res1<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res1<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res2<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res2<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>res1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>res2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11848" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11848" bodyend="11853"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga28d53441b9c0106fb6caed6dc77f89ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSUB8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKSUB8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUB8 (SIMD 8-bit Unsigned Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit unsigned integer elements in Rs2 from the 8-bit unsigned integer elements in Rs1. If any of the results are beyond the 8-bit unsigned number range (0 &lt;= RES &lt;= 28-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>-<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11893" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11893" bodyend="11898"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae159a5930299163247cc7704d2903c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSUB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UKSUB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUB16 (SIMD 16-bit Unsigned Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit unsigned integer elements in Rs2 from the 16-bit unsigned integer elements in Rs1. If any of the results are beyond the 16-bit unsigned number range (0 &lt;= RES &lt;= 2^16-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>-<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11938" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11938" bodyend="11943"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8c38b38409eba3d05396b9d09c1b8382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UKSUB64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_UKSUB64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUB64 (64-bit Unsigned Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed integer subtraction. The result is saturated to the U64 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1). If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer of Rs2 from the 64-bit unsigned integer of an even/odd pair of Rs1. If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rs1<sp/>-<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12001" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12001" bodyend="12006"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga8f7265e350aad977038169d60af14e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSUBH</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UKSUBH</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUBH (Unsigned Subtraction with U16 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUBH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract the unsigned lower 32-bit content of two registers with U16 saturation.</para><para><bold>Description</bold>:<linebreak/>
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit content of Rs1. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>-<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12047" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12047" bodyend="12052"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gae102902e2e1e3a606807064ab3ea763f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSUBW</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UKSUBW</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUBW (Unsigned Subtraction with U32 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUBW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract the unsigned lower 32-bit content of two registers with unsigned 32-bit saturation.</para><para><bold>Description</bold>:<linebreak/>
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit content of Rs1. And the result is saturated to the 32-bit unsigned integer range of [0, 2^32-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>-<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp[31:0]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>tmp[31:0];<sp/></highlight><highlight class="comment">//<sp/>RV32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[31:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12091" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12091" bodyend="12096"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gadfcd132e9036eac41fbe56909d8acaa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UMAR64</definition>
        <argsstring>(unsigned long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMAR64</name>
        <param>
          <type>unsigned long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMAR64 (Unsigned Multiply and Add to 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMAR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit unsigned elements in two registers and add the 64-bit multiplication results to the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is written back to the pair of registers (RV32) or a register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It adds the 64-bit multiplication result to the 64-bit unsigned data of an even/odd pair of registers specified by Rd(4,1). The addition result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2. It adds the 64-bit multiplication results to the 64-bit unsigned data of Rd. The addition result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>R[t_H].R[t_L]<sp/>+<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>+<sp/>(Rs1.W[0]<sp/>u*<sp/>Rs2.W[0])<sp/>+<sp/>(Rs1.W[1]<sp/>u*<sp/>Rs2.W[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12145" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12145" bodyend="12149"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga86598a907350dc26b358e7660f721482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UMAQA</definition>
        <argsstring>(unsigned long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMAQA</name>
        <param>
          <type>unsigned long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMAQA (Unsigned Multiply Four Bytes with 32- bit Adds) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMAQA<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do four unsigned 8-bit multiplications from 32-bit chunks of two registers; and then adds the four 16-bit results and the content of corresponding 32-bit chunks of a third register together.</para><para><bold>Description</bold>:<linebreak/>
This instruction multiplies the four unsigned 8-bit elements of 32-bit chunks of Rs1 with the four unsigned 8-bit elements of 32-bit chunks of Rs2 and then adds the four results together with the unsigned content of the corresponding 32-bit chunks of Rd. The final results are written back to the corresponding 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rd.W[x]<sp/>+<sp/>(Rs1.W[x].B[3]<sp/>u*<sp/>Rs2.W[x].B[3])<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Rs1.W[x].B[2]<sp/>u*<sp/>Rs2.W[x].B[2])<sp/>+<sp/>(Rs1.W[x].B[1]<sp/>u*<sp/>Rs2.W[x].B[1])<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Rs1.W[x].B[0]<sp/>u*<sp/>Rs2.W[x].B[0]);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12189" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12189" bodyend="12193"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga83c4e6f30012da45ea00703d8aafccbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UMAX8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMAX8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMAX8 (SIMD 8-bit Unsigned Maximum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMAX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer elements finding maximum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit unsigned integer elements in Rs1 with the four 8- bit unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The two selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&gt;u<sp/>Rs2.B[x])?<sp/>Rs1.B[x]<sp/>:<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12227" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12227" bodyend="12232"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa75623ba7f5f23a440782f47f62f1f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UMAX16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMAX16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMAX16 (SIMD 16-bit Unsigned Maximum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMAX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer elements finding maximum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2 and selects the numbers that is greater than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&gt;u<sp/>Rs2.H[x])?<sp/>Rs1.H[x]<sp/>:<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12266" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12266" bodyend="12271"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaea0e139e2e2392c423aaf9f7f18056f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UMIN8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMIN8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMIN8 (SIMD 8-bit Unsigned Minimum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMIN8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer elements finding minimum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 8-bit unsigned integer elements in Rs1 with the 8-bit unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>&lt;u<sp/>Rs2.B[x])?<sp/>Rs1.B[x]<sp/>:<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12305" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12305" bodyend="12310"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa7c689ce557d35cb4847d43846579a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UMIN16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMIN16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMIN16 (SIMD 16-bit Unsigned Minimum) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMIN16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer elements finding minimum operations simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction compares the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2 and selects the numbers that is less than the other one. The selected results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>&lt;u<sp/>Rs2.H[x])?<sp/>Rs1.H[x]<sp/>:<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12344" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12344" bodyend="12349"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga6011dd7028a2a50e4fac5a3a1da22d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UMSR64</definition>
        <argsstring>(unsigned long long t, unsigned long a, unsigned long b)</argsstring>
        <name>__RV_UMSR64</name>
        <param>
          <type>unsigned long long</type>
          <declname>t</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMSR64 (Unsigned Multiply and Subtract from 64-Bit Data) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMSR64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the 32-bit unsigned elements in two registers and subtract the 64-bit multiplication results from the 64-bit unsigned data of a pair of registers (RV32) or a register (RV64). The result is written back to the pair of registers (RV32) or a register (RV64).</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned data of Rs1 with that of Rs2. It subtracts the 64-bit multiplication result from the 64-bit unsigned data of an even/odd pair of registers specified by Rd(4,1). The subtraction result is written back to the even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction multiplies the 32-bit unsigned elements of Rs1 with that of Rs2. It subtracts the 64-bit multiplication results from the 64-bit unsigned data of Rd. The subtraction result is written back to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>R[t_H].R[t_L]<sp/>-<sp/>(Rs1<sp/>*<sp/>Rs2);</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rd<sp/>-<sp/>(Rs1.W[0]<sp/>u*<sp/>Rs2.W[0])<sp/>-<sp/>(Rs1.W[1]<sp/>u*<sp/>Rs2.W[1]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12398" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12398" bodyend="12402"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga119cf7edda88230d8d62fd642fff046b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UMUL8</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UMUL8</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMUL8 (SIMD Unsigned 8-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMUL8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">UMULX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do unsigned 8-bit multiplications and generate four 16-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>UMUL8</computeroutput> instruction, multiply the unsigned 8-bit data elements of Rs1 with the corresponding unsigned 8-bit data elements of Rs2. For the <computeroutput>UMULX8</computeroutput> instruction, multiply the first and second unsigned 8-bit data elements of Rs1 with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data elements of Rs2. The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the two 16-bit results calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>UMUL8</computeroutput> instruction, multiply the unsigned 8-bit data elements of Rs1 with the corresponding unsigned 8-bit data elements of Rs2. For the <computeroutput>UMULX8</computeroutput> instruction, multiply the first and second unsigned 8-bit data elements of Rs1 with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data elements of Rs2. The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/>=<sp/>op1t[x/2]<sp/>u*<sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/>=<sp/>op1b[x/2]<sp/>u*<sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].H[1]<sp/>=<sp/>rest[1];<sp/>R[t_H].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">R[t_L].H[1]<sp/>=<sp/>rest[0];<sp/>R[t_L].H[0]<sp/>=<sp/>resb[0];</highlight></codeline>
<codeline><highlight class="normal">x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1b[x/2]<sp/><sp/>=<sp/><sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/><sp/>=<sp/><sp/>Rs2.B[x+1];<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Rs1<sp/><sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/><sp/>=<sp/><sp/>op1t[x/2]<sp/><sp/>u*<sp/><sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/><sp/>=<sp/><sp/>op1b[x/2]<sp/><sp/>u*<sp/><sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/><sp/>=<sp/><sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/><sp/>=<sp/><sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1].H[1]<sp/>=<sp/>rest[1];<sp/>Rd.W[1].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0].H[1]<sp/>=<sp/>rest[0];<sp/>Rd.W[0].H[0]<sp/>=<sp/>resb[0];<sp/>x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12481" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12481" bodyend="12486"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gab655cbf1d89adb8bc28a1600d6e770aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UMULX8</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UMULX8</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMULX8 (SIMD Unsigned Crossed 8-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMUL8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">UMULX8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do unsigned 8-bit multiplications and generate four 16-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>UMUL8</computeroutput> instruction, multiply the unsigned 8-bit data elements of Rs1 with the corresponding unsigned 8-bit data elements of Rs2. For the <computeroutput>UMULX8</computeroutput> instruction, multiply the first and second unsigned 8-bit data elements of Rs1 with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data elements of Rs2. The four 16-bit results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the two 16-bit results calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>UMUL8</computeroutput> instruction, multiply the unsigned 8-bit data elements of Rs1 with the corresponding unsigned 8-bit data elements of Rs2. For the <computeroutput>UMULX8</computeroutput> instruction, multiply the first and second unsigned 8-bit data elements of Rs1 with the second and first unsigned 8-bit data elements of Rs2. At the same time, multiply the third and fourth unsigned 8-bit data elements of Rs1 with the fourth and third unsigned 8-bit data elements of Rs2. The four 16-bit results are then written into Rd. The Rd.W[1] contains the two 16-bit results calculated from the top part of Rs1 and the Rd.W[0] contains the two 16-bit results calculated from the bottom part of Rs1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/>=<sp/>op1t[x/2]<sp/>u*<sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/>=<sp/>op1b[x/2]<sp/>u*<sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].H[1]<sp/>=<sp/>rest[1];<sp/>R[t_H].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">R[t_L].H[1]<sp/>=<sp/>rest[0];<sp/>R[t_L].H[0]<sp/>=<sp/>resb[0];</highlight></codeline>
<codeline><highlight class="normal">x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1b[x/2]<sp/>=<sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX8`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1t[x/2]<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t[x/2]<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>op1b[x/2]<sp/><sp/>=<sp/><sp/>Rs1.B[x];<sp/>op2b[x/2]<sp/><sp/>=<sp/><sp/>Rs2.B[x+1];<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Rs1<sp/><sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">rest[x/2]<sp/><sp/>=<sp/><sp/>op1t[x/2]<sp/><sp/>u*<sp/><sp/>op2t[x/2];</highlight></codeline>
<codeline><highlight class="normal">resb[x/2]<sp/><sp/>=<sp/><sp/>op1b[x/2]<sp/><sp/>u*<sp/><sp/>op2b[x/2];</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/><sp/>=<sp/><sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/><sp/>=<sp/><sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1].H[1]<sp/>=<sp/>rest[1];<sp/>Rd.W[1].H[0]<sp/>=<sp/>resb[1];</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0].H[1]<sp/>=<sp/>rest[0];<sp/>Rd.W[0].H[0]<sp/>=<sp/>resb[0];<sp/>x<sp/>=<sp/>0<sp/>and<sp/>2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12565" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12565" bodyend="12570"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga0b8735b23131378b6bcad1dd67255513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UMUL16</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UMUL16</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMUL16 (SIMD Unsigned 16-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMUL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">UMULX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do unsigned 16-bit multiplications and generate two 32-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>UMUL16</computeroutput> instruction, multiply the top 16-bit U16 content of Rs1 with the top 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the bottom 16-bit U16 content of Rs2. For the <computeroutput>UMULX16</computeroutput> instruction, multiply the top 16-bit U16 content of Rs1 with the bottom 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the top 16- bit U16 content of Rs2. The two U32 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the 32-bit result calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>UMUL16</computeroutput> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. For the <computeroutput>UMULX16</computeroutput> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. The two 32-bit U32 results are then written into Rd. The result calculated from the top 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>u*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">R[t_L]<sp/>=<sp/>resb;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>u*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0]<sp/>=<sp/>resb;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12650" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12650" bodyend="12655"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga32ff52a5adf2d53a6d661c48ba6e58c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UMULX16</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UMULX16</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UMULX16 (SIMD Unsigned Crossed 16-bit Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UMUL16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal">UMULX16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do unsigned 16-bit multiplications and generate two 32-bit results simultaneously.</para><para><bold>RV32 Description</bold>:<linebreak/>
For the <computeroutput>UMUL16</computeroutput> instruction, multiply the top 16-bit U16 content of Rs1 with the top 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the bottom 16-bit U16 content of Rs2. For the <computeroutput>UMULX16</computeroutput> instruction, multiply the top 16-bit U16 content of Rs1 with the bottom 16-bit U16 content of Rs2. At the same time, multiply the bottom 16-bit U16 content of Rs1 with the top 16- bit U16 content of Rs2. The two U32 results are then written into an even/odd pair of registers specified by Rd(4,1). Rd(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the 32-bit result calculated from the top part of Rs1 and the even <computeroutput>2d</computeroutput> register of the pair contains the 32-bit result calculated from the bottom part of Rs1.</para><para><bold>RV64 Description</bold>:<linebreak/>
For the <computeroutput>UMUL16</computeroutput> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. For the <computeroutput>UMULX16</computeroutput> instruction, multiply the top 16-bit U16 content of the lower 32-bit word in Rs1 with the bottom 16-bit U16 content of the lower 32-bit word in Rs2. At the same time, multiply the bottom 16-bit U16 content of the lower 32-bit word in Rs1 with the top 16-bit U16 content of the lower 32-bit word in Rs2. The two 32-bit U32 results are then written into Rd. The result calculated from the top 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[1]. And the result calculated from the bottom 16-bit of the lower 32-bit word in Rs1 is written to Rd.W[0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>u*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">R[t_L]<sp/>=<sp/>resb;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMUL16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is<sp/>`UMULX16`)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1t<sp/>=<sp/>Rs1.H[1];<sp/>op2t<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>op1b<sp/>=<sp/>Rs1.H[0];<sp/>op2b<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>Rs1<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>aop<sp/>u*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[1]<sp/>=<sp/>rest;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[0]<sp/>=<sp/>resb;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12735" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12735" bodyend="12740"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga3024b858bfff004934d319dfa6b73102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URADD8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URADD8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URADD8 (SIMD 8-bit Unsigned Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer element additions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit unsigned integer elements in Rs1 with the 8-bit unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7F,<sp/>Rb<sp/>=<sp/>0x7F,<sp/>Rt<sp/>=<sp/>0x7F</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80,<sp/>Rb<sp/>=<sp/>0x80,<sp/>Rt<sp/>=<sp/>0x80</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x40,<sp/>Rb<sp/>=<sp/>0x80,<sp/>Rt<sp/>=<sp/>0x60</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>+<sp/>Rs2.B[x])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12782" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12782" bodyend="12787"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4bb70d87c28d883e2c4cdd71671076e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URADD16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URADD16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URADD16 (SIMD 16-bit Unsigned Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element additions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit unsigned integer elements in Rs1 with the 16-bit unsigned integer elements in Rs2. The results are first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFF,<sp/>Rb<sp/>=<sp/>0x7FFF<sp/>Rt<sp/>=<sp/>0x7FFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x8000,<sp/>Rb<sp/>=<sp/>0x8000<sp/>Rt<sp/>=<sp/>0x8000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x4000,<sp/>Rb<sp/>=<sp/>0x8000<sp/>Rt<sp/>=<sp/>0x6000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>+<sp/>Rs2.H[x])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12829" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12829" bodyend="12834"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8458d1a5a3564b122ebe6b84115877e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_URADD64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_URADD64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URADD64 (64-bit Unsigned Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit unsigned integers. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1). The 64-bit addition result is first logically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned integer Rs2. The 64-bit addition result is first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rt(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Ra(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rb(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>+<sp/>Rs2)<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12881" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12881" bodyend="12886"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad8c7e0a31ab014db941c83a0a704da8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URADDW</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_URADDW</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URADDW (32-bit Unsigned Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URADDW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add 32-bit unsigned integers and the results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the first 32-bit unsigned integer in Rs1 with the first 32-bit unsigned integer in Rs2. The result is first logically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFFFFFF,<sp/>Rb<sp/>=<sp/>0x7FFFFFFF<sp/>Rt<sp/>=<sp/>0x7FFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80000000,<sp/>Rb<sp/>=<sp/>0x80000000<sp/>Rt<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x40000000,<sp/>Rb<sp/>=<sp/>0x80000000<sp/>Rt<sp/>=<sp/>0x60000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>+<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12929" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12929" bodyend="12934"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga50231b389038f448ea1eb29b45c90b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URCRAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URCRAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URCRAS16 (SIMD 16-bit Unsigned Halving Cross Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URCRAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element addition and 16-bit unsigned integer element subtraction in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs1. The element results are first logically right-shifted by 1 bit and then written to [31:16] of 32- bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`URADD16`<sp/>and<sp/>`URSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][15:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][31:16])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12978" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12978" bodyend="12983"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gad4abe7a167aebc8b921be0e901c59f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URCRSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URCRSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URCRSA16 (SIMD 16-bit Unsigned Halving Cross Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URCRSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element subtraction and 16-bit unsigned integer element addition in a 32-bit chunk simultaneously. Operands are from crossed positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2. The two results are first logically right-shifted by 1 bit and then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`URADD16`<sp/>and<sp/>`URSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][15:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][31:16])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13027" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13027" bodyend="13032"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga972d51a1eebdd2a479b549286a2d8d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URSTAS16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URSTAS16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSTAS16 (SIMD 16-bit Unsigned Halving Straight Addition &amp; Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSTAS16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element addition and 16-bit unsigned integer element subtraction in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2, and subtracts the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs1. The element results are first logically right-shifted by 1 bit and then written to [31:16] of 32- bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`URADD16`<sp/>and<sp/>`URSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>+<sp/>Rs2.W[x][31:16])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>-<sp/>Rs2.W[x][15:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13076" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13076" bodyend="13081"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gadacb909a5ebc2d520bec4f86c0467a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URSTSA16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URSTSA16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSTSA16 (SIMD 16-bit Unsigned Halving Straight Subtraction &amp; Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URCRSA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element subtraction and 16-bit unsigned integer element addition in a 32-bit chunk simultaneously. Operands are from corresponding positions in 32-bit chunks. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs2 from the 16-bit unsigned integer in [31:16] of 32-bit chunks in Rs1, and adds the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs1 with the 16-bit unsigned integer in [15:0] of 32-bit chunks in Rs2. The two results are first logically right-shifted by 1 bit and then written to [31:16] of 32-bit chunks in Rd and [15:0] of 32-bit chunks in Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Please<sp/>see<sp/>`URADD16`<sp/>and<sp/>`URSUB16`<sp/>instructions.</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:16]<sp/>=<sp/>(Rs1.W[x][31:16]<sp/>-<sp/>Rs2.W[x][31:16])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x][15:0]<sp/>=<sp/>(Rs1.W[x][15:0]<sp/>+<sp/>Rs2.W[x][15:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64,<sp/>x=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13125" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13125" bodyend="13130"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae016aa9f76f26a0e5ce7d3a0120e8afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URSUB8</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URSUB8</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSUB8 (SIMD 8-bit Unsigned Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit unsigned integer element subtractions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit unsigned integer elements in Rs2 from the 8-bit unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7F,<sp/>Rb<sp/>=<sp/>0x80<sp/>Rt<sp/>=<sp/>0xFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80,<sp/>Rb<sp/>=<sp/>0x7F<sp/>Rt<sp/>=<sp/>0x00</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80,<sp/>Rb<sp/>=<sp/>0x40<sp/>Rt<sp/>=<sp/>0x20</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>(Rs1.B[x]<sp/>-<sp/>Rs2.B[x])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=7...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13172" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13172" bodyend="13177"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga34716b9076a8f42d4001047705447f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URSUB16</definition>
        <argsstring>(unsigned long a, unsigned long b)</argsstring>
        <name>__RV_URSUB16</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSUB16 (SIMD 16-bit Unsigned Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit unsigned integer element subtractions simultaneously. The results are halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit unsigned integer elements in Rs2 from the 16-bit unsigned integer elements in Rs1. The results are first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFF,<sp/>Rb<sp/>=<sp/>0x8000<sp/>Rt<sp/>=<sp/>0xFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x8000,<sp/>Rb<sp/>=<sp/>0x7FFF<sp/>Rt<sp/>=<sp/>0x0000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x8000,<sp/>Rb<sp/>=<sp/>0x4000<sp/>Rt<sp/>=<sp/>0x2000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>(Rs1.H[x]<sp/>-<sp/>Rs2.H[x])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=1...0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>x=3...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13219" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13219" bodyend="13224"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gabe20856e2f82d33c17ce4963ee2db286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_URSUB64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_URSUB64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSUB64 (64-bit Unsigned Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit unsigned integer subtraction. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1). The subtraction result is first logically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer in Rs2 from the 64-bit unsigned integer in Rs1. The subtraction result is first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rt(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Ra(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rb(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>-<sp/>Rs2)<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13273" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13273" bodyend="13278"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gaf80c041da49050e0469a6e945f5df1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_URSUBW</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_URSUBW</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSUBW (32-bit Unsigned Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSUBW<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract 32-bit unsigned integers and the result is halved to avoid overflow or saturation.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the first 32-bit signed integer in Rs2 from the first 32-bit signed integer in Rs1. The result is first logically right-shifted by 1 bit and then sign-extended and written to Rd.</para><para><bold>Examples</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x7FFFFFFF,<sp/>Rb<sp/>=<sp/>0x80000000<sp/>Rt<sp/>=<sp/>0xFFFFFFFF</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80000000,<sp/>Rb<sp/>=<sp/>0x7FFFFFFF<sp/>Rt<sp/>=<sp/>0x00000000</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ra<sp/>=<sp/>0x80000000,<sp/>Rb<sp/>=<sp/>0x40000000<sp/>Rt<sp/>=<sp/>0x20000000</highlight></codeline>
</programlisting></para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Rd[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">resw[31:0]<sp/>=<sp/>(Rs1[31:0]<sp/>-<sp/>Rs2[31:0])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">Rd[63:0]<sp/>=<sp/>SE(resw[31:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13321" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13321" bodyend="13326"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga336d44003e6037e4945a513994b5f601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_WEXTI</definition>
        <argsstring>(long long a, unsigned int b)</argsstring>
        <name>__RV_WEXTI</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>WEXTI (Extract Word from 64-bit Immediate) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">WEXTI<sp/>Rd,<sp/>Rs1,<sp/>#LSBloc</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or a register (RV64) starting from a specified immediate LSB bit position.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified by Rs1(4,1) starting from a specified immediate LSB bit position, #LSBloc. The extracted word is written to Rd. Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the 64-bit value and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the 64-bit value.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction extracts a 32-bit word from a 64-bit value in Rs1 starting from a specified immediate LSB bit position, #LSBloc. The extracted word is sign-extended and written to lower 32- bit of Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">src[63:0]<sp/>=<sp/>Concat(R[Idx1],<sp/>R[Idx0]);</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>src[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">ExtractW<sp/>=<sp/>Rs1[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(ExtractW)</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13374" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13374" bodyend="13379"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga92ce02b48c9b1f373c8b7e602c6bcc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_WEXT</definition>
        <argsstring>(long long a, unsigned int b)</argsstring>
        <name>__RV_WEXT</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>WEXT (Extract Word from 64-bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">WEXT<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Extract a 32-bit word from a 64-bit value stored in an even/odd pair of registers (RV32) or a register (RV64) starting from a specified LSB bit position in a register.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction extracts a 32-bit word from a 64-bit value of an even/odd pair of registers specified by Rs1(4,1) starting from a specified LSB bit position, specified in Rs2[4:0]. The extracted word is written to Rd. Rs1(4,1), i.e., d, determines the even/odd pair group of the two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the 64-bit value and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the 64-bit value.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">Idx0<sp/>=<sp/>CONCAT(Rs1(4,1),1</highlight><highlight class="stringliteral">&apos;b0);<sp/>Idx1<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;</highlight><highlight class="normal">b1);</highlight></codeline>
<codeline><highlight class="normal">src[63:0]<sp/>=<sp/>Concat(R[Idx1],<sp/>R[Idx0]);</highlight></codeline>
<codeline><highlight class="normal">LSBloc<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>src[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">LSBloc<sp/>=<sp/>Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal">ExtractW<sp/>=<sp/>Rs1[31+LSBloc:LSBloc];</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(ExtractW)</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13424" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13424" bodyend="13429"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0deca77382416530ac829ea0a18d36a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ZUNPKD810</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_ZUNPKD810</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>ZUNPKD810 (Unsigned Unpacking Bytes 1 &amp; 0) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ZUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>ZUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>ZE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>ZE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13470" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13470" bodyend="13475"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0a124400d7a60b3f860c73b2ef10f753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ZUNPKD820</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_ZUNPKD820</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>ZUNPKD820 (Unsigned Unpacking Bytes 2 &amp; 0) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ZUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>ZUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>ZE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>ZE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13516" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13516" bodyend="13521"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga2ffff9289e72fb5163731af36b82bd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ZUNPKD830</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_ZUNPKD830</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>ZUNPKD830 (Unsigned Unpacking Bytes 3 &amp; 0) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ZUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>ZUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>ZE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>ZE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13562" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13562" bodyend="13567"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga833374dc8db34294d48e728512a2068f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ZUNPKD831</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_ZUNPKD831</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>ZUNPKD831 (Unsigned Unpacking Bytes 3 &amp; 1) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ZUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>ZUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>ZE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>ZE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13608" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13608" bodyend="13613"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga7fdf5939f3c0be0a64c2659b930a9faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_ZUNPKD832</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_ZUNPKD832</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>ZUNPKD832 (Unsigned Unpacking Bytes 3 &amp; 2) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ZUNPKD8xy<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal">xy<sp/>=<sp/>{10,<sp/>20,<sp/>30,<sp/>31,<sp/>32}</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Unpack byte x and byte y of 32-bit chunks in a register into two 16-bit unsigned halfwords of 32-bit chunks in a register.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>ZUNPKD8(x)(*y*)</computeroutput> instruction, it unpacks byte <emphasis>x and byte y</emphasis> of 32-bit chunks in Rs1 into two 16-bit unsigned halfwords and writes the results to the top part and the bottom part of 32-bit chunks in Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[m].H[1]<sp/>=<sp/>ZE16(Rs1.W[m].B[x])</highlight></codeline>
<codeline><highlight class="normal">Rd.W[m].H[0]<sp/>=<sp/>ZE16(Rs1.W[m].B[y])</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD810,<sp/>x=1,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD820,<sp/>x=2,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD830,<sp/>x=3,y=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD831,<sp/>x=3,y=1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZUNPKD832,<sp/>x=3,y=2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>m=0,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV64:<sp/>m=1...0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13654" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13654" bodyend="13659"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga036660946bc3f379a731983caffca53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKHM8</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKHM8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKHM8 (64-bit SIMD Signed Saturating Q7 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKHM8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q7xQ7 element multiplications simultaneously. The Q14 results are then reduced to Q7 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>DKHM8</computeroutput> instruction, multiply the top 8-bit Q7 content of 16-bit chunks in Rs1 with the top 8-bit Q7 content of 16-bit chunks in Rs2. At the same time, multiply the bottom 8-bit Q7 content of 16-bit chunks in Rs1 with the bottom 8-bit Q7 content of 16-bit chunks in Rs2.</para><para>The Q14 results are then right-shifted 7-bits and saturated into Q7 values. The Q7 results are then written into Rd. When both the two Q7 inputs of a multiplication are 0x80, saturation will happen. The result will be saturated to 0x7F and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">op1t<sp/>=<sp/>Rs1.B[x+1];<sp/>op2t<sp/>=<sp/>Rs2.B[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">op1b<sp/>=<sp/>Rs1.B[x];<sp/>op2b<sp/>=<sp/>Rs2.B[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x80<sp/>!=<sp/>aop<sp/>|<sp/>0x80<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7F;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32,<sp/>x=0,2,4,6</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13715" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13715" bodyend="13720"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gae39257eb12a014d3059394217135b9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKHM16</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKHM16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKHM16 (64-bit SIMD Signed Saturating Q15 Multiply) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKHM16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do Q15xQ15 element multiplications simultaneously. The Q30 results are then reduced to Q15 numbers again.</para><para><bold>Description</bold>:<linebreak/>
For the <computeroutput>DKHM16</computeroutput> instruction, multiply the top 16-bit Q15 content of 32-bit chunks in Rs1 with the top 16-bit Q15 content of 32-bit chunks in Rs2. At the same time, multiply the bottom 16-bit Q15 content of 32-bit chunks in Rs1 with the bottom 16-bit Q15 content of 32-bit chunks in Rs2.</para><para>The Q30 results are then right-shifted 15-bits and saturated into Q15 values. The Q15 results are then written into Rd. When both the two Q15 inputs of a multiplication are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">op1t<sp/>=<sp/>Rs1.H[x+1];<sp/>op2t<sp/>=<sp/>Rs2.H[x+1];<sp/></highlight><highlight class="comment">//<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">op1b<sp/>=<sp/>Rs1.H[x];<sp/>op2b<sp/>=<sp/>Rs2.H[x];<sp/></highlight><highlight class="comment">//<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((aop,bop,res)<sp/>in<sp/>[(op1t,op2t,rest),<sp/>(op1b,op2b,resb)])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(aop<sp/>s*<sp/>bop)<sp/>&gt;&gt;<sp/>15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.W[x/2]<sp/>=<sp/>concat(rest,<sp/>resb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0,<sp/>2</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13770" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13770" bodyend="13775"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7279c1730c173384063a9bef9c986010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKABS8</definition>
        <argsstring>(unsigned long long a)</argsstring>
        <name>__RV_DKABS8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>DKABS8 (64-bit SIMD 8-bit Saturating Absolute) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKABS8<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of 8-bit signed integer elements simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of 8-bit signed integer elements stored in Rs1 and writes the element results to Rd. If the input number is 0x80, this instruction generates 0x7f as the output and sets the OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0x7f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[7]<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-src;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13815" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13815" bodyend="13820"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7d5691b06128c42939278415561c2dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKABS16</definition>
        <argsstring>(unsigned long long a)</argsstring>
        <name>__RV_DKABS16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>DKABS16 (64-bit SIMD 16-bit Saturating Absolute) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKABS16<sp/>Rd,<sp/>Rs1</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Get the absolute value of 16-bit signed integer elements simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction calculates the absolute value of 16-bit signed integer elements stored in Rs1 and writes the element results to Rd. If the input number is 0x8000, this instruction generates 0x7fff as the output and sets the OV bit to 1.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">src<sp/>=<sp/>Rs1.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src<sp/>==<sp/>0x8000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>0x7fff;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[15]<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src<sp/>=<sp/>-src;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>src;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13860" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13860" bodyend="13865"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga0f7b1184bde378bc5ae6e23f155ecb89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSLRA8</definition>
        <argsstring>(unsigned long long a, int b)</argsstring>
        <name>__RV_DKSLRA8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSLRA8 (64-bit SIMD 8-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSLRA8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q7 saturation for the left shift.</para><para><bold>Description</bold>:<linebreak/>
The 8-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[3:0]. Rs2[3:0] is in the signed range of [-2^3, 2^3-1]. A positive Rs2[3:0] means logical left shift and a negative Rs2[3:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[3:0]. However, the behavior of <computeroutput>Rs2[3:0]==-2^3 (0x8)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[3:0]==-(2^3-1) (0x9)</computeroutput>. The left-shifted results are saturated to the 8-bit signed integer range of [-2^7, 2^7-1]. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:4] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[3:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>8)?<sp/>7<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>SE8(Rs1.B[x][7:sa]);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[2:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(7+sa):0]<sp/>=<sp/>Rs1.B[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x7f;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[7:0]<sp/>=<sp/>0x80;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.B[x]<sp/>=<sp/>res[7:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13918" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13918" bodyend="13923"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1b02a9f2e52abd456bfdadc1dac9e188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSLRA16</definition>
        <argsstring>(unsigned long long a, int b)</argsstring>
        <name>__RV_DKSLRA16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSLRA16 (64-bit SIMD 16-bit Shift Left Logical with Saturation or Shift Right Arithmetic) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSLRA16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit elements logical left (positive) or arithmetic right (negative) shift operation with Q15 saturation for the left shift.</para><para><bold>Description</bold>:<linebreak/>
The 16-bit data elements of Rs1 are left-shifted logically or right-shifted arithmetically based on the value of Rs2[4:0]. Rs2[4:0] is in the signed range of [-2^4, 2^4-1]. A positive Rs2[4:0] means logical left shift and a negative Rs2[4:0] means arithmetic right shift. The shift amount is the absolute value of Rs2[4:0]. However, the behavior of <computeroutput>Rs2[4:0]==-2^4 (0x10)</computeroutput> is defined to be equivalent to the behavior of <computeroutput>Rs2[4:0]==-(2^4-1) (0x11)</computeroutput>. The left-shifted results are saturated to the 16-bit signed integer range of [-2^15, 2^15-1]. After the shift, saturation, or rounding, the final results are written to Rd. If any saturation happens, this instruction sets the OV flag. The value of Rs2[31:5] will not affect this instruction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rs2[4:0]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>-Rs2[4:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>(sa<sp/>==<sp/>16)?<sp/>15<sp/>:<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rd.H[x]<sp/>=<sp/>SE16(Rs1.H[x][15:sa]);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sa<sp/>=<sp/>Rs2[3:0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[(15+sa):0]<sp/>=<sp/>Rs1.H[x]<sp/>&lt;&lt;(logic)<sp/>sa;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x7fff;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res[15:0]<sp/>=<sp/>0x8000;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>d.H[x]<sp/>=<sp/>res[15:0];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="13977" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13977" bodyend="13982"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7f2598c19678a959960b6c6d3379e465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKADD8</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKADD8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKADD8 (64-bit SIMD 8-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKADD8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 8-bit signed integer elements in Rs1 with the 8-bit signed integer elements in Rs2. If any of the results are beyond the Q7 number range (-2^7 &lt;= Q7 &lt;= 2^7-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>+<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>127)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>127;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-128)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-128;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14024" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14024" bodyend="14029"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaeb50cbc43674d8dd32e7455b6c25b394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKADD16</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKADD16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKADD16 (64-bit SIMD 16-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKADD16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer element saturating additions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction adds the 16-bit signed integer elements in Rs1 with the 16-bit signed integer elements in Rs2. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>+<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>32767)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>32767;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-32768)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-32768;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14071" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14071" bodyend="14076"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga5dbe06f7b351ff1477851894d6d0c927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSUB8</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKSUB8</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSUB8 (64-bit SIMD 8-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSUB8<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 8-bit signed elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 8-bit signed integer elements in Rs2 from the 8-bit signed integer elements in Rs1. If any of the results are beyond the Q7 number range (-2^7 &lt;= Q7 &lt;= 2^7-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.B[x]<sp/>-<sp/>Rs2.B[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^7)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^7)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^7)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.B[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=7...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14118" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14118" bodyend="14123"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaa5dfb634a380181e51e0636cb216fbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_DKSUB16</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_DKSUB16</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>DKSUB16 (64-bit SIMD 16-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: SIMD</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">DKSUB16<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>are<sp/>all<sp/>even/odd<sp/>pair<sp/>of<sp/>registers</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Do 16-bit signed integer elements saturating subtractions simultaneously.</para><para><bold>Description</bold>:<linebreak/>
This instruction subtracts the 16-bit signed integer elements in Rs2 from the 16-bit signed integer elements in Rs1. If any of the results are beyond the Q15 number range (-2^15 &lt;= Q15 &lt;= 2^15-1), they are saturated to the range and the OV bit is set to 1. The saturated results are written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">res[x]<sp/>=<sp/>Rs1.H[x]<sp/>-<sp/>Rs2.H[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res[x]<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[x]<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd.H[x]<sp/>=<sp/>res[x];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=3...0,</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14166" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14166" bodyend="14171"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1bdbaa4714d2052c162a076e676f4ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD80</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD80</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD80 (Expand and Copy Byte 0 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD80<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[0][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[0][7:0],<sp/>Rs1.B[0][7:0],<sp/>Rs1.B[0][7:0],<sp/>Rs1.B[0][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14201" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14201" bodyend="14206"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gad690c697580b52820282c03d6a6567c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD81</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD81</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD81 (Expand and Copy Byte 1 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD81<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[1][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[1][7:0],<sp/>Rs1.B[1][7:0],<sp/>Rs1.B[1][7:0],<sp/>Rs1.B[1][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14236" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14236" bodyend="14241"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gafc4a523cfa64150d691bdc5d7d038810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD82</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD82</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD82 (Expand and Copy Byte 2 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD82<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[2][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[2][7:0],<sp/>Rs1.B[2][7:0],<sp/>Rs1.B[2][7:0],<sp/>Rs1.B[2][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14271" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14271" bodyend="14276"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga6d8dce49013b778d0290cd057cf45dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_EXPD83</definition>
        <argsstring>(unsigned long a)</argsstring>
        <name>__RV_EXPD83</name>
        <param>
          <type>unsigned long</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>EXPD83 (Expand and Copy Byte 3 to 32bit) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">EXPD83<sp/>Rd,<sp/>Rs1</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Copy 8-bit data from 32-bit chunks into 4 bytes in a register.</para><para><bold>Description</bold>:<linebreak/>
Moves Rs1.B[3][7:0] to Rd.[0][7:0], Rd.[1][7:0], Rd.[2][7:0], Rd.[3][7:0]</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">Rd.W[x][31:0]<sp/>=<sp/>CONCAT(Rs1.B[3][7:0],<sp/>Rs1.B[3][7:0],<sp/>Rs1.B[3][7:0],<sp/>Rs1.B[3][7:0]);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>RV32:<sp/>x=0</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="14306" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="14306" bodyend="14311"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>DSP feature API header file for Nuclei N/NX Core. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CORE_FEATURE_DSP__</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__CORE_FEATURE_DSP__</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>DSP<sp/>Feature<sp/>Configuration<sp/>Macro:</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>1.<sp/>__DSP_PRESENT:<sp/><sp/>Define<sp/>whether<sp/>Digital<sp/>Signal<sp/>Processing<sp/>Unit(DSP)<sp/>is<sp/>present<sp/>or<sp/>not</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>0:<sp/>Not<sp/>present</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>1:<sp/>Present</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__DSP_PRESENT)<sp/>&amp;&amp;<sp/>(__DSP_PRESENT<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###########################<sp/><sp/>CPU<sp/>SIMD<sp/>DSP<sp/>Intrinsic<sp/>Functions<sp/>###########################<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_DSP_Intrinsic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.1.<sp/>ADD8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="360" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga502647bb2462e3bb724ba292a16e62ef" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga502647bb2462e3bb724ba292a16e62ef" kindref="member">__RV_ADD8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;add8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.1.<sp/>ADD8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.2.<sp/>ADD16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="401" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gacacca4e304ad42fc68a96c785f2a0b69" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gacacca4e304ad42fc68a96c785f2a0b69" kindref="member">__RV_ADD16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;add16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.2.<sp/>ADD16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.3.<sp/>ADD64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="454" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga886e1cf9d61d72c7b6028f2e58ad9f5d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga886e1cf9d61d72c7b6028f2e58ad9f5d" kindref="member">__RV_ADD64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;add64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.3.<sp/>ADD64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.4.<sp/>AVE<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="493" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga3a4b869f2df434f7e9f3f35e79715c6c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga3a4b869f2df434f7e9f3f35e79715c6c" kindref="member">__RV_AVE</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ave<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.4.<sp/>AVE<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.5.<sp/>BITREV<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="534" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f" kindref="member">__RV_BITREV</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;bitrev<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.5.<sp/>BITREV<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.6.<sp/>BITREVI<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="576" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga08cd4064dbe07a8f27e148434f55b3b5" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga08cd4064dbe07a8f27e148434f55b3b5" kindref="member">__RV_BITREVI</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;bitrevi<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.6.<sp/>BITREVI<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.7.<sp/>BPICK<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="616" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0e9da2de29b3f47f38a315ca8f3e5f18" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga0e9da2de29b3f47f38a315ca8f3e5f18" kindref="member">__RV_BPICK</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;bpick<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.7.<sp/>BPICK<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.8.<sp/>CLROV<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="641" refid="group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1ga0198a8fa03f62716f0b4d0cec311dfd2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1ga0198a8fa03f62716f0b4d0cec311dfd2" kindref="member">__RV_CLROV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clrov<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.8.<sp/>CLROV<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.9.<sp/>CLRS8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="686" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga439f0189dfb52d89887cd8905d4f5695" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga439f0189dfb52d89887cd8905d4f5695" kindref="member">__RV_CLRS8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clrs8<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.9.<sp/>CLRS8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.10.<sp/>CLRS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="733" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga368e2f49b0007ec1776f04ba5a850226" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga368e2f49b0007ec1776f04ba5a850226" kindref="member">__RV_CLRS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clrs16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.10.<sp/>CLRS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.11.<sp/>CLRS32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="780" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4f68c42f5bf770045469f5cc5b8dd80c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4f68c42f5bf770045469f5cc5b8dd80c" kindref="member">__RV_CLRS32</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clrs32<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.11.<sp/>CLRS32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.12.<sp/>CLO8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="827" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaf9e26b273480fb62dd48b315270fb3d1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaf9e26b273480fb62dd48b315270fb3d1" kindref="member">__RV_CLO8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clo8<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.12.<sp/>CLO8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.13.<sp/>CLO16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="874" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga00c822eb5d2a5b1ff5bc88790a43103c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga00c822eb5d2a5b1ff5bc88790a43103c" kindref="member">__RV_CLO16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clo16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.13.<sp/>CLO16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.14.<sp/>CLO32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="921" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga9a3bb8538cb1c67d747dbcf77d50b1f0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga9a3bb8538cb1c67d747dbcf77d50b1f0" kindref="member">__RV_CLO32</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clo32<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.14.<sp/>CLO32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.15.<sp/>CLZ8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="968" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gac034821a27f8ab322a689b24ce1257a0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gac034821a27f8ab322a689b24ce1257a0" kindref="member">__RV_CLZ8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clz8<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.15.<sp/>CLZ8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.16.<sp/>CLZ16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1015" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga862e937fdf95c754472d41ab2df392f2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga862e937fdf95c754472d41ab2df392f2" kindref="member">__RV_CLZ16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clz16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.16.<sp/>CLZ16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.17.<sp/>CLZ32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1062" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga5250b89ea0959cf4f02534c5cd30b79c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga5250b89ea0959cf4f02534c5cd30b79c" kindref="member">__RV_CLZ32</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;clz32<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.17.<sp/>CLZ32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.18.<sp/>CMPEQ8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1104" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1gaf3b7bef50684b91cf3b8de6045ea9579" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1gaf3b7bef50684b91cf3b8de6045ea9579" kindref="member">__RV_CMPEQ8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;cmpeq8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.18.<sp/>CMPEQ8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.19.<sp/>CMPEQ16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1146" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga751703d59ea5e8737f21ba152f348293" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga751703d59ea5e8737f21ba152f348293" kindref="member">__RV_CMPEQ16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;cmpeq16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.19.<sp/>CMPEQ16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.20.<sp/>CRAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1192" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga96746dfb052a196b65217708b3d31bd8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga96746dfb052a196b65217708b3d31bd8" kindref="member">__RV_CRAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;cras16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.20.<sp/>CRAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.21.<sp/>CRSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1238" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabbbc32ee11e188a042cd6f4bae5ae8ed" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabbbc32ee11e188a042cd6f4bae5ae8ed" kindref="member">__RV_CRSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;crsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.21.<sp/>CRSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.22.<sp/>INSB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1278" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga766a420ef985764c0d0d8bcc2eb66e36" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga766a420ef985764c0d0d8bcc2eb66e36" kindref="member">__RV_INSB</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;insb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.22.<sp/>INSB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.23.<sp/>KABS8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1322" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga0316d69cb7b16fe8571d11d53af50918" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga0316d69cb7b16fe8571d11d53af50918" kindref="member">__RV_KABS8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kabs8<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.23.<sp/>KABS8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.24.<sp/>KABS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1367" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga2144ee330b7d084593a38bc98919399c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga2144ee330b7d084593a38bc98919399c" kindref="member">__RV_KABS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kabs16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.24.<sp/>KABS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.25.<sp/>KABSW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1414" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1bdcf3e62c9328169f9052c3e01a0fd1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1bdcf3e62c9328169f9052c3e01a0fd1" kindref="member">__RV_KABSW</ref>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kabsw<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.25.<sp/>KABSW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.26.<sp/>KADD8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1461" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga64622c4cea6b25708edcf53511ac2846" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga64622c4cea6b25708edcf53511ac2846" kindref="member">__RV_KADD8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.26.<sp/>KADD8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.27.<sp/>KADD16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1508" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae514ac0875046449b9d45cd277d85063" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae514ac0875046449b9d45cd277d85063" kindref="member">__RV_KADD16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.27.<sp/>KADD16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.28.<sp/>KADD64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1574" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gace8675089dafa59f5ba9114232ffe31d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gace8675089dafa59f5ba9114232ffe31d" kindref="member">__RV_KADD64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kadd64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.28.<sp/>KADD64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.29.<sp/>KADDH<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1621" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga3d272c3c6988c3c1c76ed6f5896c008e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga3d272c3c6988c3c1c76ed6f5896c008e" kindref="member">__RV_KADDH</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kaddh<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.29.<sp/>KADDH<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.30.<sp/>KADDW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1669" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9faead3db3c1ffb6a8566719b1f46ffa" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9faead3db3c1ffb6a8566719b1f46ffa" kindref="member">__RV_KADDW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kaddw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.30.<sp/>KADDW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.31.<sp/>KCRAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1726" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabeee05c8c6965fc9955a62121324992c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabeee05c8c6965fc9955a62121324992c" kindref="member">__RV_KCRAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kcras16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.31.<sp/>KCRAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.32.<sp/>KCRSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1783" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga506f2d59400875aba65112bc6563fb08" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga506f2d59400875aba65112bc6563fb08" kindref="member">__RV_KCRSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kcrsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.32.<sp/>KCRSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.33.1.<sp/>KDMBB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1838" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga7e18b0f1cd5e9110bbb38a058eb01d97" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga7e18b0f1cd5e9110bbb38a058eb01d97" kindref="member">__RV_KDMBB</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kdmbb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.33.1.<sp/>KDMBB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.33.2.<sp/>KDMBT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1893" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga067179bedfe1e3e48bbd8df87bed48dc" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga067179bedfe1e3e48bbd8df87bed48dc" kindref="member">__RV_KDMBT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kdmbt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.33.2.<sp/>KDMBT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.33.3.<sp/>KDMTT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="1948" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gaeac5ef72f33c8014a3f045587046c5de" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gaeac5ef72f33c8014a3f045587046c5de" kindref="member">__RV_KDMTT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kdmtt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.33.3.<sp/>KDMTT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.34.1.<sp/>KDMABB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2013" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1dfb3b7d81e19adc86e14e98971f3e42" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga1dfb3b7d81e19adc86e14e98971f3e42" kindref="member">__RV_KDMABB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kdmabb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.34.1.<sp/>KDMABB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.34.2.<sp/>KDMABT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2077" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga15d10fbf27043451ffe312f61a7356d0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga15d10fbf27043451ffe312f61a7356d0" kindref="member">__RV_KDMABT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kdmabt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.34.2.<sp/>KDMABT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.34.3.<sp/>KDMATT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2141" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga64a75e6b0aecedf02afd2df4458a6ee1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga64a75e6b0aecedf02afd2df4458a6ee1" kindref="member">__RV_KDMATT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kdmatt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.34.3.<sp/>KDMATT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.35.1.<sp/>KHM8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2202" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga4e14ca16506e0e4190fe003aba01d90f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga4e14ca16506e0e4190fe003aba01d90f" kindref="member">__RV_KHM8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khm8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.35.1.<sp/>KHM8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.35.2.<sp/>KHMX8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2264" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga147c294001e28791aaf5d757add3ff29" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga147c294001e28791aaf5d757add3ff29" kindref="member">__RV_KHMX8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khmx8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.35.2.<sp/>KHMX8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.36.1.<sp/>KHM16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2327" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga4d6124229f1e4e1bef085b9a1fad5414" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga4d6124229f1e4e1bef085b9a1fad5414" kindref="member">__RV_KHM16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khm16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.36.1.<sp/>KHM16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.36.2.<sp/>KHMX16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2390" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga99ca71b2ac7b14ff937d4ca9946be3d3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga99ca71b2ac7b14ff937d4ca9946be3d3" kindref="member">__RV_KHMX16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khmx16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.36.2.<sp/>KHMX16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.37.1.<sp/>KHMBB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2443" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga26af5537e6aca0133b66832596728a8e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga26af5537e6aca0133b66832596728a8e" kindref="member">__RV_KHMBB</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khmbb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.37.1.<sp/>KHMBB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.37.2.<sp/>KHMBT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2496" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga96e244df43ec32a722a3562a0a59a6a6" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga96e244df43ec32a722a3562a0a59a6a6" kindref="member">__RV_KHMBT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khmbt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.37.2.<sp/>KHMBT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.37.3.<sp/>KHMTT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2549" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga06a6deed6954a496ac381758e067e850" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga06a6deed6954a496ac381758e067e850" kindref="member">__RV_KHMTT</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;khmtt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.37.3.<sp/>KHMTT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.38.1.<sp/>KMABB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2613" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3a415f9cbeefb992bc791099e73c8794" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3a415f9cbeefb992bc791099e73c8794" kindref="member">__RV_KMABB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmabb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.38.1.<sp/>KMABB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.38.2.<sp/>KMABT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2676" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3fe17f8a2e70a69f1751a1c0093c3158" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3fe17f8a2e70a69f1751a1c0093c3158" kindref="member">__RV_KMABT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmabt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.38.2.<sp/>KMABT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.38.3.<sp/>KMATT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2739" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gad6267dd09022516bcd77ce742b8b40ab" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gad6267dd09022516bcd77ce742b8b40ab" kindref="member">__RV_KMATT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmatt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.38.3.<sp/>KMATT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.39.1.<sp/>KMADA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2803" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga84ab72987eeee69e2392965d8d8944f4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga84ab72987eeee69e2392965d8d8944f4" kindref="member">__RV_KMADA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmada<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.39.1.<sp/>KMADA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.39.2.<sp/>KMAXDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2867" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga1cab84ebee0378b9c1069e17efdbfd69" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga1cab84ebee0378b9c1069e17efdbfd69" kindref="member">__RV_KMAXDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmaxda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.39.2.<sp/>KMAXDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.40.1.<sp/>KMADS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="2939" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6b9f5141c87a343051b03494705eeac8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6b9f5141c87a343051b03494705eeac8" kindref="member">__RV_KMADS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="2940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmads<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.40.1.<sp/>KMADS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.40.2.<sp/>KMADRS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3011" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga13576aa03f836be838f491fe7cc483d9" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga13576aa03f836be838f491fe7cc483d9" kindref="member">__RV_KMADRS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmadrs<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.40.2.<sp/>KMADRS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.40.3.<sp/>KMAXDS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3083" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga4649629156d0af6a2e64c30ae5bee381" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga4649629156d0af6a2e64c30ae5bee381" kindref="member">__RV_KMAXDS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmaxds<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.40.3.<sp/>KMAXDS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.41.<sp/>KMAR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3151" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga9033dac220a33b6a89c2fa0200534e48" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga9033dac220a33b6a89c2fa0200534e48" kindref="member">__RV_KMAR64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmar64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.41.<sp/>KMAR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.42.1.<sp/>KMDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3201" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2de43c62af85225d40c1ac4210640925" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2de43c62af85225d40c1ac4210640925" kindref="member">__RV_KMDA</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.42.1.<sp/>KMDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.42.2.<sp/>KMXDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3252" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga37c752d6151fb29b43b01b2dd8af55d6" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga37c752d6151fb29b43b01b2dd8af55d6" kindref="member">__RV_KMXDA</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmxda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.42.2.<sp/>KMXDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.43.1.<sp/>KMMAC<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3314" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gab418c1a557ddfedc1803594cb18fa293" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gab418c1a557ddfedc1803594cb18fa293" kindref="member">__RV_KMMAC</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmac<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.43.1.<sp/>KMMAC<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.43.2.<sp/>KMMAC.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3375" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga7d7e1eb9ab21e7f41722684804590f18" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga7d7e1eb9ab21e7f41722684804590f18" kindref="member">__RV_KMMAC_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmac.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.43.2.<sp/>KMMAC.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.44.1.<sp/>KMMAWB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3437" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga10e2d0cb6ee70c6e603ce425a74a9b8a" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga10e2d0cb6ee70c6e603ce425a74a9b8a" kindref="member">__RV_KMMAWB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.44.1.<sp/>KMMAWB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.44.2.<sp/>KMMAWB.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3499" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga6385e945e25b69987eb34e8e9e862bcf" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga6385e945e25b69987eb34e8e9e862bcf" kindref="member">__RV_KMMAWB_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawb.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.44.2.<sp/>KMMAWB.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.45.1.<sp/>KMMAWB2<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3567" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga19bd50c2b77b1749c9c63c64c1f5bb44" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga19bd50c2b77b1749c9c63c64c1f5bb44" kindref="member">__RV_KMMAWB2</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawb2<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.45.1.<sp/>KMMAWB2<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.45.2.<sp/>KMMAWB2.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3635" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gac281461b8f0907d2d0c1a922ca5e65b8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gac281461b8f0907d2d0c1a922ca5e65b8" kindref="member">__RV_KMMAWB2_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawb2.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.45.2.<sp/>KMMAWB2.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.46.1.<sp/>KMMAWT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3697" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga447a6dd6e573595ce930f8ba1ab135ca" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga447a6dd6e573595ce930f8ba1ab135ca" kindref="member">__RV_KMMAWT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.46.1.<sp/>KMMAWT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.46.2.<sp/>KMMAWT.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3759" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga480bf71de56eefe132ae06a9bdeaf203" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga480bf71de56eefe132ae06a9bdeaf203" kindref="member">__RV_KMMAWT_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawt.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.46.2.<sp/>KMMAWT.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.47.1.<sp/>KMMAWT2<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3827" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga60e15a6243014fd5b76b7cffa7275eb4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga60e15a6243014fd5b76b7cffa7275eb4" kindref="member">__RV_KMMAWT2</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawt2<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.47.1.<sp/>KMMAWT2<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.47.2.<sp/>KMMAWT2.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3895" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga30aa2050f5f50a26aedc28dfce398db8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga30aa2050f5f50a26aedc28dfce398db8" kindref="member">__RV_KMMAWT2_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmawt2.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.47.2.<sp/>KMMAWT2.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.48.1.<sp/>KMMSB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="3955" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga0e7c48c050ad2b2343ad2a8cf2e38ec3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga0e7c48c050ad2b2343ad2a8cf2e38ec3" kindref="member">__RV_KMMSB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="3956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmsb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="3959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.48.1.<sp/>KMMSB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.48.2.<sp/>KMMSB.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4015" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gae1c27f8ba264508b78a0de566dd18a9b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1gae1c27f8ba264508b78a0de566dd18a9b" kindref="member">__RV_KMMSB_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmsb.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.48.2.<sp/>KMMSB.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.49.1.<sp/>KMMWB2<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4070" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaaec865ab687a1764eb5b1e1f5603611d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaaec865ab687a1764eb5b1e1f5603611d" kindref="member">__RV_KMMWB2</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmwb2<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.49.1.<sp/>KMMWB2<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.49.2.<sp/>KMMWB2.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4126" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9f55b328152b5b5b840931b5415b2865" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9f55b328152b5b5b840931b5415b2865" kindref="member">__RV_KMMWB2_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmwb2.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.49.2.<sp/>KMMWB2.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.50.1.<sp/>KMMWT2<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4182" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaa83e41e92fe13e28b2509a0bf92224bf" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1gaa83e41e92fe13e28b2509a0bf92224bf" kindref="member">__RV_KMMWT2</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmwt2<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.50.1.<sp/>KMMWT2<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.50.2.<sp/>KMMWT2.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4238" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga1d59336d9cabde5ac5a646abcc0b25c9" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga1d59336d9cabde5ac5a646abcc0b25c9" kindref="member">__RV_KMMWT2_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmmwt2.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.50.2.<sp/>KMMWT2.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.51.1.<sp/>KMSDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4301" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3922fe2b6d47974c6bd85cba3f826b4b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga3922fe2b6d47974c6bd85cba3f826b4b" kindref="member">__RV_KMSDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmsda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.51.1.<sp/>KMSDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.51.2.<sp/>KMSXDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4363" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gaacebc28be147f66ab73162b37cc35ce0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gaacebc28be147f66ab73162b37cc35ce0" kindref="member">__RV_KMSXDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmsxda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.51.2.<sp/>KMSXDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.52.<sp/>KMSR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4431" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac89788561e034d44bea403fd22047a94" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac89788561e034d44bea403fd22047a94" kindref="member">__RV_KMSR64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kmsr64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.52.<sp/>KMSR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.53.<sp/>KSLLW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4478" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gab5dc82aa8b7514f882979a71d88fb154" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gab5dc82aa8b7514f882979a71d88fb154" kindref="member">__RV_KSLLW</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksllw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.53.<sp/>KSLLW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.54.<sp/>KSLLIW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4525" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gada4cef0c427d339f01f153c5d750dac3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gada4cef0c427d339f01f153c5d750dac3" kindref="member">__RV_KSLLIW</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslliw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.54.<sp/>KSLLIW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.55.<sp/>KSLL8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4578" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafed94424b7e8431a31632ac1f9097e35" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gafed94424b7e8431a31632ac1f9097e35" kindref="member">__RV_KSLL8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksll8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.55.<sp/>KSLL8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.56.<sp/>KSLLI8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4630" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gaed969114325f5e25f89114b7a26cdfe4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gaed969114325f5e25f89114b7a26cdfe4" kindref="member">__RV_KSLLI8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslli8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.56.<sp/>KSLLI8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4637"><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.57.<sp/>KSLL16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4683" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae0d8b0f00c558d5a7f1119b9d261779f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae0d8b0f00c558d5a7f1119b9d261779f" kindref="member">__RV_KSLL16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksll16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.57.<sp/>KSLL16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.58.<sp/>KSLLI16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4735" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga0c6a91d4acd34104ed5b47e48e910114" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga0c6a91d4acd34104ed5b47e48e910114" kindref="member">__RV_KSLLI16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslli16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.58.<sp/>KSLLI16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.59.1.<sp/>KSLRA8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4802" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga748809588c9a563b78102b3a4e7ae0f5" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga748809588c9a563b78102b3a4e7ae0f5" kindref="member">__RV_KSLRA8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslra8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.59.1.<sp/>KSLRA8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.59.2.<sp/>KSLRA8.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4869" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga5e46b6bd44f57528f3dd1a4f509fdb12" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga5e46b6bd44f57528f3dd1a4f509fdb12" kindref="member">__RV_KSLRA8_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslra8.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.59.2.<sp/>KSLRA8.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"></highlight></codeline>
<codeline lineno="4877"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.60.1.<sp/>KSLRA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="4936" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaa85a466f43c98b2a2b34dc19e9c8e9d2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaa85a466f43c98b2a2b34dc19e9c8e9d2" kindref="member">__RV_KSLRA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="4937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslra16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.60.1.<sp/>KSLRA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.60.2.<sp/>KSLRA16.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5003" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae5b84af52b3d277117a4ee509df1504d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gae5b84af52b3d277117a4ee509df1504d" kindref="member">__RV_KSLRA16_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslra16.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.60.2.<sp/>KSLRA16.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.61.<sp/>KSLRAW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5063" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga3a01ea385d7d505ab86f7db697567e5b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga3a01ea385d7d505ab86f7db697567e5b" kindref="member">__RV_KSLRAW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslraw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.61.<sp/>KSLRAW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.62.<sp/>KSLRAW.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5126" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9f23cd90864721f831fefd87acd4182e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga9f23cd90864721f831fefd87acd4182e" kindref="member">__RV_KSLRAW_U</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kslraw.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.62.<sp/>KSLRAW.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.63.<sp/>KSTAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5183" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5623725bde47550878158bc9a52dd0aa" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5623725bde47550878158bc9a52dd0aa" kindref="member">__RV_KSTAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kstas16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.63.<sp/>KSTAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.64.<sp/>KSTSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5240" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga8feffb9748de700f30a52c93302be55d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga8feffb9748de700f30a52c93302be55d" kindref="member">__RV_KSTSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kstsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.64.<sp/>KSTSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.65.<sp/>KSUB8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5287" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga872cc2823228c92d1004bd859af27147" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga872cc2823228c92d1004bd859af27147" kindref="member">__RV_KSUB8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.65.<sp/>KSUB8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.66.<sp/>KSUB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5335" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga062dbffd606488852b1e4aabcf6369b4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga062dbffd606488852b1e4aabcf6369b4" kindref="member">__RV_KSUB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.66.<sp/>KSUB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.67.<sp/>KSUB64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5401" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gad703720a47f05b3e322caffbcc45298a" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gad703720a47f05b3e322caffbcc45298a" kindref="member">__RV_KSUB64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksub64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.67.<sp/>KSUB64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.68.<sp/>KSUBH<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5448" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gae30012cd8914b62f2fb84236b138f54f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gae30012cd8914b62f2fb84236b138f54f" kindref="member">__RV_KSUBH</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksubh<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.68.<sp/>KSUBH<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5455"><highlight class="normal"></highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.69.<sp/>KSUBW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5496" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga2a28907bd6cda3a2caa1e2200eafaec3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga2a28907bd6cda3a2caa1e2200eafaec3" kindref="member">__RV_KSUBW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ksubw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.69.<sp/>KSUBW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"></highlight></codeline>
<codeline lineno="5504"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.70.1.<sp/>KWMMUL<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5552" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga37ef876bfb8f2a063dd2d6554086efe4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga37ef876bfb8f2a063dd2d6554086efe4" kindref="member">__RV_KWMMUL</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kwmmul<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.70.1.<sp/>KWMMUL<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight></codeline>
<codeline lineno="5560"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.70.2.<sp/>KWMMUL.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5608" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga5fc98cdba6f2dda6fc65d4c3a836c20f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga5fc98cdba6f2dda6fc65d4c3a836c20f" kindref="member">__RV_KWMMUL_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;kwmmul.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.70.2.<sp/>KWMMUL.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.71.<sp/>MADDR32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5654" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga1e5062cc77c31e898d6a85e7768a7b2d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga1e5062cc77c31e898d6a85e7768a7b2d" kindref="member">__RV_MADDR32</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;maddr32<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="5658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.71.<sp/>MADDR32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5660"><highlight class="normal"></highlight></codeline>
<codeline lineno="5661"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.72.<sp/>MAXW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5693" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga636b734793493bbcf7a61dfa55749e82" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga636b734793493bbcf7a61dfa55749e82" kindref="member">__RV_MAXW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;maxw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.72.<sp/>MAXW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.73.<sp/>MINW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5729" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga60a38a5ee2cab1dd916cf4745c86a77e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga60a38a5ee2cab1dd916cf4745c86a77e" kindref="member">__RV_MINW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;minw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.73.<sp/>MINW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.74.<sp/>MSUBR32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5776" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga8260760ab7c146507ec4507862534332" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga8260760ab7c146507ec4507862534332" kindref="member">__RV_MSUBR32</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;msubr32<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="5780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.74.<sp/>MSUBR32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"></highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.75.<sp/>MULR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5827" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gab76bac5299a9c41ce034594a704a126b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gab76bac5299a9c41ce034594a704a126b" kindref="member">__RV_MULR64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;mulr64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.75.<sp/>MULR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight></codeline>
<codeline lineno="5835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.76.<sp/>MULSR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5879" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga70bfdde5df211d5aa20cf406736d2ea1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga70bfdde5df211d5aa20cf406736d2ea1" kindref="member">__RV_MULSR64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;mulsr64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.76.<sp/>MULSR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5886"><highlight class="normal"></highlight></codeline>
<codeline lineno="5887"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.77.<sp/>PBSAD<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5918" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4d0a417bfde5846e13d2ae5a2da2dbb3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga4d0a417bfde5846e13d2ae5a2da2dbb3" kindref="member">__RV_PBSAD</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;pbsad<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.77.<sp/>PBSAD<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5925"><highlight class="normal"></highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.78.<sp/>PBSADA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="5960" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gab29c8817a341834901b676f1be7e6279" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1gab29c8817a341834901b676f1be7e6279" kindref="member">__RV_PBSADA</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="5961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;pbsada<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="5964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.78.<sp/>PBSADA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5966"><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.79.1.<sp/>PKBB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6010" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gabd698d8de29ab162d919a182b9c6779c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gabd698d8de29ab162d919a182b9c6779c" kindref="member">__RV_PKBB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;pkbb16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.79.1.<sp/>PKBB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"></highlight></codeline>
<codeline lineno="6018"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.79.2.<sp/>PKBT16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6061" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gaf10c9bb0704694903991a3a77e4134a1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gaf10c9bb0704694903991a3a77e4134a1" kindref="member">__RV_PKBT16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;pkbt16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.79.2.<sp/>PKBT16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6068"><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.79.3.<sp/>PKTT16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6112" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1ga2d33235fc87cd78798e5824e3b84054d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1ga2d33235fc87cd78798e5824e3b84054d" kindref="member">__RV_PKTT16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;pktt16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.79.3.<sp/>PKTT16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.79.4.<sp/>PKTB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6163" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gacb5418972db5061d6f993f3b4a3a131e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__PACK_1gacb5418972db5061d6f993f3b4a3a131e" kindref="member">__RV_PKTB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;pktb16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.79.4.<sp/>PKTB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6170"><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.80.<sp/>RADD8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6208" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga270f185315a2f3d5da8d14e9a89e716b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga270f185315a2f3d5da8d14e9a89e716b" kindref="member">__RV_RADD8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;radd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.80.<sp/>RADD8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6215"><highlight class="normal"></highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.81.<sp/>RADD16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6253" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga53762c95c79e336f330d308b64b4c40e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga53762c95c79e336f330d308b64b4c40e" kindref="member">__RV_RADD16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;radd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.81.<sp/>RADD16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6260"><highlight class="normal"></highlight></codeline>
<codeline lineno="6261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.82.<sp/>RADD64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6306" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga152f18d1ef922b3104cc763d00611511" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga152f18d1ef922b3104cc763d00611511" kindref="member">__RV_RADD64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;radd64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.82.<sp/>RADD64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6313"><highlight class="normal"></highlight></codeline>
<codeline lineno="6314"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.83.<sp/>RADDW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6354" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga162b41b571bd84dcd8860437417544dd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1ga162b41b571bd84dcd8860437417544dd" kindref="member">__RV_RADDW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;raddw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.83.<sp/>RADDW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"></highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.84.<sp/>RCRAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6403" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga425c896839da2d7162fd68f53a50a9f9" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga425c896839da2d7162fd68f53a50a9f9" kindref="member">__RV_RCRAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rcras16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.84.<sp/>RCRAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6410"><highlight class="normal"></highlight></codeline>
<codeline lineno="6411"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.85.<sp/>RCRSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6452" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga98d239e879270c5e4c8dd575e9cb6529" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga98d239e879270c5e4c8dd575e9cb6529" kindref="member">__RV_RCRSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rcrsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.85.<sp/>RCRSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6459"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.86.<sp/>RDOV<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6479" refid="group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1gaff8e2c883c492aff917d183ae7097535" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__OV__FLAG__SC_1gaff8e2c883c492aff917d183ae7097535" kindref="member">__RV_RDOV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rdov<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.86.<sp/>RDOV<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6486"><highlight class="normal"></highlight></codeline>
<codeline lineno="6487"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.87.<sp/>RSTAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6528" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaec8b94f14dfbcab9f1230e3d43047de9" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaec8b94f14dfbcab9f1230e3d43047de9" kindref="member">__RV_RSTAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rstas16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.87.<sp/>RSTAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6535"><highlight class="normal"></highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.88.<sp/>RSTSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6577" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaf9b70a84f1b52fd578ffe432f7bb0492" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaf9b70a84f1b52fd578ffe432f7bb0492" kindref="member">__RV_RSTSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rstsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.88.<sp/>RSTSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6584"><highlight class="normal"></highlight></codeline>
<codeline lineno="6585"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.89.<sp/>RSUB8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6624" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae3a2b016b3af39c178ef275c7e939bb3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae3a2b016b3af39c178ef275c7e939bb3" kindref="member">__RV_RSUB8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.89.<sp/>RSUB8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6631"><highlight class="normal"></highlight></codeline>
<codeline lineno="6632"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.90.<sp/>RSUB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6671" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabb7544dfa512a408384621aee3956fe0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gabb7544dfa512a408384621aee3956fe0" kindref="member">__RV_RSUB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.90.<sp/>RSUB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight></codeline>
<codeline lineno="6679"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.91.<sp/>RSUB64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6725" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gafc5f4bf4b712ae2559a30356fc9773a8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gafc5f4bf4b712ae2559a30356fc9773a8" kindref="member">__RV_RSUB64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rsub64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.91.<sp/>RSUB64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6732"><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.92.<sp/>RSUBW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6773" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad19388580ce1a2cc1afee60f9d73e60c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad19388580ce1a2cc1afee60f9d73e60c" kindref="member">__RV_RSUBW</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;rsubw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.92.<sp/>RSUBW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"></highlight></codeline>
<codeline lineno="6781"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.93.<sp/>SCLIP8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6821" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaa595d7e87e2f435c0ceb0e9d8c20ee97" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaa595d7e87e2f435c0ceb0e9d8c20ee97" kindref="member">__RV_SCLIP8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sclip8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.93.<sp/>SCLIP8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6828"><highlight class="normal"></highlight></codeline>
<codeline lineno="6829"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.94.<sp/>SCLIP16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6869" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga4025d5f632fcaa18a002c764daa577bd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga4025d5f632fcaa18a002c764daa577bd" kindref="member">__RV_SCLIP16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sclip16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.94.<sp/>SCLIP16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6876"><highlight class="normal"></highlight></codeline>
<codeline lineno="6877"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.95.<sp/>SCLIP32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6917" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga13e5f03af091994e769d38e5f5f3d7c7" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga13e5f03af091994e769d38e5f5f3d7c7" kindref="member">__RV_SCLIP32</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sclip32<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.95.<sp/>SCLIP32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6924"><highlight class="normal"></highlight></codeline>
<codeline lineno="6925"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.96.<sp/>SCMPLE8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6957" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga0b086037e48ff8891523b74b07154810" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga0b086037e48ff8891523b74b07154810" kindref="member">__RV_SCMPLE8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;scmple8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.96.<sp/>SCMPLE8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"></highlight></codeline>
<codeline lineno="6965"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.97.<sp/>SCMPLE16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="6997" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1gad86adb4c738c71d2b9c07e44fb02113c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1gad86adb4c738c71d2b9c07e44fb02113c" kindref="member">__RV_SCMPLE16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="6998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;scmple16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.97.<sp/>SCMPLE16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal"></highlight></codeline>
<codeline lineno="7005"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.98.<sp/>SCMPLT8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7036" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7a01ed10478504e9703dafdccc415ab6" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7a01ed10478504e9703dafdccc415ab6" kindref="member">__RV_SCMPLT8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;scmplt8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.98.<sp/>SCMPLT8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"></highlight></codeline>
<codeline lineno="7044"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.99.<sp/>SCMPLT16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7075" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga18887b352c5dbe9535424bee83bf7d42" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga18887b352c5dbe9535424bee83bf7d42" kindref="member">__RV_SCMPLT16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;scmplt16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.99.<sp/>SCMPLT16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.100.<sp/>SLL8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7116" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga99febdacba921c09aff588332a658fba" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga99febdacba921c09aff588332a658fba" kindref="member">__RV_SLL8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sll8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.100.<sp/>SLL8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7123"><highlight class="normal"></highlight></codeline>
<codeline lineno="7124"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.101.<sp/>SLLI8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7156" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac075fd65d3fa097d22a0a576c1fe65bd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac075fd65d3fa097d22a0a576c1fe65bd" kindref="member">__RV_SLLI8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;slli8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.101.<sp/>SLLI8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7163"><highlight class="normal"></highlight></codeline>
<codeline lineno="7164"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.102.<sp/>SLL16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7197" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga567ef612a72bcfbdc3a12a55bafb3b8c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga567ef612a72bcfbdc3a12a55bafb3b8c" kindref="member">__RV_SLL16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sll16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.102.<sp/>SLL16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"></highlight></codeline>
<codeline lineno="7205"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.103.<sp/>SLLI16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7237" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab06cdcffba110b801df98ee2208e4cc0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab06cdcffba110b801df98ee2208e4cc0" kindref="member">__RV_SLLI16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;slli16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.103.<sp/>SLLI16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7244"><highlight class="normal"></highlight></codeline>
<codeline lineno="7245"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.104.<sp/>SMAL<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7297" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga4161cf3c9857cbef8d23b6a8e09b49d2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga4161cf3c9857cbef8d23b6a8e09b49d2" kindref="member">__RV_SMAL</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smal<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.104.<sp/>SMAL<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7304"><highlight class="normal"></highlight></codeline>
<codeline lineno="7305"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.105.1.<sp/>SMALBB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7380" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaceb791bc1a33f08f2abc7c5ec16c1a8f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaceb791bc1a33f08f2abc7c5ec16c1a8f" kindref="member">__RV_SMALBB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smalbb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.105.1.<sp/>SMALBB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7386"><highlight class="normal"></highlight></codeline>
<codeline lineno="7387"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.105.2.<sp/>SMALBT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7462" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga74fe212140384150726143f2f43c900f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga74fe212140384150726143f2f43c900f" kindref="member">__RV_SMALBT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smalbt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.105.2.<sp/>SMALBT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.105.3.<sp/>SMALTT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7544" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga39331e38421eb5f882a615941cf00444" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga39331e38421eb5f882a615941cf00444" kindref="member">__RV_SMALTT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smaltt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.105.3.<sp/>SMALTT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7550"><highlight class="normal"></highlight></codeline>
<codeline lineno="7551"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.106.1.<sp/>SMALDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7628" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga8320e2679cb96ee46fcaf761925b8708" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga8320e2679cb96ee46fcaf761925b8708" kindref="member">__RV_SMALDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smalda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.106.1.<sp/>SMALDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7634"><highlight class="normal"></highlight></codeline>
<codeline lineno="7635"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.106.2.<sp/>SMALXDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7712" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga18e89f90f0b3e3d8c34ceb33b671a61b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga18e89f90f0b3e3d8c34ceb33b671a61b" kindref="member">__RV_SMALXDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smalxda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.106.2.<sp/>SMALXDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"></highlight></codeline>
<codeline lineno="7719"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.107.1.<sp/>SMALDS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7803" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga68b7e1927e142a46a1e3132a7e04b777" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga68b7e1927e142a46a1e3132a7e04b777" kindref="member">__RV_SMALDS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smalds<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.107.1.<sp/>SMALDS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7809"><highlight class="normal"></highlight></codeline>
<codeline lineno="7810"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.107.2.<sp/>SMALDRS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7894" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga9e334955371767a38c1e7069a42025c8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga9e334955371767a38c1e7069a42025c8" kindref="member">__RV_SMALDRS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smaldrs<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7899"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.107.2.<sp/>SMALDRS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7900"><highlight class="normal"></highlight></codeline>
<codeline lineno="7901"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.107.3.<sp/>SMALXDS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="7985" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaf31ec8bdff7f1f55254aaeb13979c70c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gaf31ec8bdff7f1f55254aaeb13979c70c" kindref="member">__RV_SMALXDS</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="7986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smalxds<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="7988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="7989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.107.3.<sp/>SMALXDS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7991"><highlight class="normal"></highlight></codeline>
<codeline lineno="7992"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.108.<sp/>SMAR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8037" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga89c1afcd9898226795ae2112d2fbea40" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga89c1afcd9898226795ae2112d2fbea40" kindref="member">__RV_SMAR64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smar64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="8041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8042"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.108.<sp/>SMAR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8043"><highlight class="normal"></highlight></codeline>
<codeline lineno="8044"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.109.<sp/>SMAQA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8081" refid="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga08927c1a80a7e90b4bf485ece9ff01f3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga08927c1a80a7e90b4bf485ece9ff01f3" kindref="member">__RV_SMAQA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smaqa<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="8085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8086"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.109.<sp/>SMAQA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8087"><highlight class="normal"></highlight></codeline>
<codeline lineno="8088"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.110.<sp/>SMAQA.SU<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8126" refid="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga7354acb478473376227c883968d8b78d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga7354acb478473376227c883968d8b78d" kindref="member">__RV_SMAQA_SU</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smaqa.su<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="8130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.110.<sp/>SMAQA.SU<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8132"><highlight class="normal"></highlight></codeline>
<codeline lineno="8133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.111.<sp/>SMAX8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8164" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafc3ca4c25f1796c6c129b0a72fdb4ddc" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafc3ca4c25f1796c6c129b0a72fdb4ddc" kindref="member">__RV_SMAX8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smax8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.111.<sp/>SMAX8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8171"><highlight class="normal"></highlight></codeline>
<codeline lineno="8172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.112.<sp/>SMAX16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8203" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga9fefb44ce69dae8452a1f78462b36ace" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga9fefb44ce69dae8452a1f78462b36ace" kindref="member">__RV_SMAX16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smax16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.112.<sp/>SMAX16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8210"><highlight class="normal"></highlight></codeline>
<codeline lineno="8211"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.113.1.<sp/>SMBB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8255" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6078c3498de77bbaeabbf7017fa023ab" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga6078c3498de77bbaeabbf7017fa023ab" kindref="member">__RV_SMBB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smbb16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.113.1.<sp/>SMBB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8262"><highlight class="normal"></highlight></codeline>
<codeline lineno="8263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.113.2.<sp/>SMBT16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8307" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2f8364cbb057b9952017ad1bd3230a5e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2f8364cbb057b9952017ad1bd3230a5e" kindref="member">__RV_SMBT16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smbt16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.113.2.<sp/>SMBT16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8314"><highlight class="normal"></highlight></codeline>
<codeline lineno="8315"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.113.3.<sp/>SMTT16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8359" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gab253cabd0fb5ac51b6b897cd3e8d6e0f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gab253cabd0fb5ac51b6b897cd3e8d6e0f" kindref="member">__RV_SMTT16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smtt16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8365"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.113.3.<sp/>SMTT16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8366"><highlight class="normal"></highlight></codeline>
<codeline lineno="8367"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.114.1.<sp/>SMDS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8418" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga056df0d47cc4dcef5739bb15f2a324ac" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga056df0d47cc4dcef5739bb15f2a324ac" kindref="member">__RV_SMDS</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smds<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8424"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.114.1.<sp/>SMDS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8425"><highlight class="normal"></highlight></codeline>
<codeline lineno="8426"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.114.2.<sp/>SMDRS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8477" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gafab251aa9c5e64dc004c9dc3b8c7c0dd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gafab251aa9c5e64dc004c9dc3b8c7c0dd" kindref="member">__RV_SMDRS</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smdrs<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.114.2.<sp/>SMDRS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8484"><highlight class="normal"></highlight></codeline>
<codeline lineno="8485"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.114.3.<sp/>SMXDS<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8536" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga45c60f7cb5ae0e2ddaeca68e0a76283b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga45c60f7cb5ae0e2ddaeca68e0a76283b" kindref="member">__RV_SMXDS</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smxds<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8542"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.114.3.<sp/>SMXDS<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8543"><highlight class="normal"></highlight></codeline>
<codeline lineno="8544"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.115.<sp/>SMIN8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8575" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga3b9ace3565fb4cea93a55736046498e7" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga3b9ace3565fb4cea93a55736046498e7" kindref="member">__RV_SMIN8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smin8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8581"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.115.<sp/>SMIN8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8582"><highlight class="normal"></highlight></codeline>
<codeline lineno="8583"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.116.<sp/>SMIN16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8614" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga5b8419c5f8c624d1a0e16c43efb798eb" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga5b8419c5f8c624d1a0e16c43efb798eb" kindref="member">__RV_SMIN16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smin16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8620"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.116.<sp/>SMIN16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8621"><highlight class="normal"></highlight></codeline>
<codeline lineno="8622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.117.1.<sp/>SMMUL<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8665" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga17b1cc8cce90ea3852050e9ec0b28795" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga17b1cc8cce90ea3852050e9ec0b28795" kindref="member">__RV_SMMUL</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smmul<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8671"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.117.1.<sp/>SMMUL<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8672"><highlight class="normal"></highlight></codeline>
<codeline lineno="8673"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.117.2.<sp/>SMMUL.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8716" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga18c56b42dfb546e0a39ee1a0554e6e0b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga18c56b42dfb546e0a39ee1a0554e6e0b" kindref="member">__RV_SMMUL_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smmul.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8722"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.117.2.<sp/>SMMUL.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8723"><highlight class="normal"></highlight></codeline>
<codeline lineno="8724"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.118.1.<sp/>SMMWB<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8766" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9842af8b6adf990ea70a5261e546a26c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga9842af8b6adf990ea70a5261e546a26c" kindref="member">__RV_SMMWB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smmwb<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8772"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.118.1.<sp/>SMMWB<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8773"><highlight class="normal"></highlight></codeline>
<codeline lineno="8774"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.118.2.<sp/>SMMWB.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8816" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga4b7617e39d73f38ac27a24644008aacd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga4b7617e39d73f38ac27a24644008aacd" kindref="member">__RV_SMMWB_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8819"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smmwb.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8822"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.118.2.<sp/>SMMWB.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8823"><highlight class="normal"></highlight></codeline>
<codeline lineno="8824"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.119.1.<sp/>SMMWT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8866" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga92298c74bc685e608de8c743f4348940" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga92298c74bc685e608de8c743f4348940" kindref="member">__RV_SMMWT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smmwt<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8872"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.119.1.<sp/>SMMWT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8873"><highlight class="normal"></highlight></codeline>
<codeline lineno="8874"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.119.2.<sp/>SMMWT.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8916" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga75f579bae285694b96c319bd0c0daffa" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X16__MAC_1ga75f579bae285694b96c319bd0c0daffa" kindref="member">__RV_SMMWT_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="8917"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smmwt.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="8920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.119.2.<sp/>SMMWT.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8923"><highlight class="normal"></highlight></codeline>
<codeline lineno="8924"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.120.1.<sp/>SMSLDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="8999" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gac49482a84d29e662acb7438c5821cc8b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gac49482a84d29e662acb7438c5821cc8b" kindref="member">__RV_SMSLDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smslda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="9003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9004"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.120.1.<sp/>SMSLDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9005"><highlight class="normal"></highlight></codeline>
<codeline lineno="9006"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.120.2.<sp/>SMSLXDA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9081" refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gad6cb1fab36698a107205e10b5ae71436" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1gad6cb1fab36698a107205e10b5ae71436" kindref="member">__RV_SMSLXDA</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smslxda<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="9085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9086"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.120.2.<sp/>SMSLXDA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9087"><highlight class="normal"></highlight></codeline>
<codeline lineno="9088"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.121.<sp/>SMSR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9134" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga97d5fc417db0b47d8ee805ef3eb9d8a2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga97d5fc417db0b47d8ee805ef3eb9d8a2" kindref="member">__RV_SMSR64</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smsr64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="9138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.121.<sp/>SMSR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9140"><highlight class="normal"></highlight></codeline>
<codeline lineno="9141"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.122.1.<sp/>SMUL8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9216" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gaa89f0815a309bf7e0c79c8ac9030c209" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gaa89f0815a309bf7e0c79c8ac9030c209" kindref="member">__RV_SMUL8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smul8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.122.1.<sp/>SMUL8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9223"><highlight class="normal"></highlight></codeline>
<codeline lineno="9224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.122.2.<sp/>SMULX8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9299" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga6960884895453cad6b8ac126b66ee892" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga6960884895453cad6b8ac126b66ee892" kindref="member">__RV_SMULX8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smulx8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9305"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.122.2.<sp/>SMULX8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9306"><highlight class="normal"></highlight></codeline>
<codeline lineno="9307"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.123.1.<sp/>SMUL16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9384" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1gad0ccc8d1d7b5b8c0c2b7133b7243dc91" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1gad0ccc8d1d7b5b8c0c2b7133b7243dc91" kindref="member">__RV_SMUL16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smul16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9390"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.123.1.<sp/>SMUL16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9391"><highlight class="normal"></highlight></codeline>
<codeline lineno="9392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.123.2.<sp/>SMULX16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9469" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga2eb023a945b38fad971202a788f3899c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga2eb023a945b38fad971202a788f3899c" kindref="member">__RV_SMULX16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;smulx16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9475"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.123.2.<sp/>SMULX16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9476"><highlight class="normal"></highlight></codeline>
<codeline lineno="9477"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.124.<sp/>SRA.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9523" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gac34824012cfe56f0a6fb9baf2fb1ba33" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gac34824012cfe56f0a6fb9baf2fb1ba33" kindref="member">__RV_SRA_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sra.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9529"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.124.<sp/>SRA.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9530"><highlight class="normal"></highlight></codeline>
<codeline lineno="9531"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.125.<sp/>SRAI.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9578" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga19fde10e69ceda8b79f4cba59c073654" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga19fde10e69ceda8b79f4cba59c073654" kindref="member">__RV_SRAI_U</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srai.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9584"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.125.<sp/>SRAI.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9585"><highlight class="normal"></highlight></codeline>
<codeline lineno="9586"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.126.1.<sp/>SRA8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9632" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60b24db284bacbf2ab9de45e0881b011" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60b24db284bacbf2ab9de45e0881b011" kindref="member">__RV_SRA8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sra8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9638"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.126.1.<sp/>SRA8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9639"><highlight class="normal"></highlight></codeline>
<codeline lineno="9640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.126.2.<sp/>SRA8.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9686" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gad6421547bda7f5c8b4ab42d0e771daf3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gad6421547bda7f5c8b4ab42d0e771daf3" kindref="member">__RV_SRA8_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sra8.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9692"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.126.2.<sp/>SRA8.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9693"><highlight class="normal"></highlight></codeline>
<codeline lineno="9694"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.127.1.<sp/>SRAI8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9739" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga06571f245615b47549624828befd354a" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga06571f245615b47549624828befd354a" kindref="member">__RV_SRAI8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srai8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9745"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.127.1.<sp/>SRAI8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9746"><highlight class="normal"></highlight></codeline>
<codeline lineno="9747"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.127.2.<sp/>SRAI8.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9792" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gaeccaed883c7e38bc8a277bdb1c8e899e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gaeccaed883c7e38bc8a277bdb1c8e899e" kindref="member">__RV_SRAI8_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srai8.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9798"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.127.2.<sp/>SRAI8.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9799"><highlight class="normal"></highlight></codeline>
<codeline lineno="9800"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.128.1.<sp/>SRA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9846" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab98c44f440802e210dd48403997977fa" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gab98c44f440802e210dd48403997977fa" kindref="member">__RV_SRA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sra16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9852"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.128.1.<sp/>SRA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9853"><highlight class="normal"></highlight></codeline>
<codeline lineno="9854"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.128.2.<sp/>SRA16.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9900" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga044ea66eee35c4d3ae3cb3d8e7aa3aa2" kindref="member">__RV_SRA16_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sra16.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9906"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.128.2.<sp/>SRA16.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9907"><highlight class="normal"></highlight></codeline>
<codeline lineno="9908"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.129.1.<sp/>SRAI16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="9954" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaffe133a900a4f69acef9ba2f6cafa2b9" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gaffe133a900a4f69acef9ba2f6cafa2b9" kindref="member">__RV_SRAI16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="9955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srai16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="9958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9960"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.129.1.<sp/>SRAI16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9961"><highlight class="normal"></highlight></codeline>
<codeline lineno="9962"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.129.2.<sp/>SRAI16.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10008" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gacd5b381585f2c53c1c791b1ade509e59" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gacd5b381585f2c53c1c791b1ade509e59" kindref="member">__RV_SRAI16_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srai16.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10014"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.129.2.<sp/>SRAI16.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10015"><highlight class="normal"></highlight></codeline>
<codeline lineno="10016"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.130.1.<sp/>SRL8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10061" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga2aae7328ef4464ec4ee58147b4c3be26" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga2aae7328ef4464ec4ee58147b4c3be26" kindref="member">__RV_SRL8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srl8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10067"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.130.1.<sp/>SRL8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10068"><highlight class="normal"></highlight></codeline>
<codeline lineno="10069"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.130.2.<sp/>SRL8.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10114" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60905852cd03af20f29f226cfe99b87c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga60905852cd03af20f29f226cfe99b87c" kindref="member">__RV_SRL8_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srl8.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10120"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.130.2.<sp/>SRL8.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10121"><highlight class="normal"></highlight></codeline>
<codeline lineno="10122"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.131.1.<sp/>SRLI8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10166" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac7b9034398a191996851f15691fe1e37" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1gac7b9034398a191996851f15691fe1e37" kindref="member">__RV_SRLI8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srli8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.131.1.<sp/>SRLI8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10173"><highlight class="normal"></highlight></codeline>
<codeline lineno="10174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.131.2.<sp/>SRLI8.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10218" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga868802b4622f92104c7d5467560825d7" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__SHIFT_1ga868802b4622f92104c7d5467560825d7" kindref="member">__RV_SRLI8_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srli8.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.131.2.<sp/>SRLI8.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10225"><highlight class="normal"></highlight></codeline>
<codeline lineno="10226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.132.1.<sp/>SRL16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10270" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gad077385854832151e700839fb03cfcfe" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gad077385854832151e700839fb03cfcfe" kindref="member">__RV_SRL16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srl16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.132.1.<sp/>SRL16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10277"><highlight class="normal"></highlight></codeline>
<codeline lineno="10278"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.132.2.<sp/>SRL16.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10322" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga9b9494b2d305f51510e789484cbfd60b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga9b9494b2d305f51510e789484cbfd60b" kindref="member">__RV_SRL16_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srl16.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10328"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.132.2.<sp/>SRL16.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10329"><highlight class="normal"></highlight></codeline>
<codeline lineno="10330"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.133.1.<sp/>SRLI16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10374" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gac7770810e1893581d9153635fc943107" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1gac7770810e1893581d9153635fc943107" kindref="member">__RV_SRLI16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srli16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10380"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.133.1.<sp/>SRLI16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10381"><highlight class="normal"></highlight></codeline>
<codeline lineno="10382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.133.2.<sp/>SRLI16.u<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10426" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga98ef01d7b5346045b83eaa411234d83f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__SHIFT_1ga98ef01d7b5346045b83eaa411234d83f" kindref="member">__RV_SRLI16_U</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;srli16.u<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10432"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.133.2.<sp/>SRLI16.u<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10433"><highlight class="normal"></highlight></codeline>
<codeline lineno="10434"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.134.<sp/>STAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10472" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gafdb722620fddf1c66759a8f46cd34a16" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gafdb722620fddf1c66759a8f46cd34a16" kindref="member">__RV_STAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;stas16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10478"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.134.<sp/>STAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10479"><highlight class="normal"></highlight></codeline>
<codeline lineno="10480"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.135.<sp/>STSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10518" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4c4ac88f3a4a3db0834b880ad8548543" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4c4ac88f3a4a3db0834b880ad8548543" kindref="member">__RV_STSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;stsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10524"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.135.<sp/>STSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10525"><highlight class="normal"></highlight></codeline>
<codeline lineno="10526"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.136.<sp/>SUB8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10559" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga9c75e931e8703babf9e8d29f6dfcf280" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga9c75e931e8703babf9e8d29f6dfcf280" kindref="member">__RV_SUB8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10565"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.136.<sp/>SUB8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10566"><highlight class="normal"></highlight></codeline>
<codeline lineno="10567"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.137.<sp/>SUB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10600" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga2ba13d5be91378558bac3add7c314a44" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga2ba13d5be91378558bac3add7c314a44" kindref="member">__RV_SUB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10606"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.137.<sp/>SUB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10607"><highlight class="normal"></highlight></codeline>
<codeline lineno="10608"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.138.<sp/>SUB64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10654" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga02ed3c841b85e58d5a40d78fa2f5519f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga02ed3c841b85e58d5a40d78fa2f5519f" kindref="member">__RV_SUB64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="10655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sub64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="10658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10660"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.138.<sp/>SUB64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10661"><highlight class="normal"></highlight></codeline>
<codeline lineno="10662"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.139.1.<sp/>SUNPKD810<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10700" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gaecdd51db17293a1d12d85a6bb0cd4abe" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gaecdd51db17293a1d12d85a6bb0cd4abe" kindref="member">__RV_SUNPKD810</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sunpkd810<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10706"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.139.1.<sp/>SUNPKD810<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10707"><highlight class="normal"></highlight></codeline>
<codeline lineno="10708"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.139.2.<sp/>SUNPKD820<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10746" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga922f7523e4d512fe391795edd7a81239" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga922f7523e4d512fe391795edd7a81239" kindref="member">__RV_SUNPKD820</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sunpkd820<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10752"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.139.2.<sp/>SUNPKD820<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10753"><highlight class="normal"></highlight></codeline>
<codeline lineno="10754"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.139.3.<sp/>SUNPKD830<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10792" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga8d213189a39651f3bcad77da2eb1f530" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga8d213189a39651f3bcad77da2eb1f530" kindref="member">__RV_SUNPKD830</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sunpkd830<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10798"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.139.3.<sp/>SUNPKD830<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10799"><highlight class="normal"></highlight></codeline>
<codeline lineno="10800"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.139.4.<sp/>SUNPKD831<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10838" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gad3da1a88ec99f6c5733a3035d26b3bbf" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1gad3da1a88ec99f6c5733a3035d26b3bbf" kindref="member">__RV_SUNPKD831</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sunpkd831<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10844"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.139.4.<sp/>SUNPKD831<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10845"><highlight class="normal"></highlight></codeline>
<codeline lineno="10846"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.139.5.<sp/>SUNPKD832<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10884" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga869283b10c6656ef6b529487d244449c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga869283b10c6656ef6b529487d244449c" kindref="member">__RV_SUNPKD832</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sunpkd832<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10890"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.139.5.<sp/>SUNPKD832<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10891"><highlight class="normal"></highlight></codeline>
<codeline lineno="10892"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.140.<sp/>SWAP8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10921" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaaea4771a7ac766be7bfec89c7bf6cda8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gaaea4771a7ac766be7bfec89c7bf6cda8" kindref="member">__RV_SWAP8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;swap8<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10927"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.140.<sp/>SWAP8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10928"><highlight class="normal"></highlight></codeline>
<codeline lineno="10929"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.141.<sp/>SWAP16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="10958" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gadab9655b01398363507f94180fd41ba4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1gadab9655b01398363507f94180fd41ba4" kindref="member">__RV_SWAP16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="10959"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;swap16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="10962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10964"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.141.<sp/>SWAP16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10965"><highlight class="normal"></highlight></codeline>
<codeline lineno="10966"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.142.<sp/>UCLIP8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11005" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafed7823f6a501d256c3232bd8a1d85d1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gafed7823f6a501d256c3232bd8a1d85d1" kindref="member">__RV_UCLIP8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uclip8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11011"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.142.<sp/>UCLIP8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11012"><highlight class="normal"></highlight></codeline>
<codeline lineno="11013"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.143.<sp/>UCLIP16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11053" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga562f85675e7444c4fb1e5e6c28c3c6c7" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1ga562f85675e7444c4fb1e5e6c28c3c6c7" kindref="member">__RV_UCLIP16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uclip16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11059"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.143.<sp/>UCLIP16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11060"><highlight class="normal"></highlight></codeline>
<codeline lineno="11061"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.144.<sp/>UCLIP32<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11102" refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga714c7ecdec825caa36c722bc8edbb2d8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga714c7ecdec825caa36c722bc8edbb2d8" kindref="member">__RV_UCLIP32</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uclip32<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.144.<sp/>UCLIP32<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11109"><highlight class="normal"></highlight></codeline>
<codeline lineno="11110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.145.<sp/>UCMPLE8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11142" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7bb0f1ec7077c679107517472935145d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga7bb0f1ec7077c679107517472935145d" kindref="member">__RV_UCMPLE8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ucmple8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.145.<sp/>UCMPLE8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11149"><highlight class="normal"></highlight></codeline>
<codeline lineno="11150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.146.<sp/>UCMPLE16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11182" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga1c90d69f90f54607d8b137b8efafdc88" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga1c90d69f90f54607d8b137b8efafdc88" kindref="member">__RV_UCMPLE16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ucmple16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.146.<sp/>UCMPLE16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11189"><highlight class="normal"></highlight></codeline>
<codeline lineno="11190"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.147.<sp/>UCMPLT8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11221" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga6d69bc358f1d79a21f67027a3fcf2320" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__CMP_1ga6d69bc358f1d79a21f67027a3fcf2320" kindref="member">__RV_UCMPLT8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ucmplt8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.147.<sp/>UCMPLT8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11228"><highlight class="normal"></highlight></codeline>
<codeline lineno="11229"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.148.<sp/>UCMPLT16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11260" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga566fff4ed2e21cc7e247ecb8b2258bd2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__CMP_1ga566fff4ed2e21cc7e247ecb8b2258bd2" kindref="member">__RV_UCMPLT16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ucmplt16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11266"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.148.<sp/>UCMPLT16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11267"><highlight class="normal"></highlight></codeline>
<codeline lineno="11268"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.149.<sp/>UKADD8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11305" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga4b8d09eb6958b8eabea15a82ab8edef7" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga4b8d09eb6958b8eabea15a82ab8edef7" kindref="member">__RV_UKADD8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11311"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.149.<sp/>UKADD8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11312"><highlight class="normal"></highlight></codeline>
<codeline lineno="11313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.150.<sp/>UKADD16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11350" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5ab8ad2484f1d4b0ffbbd48443be73d0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga5ab8ad2484f1d4b0ffbbd48443be73d0" kindref="member">__RV_UKADD16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11356"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.150.<sp/>UKADD16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11357"><highlight class="normal"></highlight></codeline>
<codeline lineno="11358"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.151.<sp/>UKADD64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11412" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139" kindref="member">__RV_UKADD64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukadd64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11418"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.151.<sp/>UKADD64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11419"><highlight class="normal"></highlight></codeline>
<codeline lineno="11420"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.152.<sp/>UKADDH<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11454" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gaf5a82ca7a98ea1c06cd7a468d035abcd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gaf5a82ca7a98ea1c06cd7a468d035abcd" kindref="member">__RV_UKADDH</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukaddh<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.152.<sp/>UKADDH<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11461"><highlight class="normal"></highlight></codeline>
<codeline lineno="11462"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.153.<sp/>UKADDW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11497" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga836b1f78407443c88b5958a7cfb3361f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1ga836b1f78407443c88b5958a7cfb3361f" kindref="member">__RV_UKADDW</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukaddw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11503"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.153.<sp/>UKADDW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11504"><highlight class="normal"></highlight></codeline>
<codeline lineno="11505"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.154.<sp/>UKCRAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11553" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga3d8ee80d3beca9f62d44d96a52037f92" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga3d8ee80d3beca9f62d44d96a52037f92" kindref="member">__RV_UKCRAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukcras16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11559"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.154.<sp/>UKCRAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11560"><highlight class="normal"></highlight></codeline>
<codeline lineno="11561"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.155.<sp/>UKCRSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11608" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga469a05a9449e9ec44d89d5f37df09d04" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga469a05a9449e9ec44d89d5f37df09d04" kindref="member">__RV_UKCRSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukcrsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.155.<sp/>UKCRSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11615"><highlight class="normal"></highlight></codeline>
<codeline lineno="11616"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.156.<sp/>UKMAR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11673" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac196974cb320c6111c4708989d0e1e49" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gac196974cb320c6111c4708989d0e1e49" kindref="member">__RV_UKMAR64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukmar64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="11677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11678"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.156.<sp/>UKMAR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11679"><highlight class="normal"></highlight></codeline>
<codeline lineno="11680"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.157.<sp/>UKMSR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11738" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga7feff7a2f338e3730f0af2f054cfdd71" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga7feff7a2f338e3730f0af2f054cfdd71" kindref="member">__RV_UKMSR64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukmsr64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="11742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11743"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.157.<sp/>UKMSR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11744"><highlight class="normal"></highlight></codeline>
<codeline lineno="11745"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.158.<sp/>UKSTAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11793" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gac5ee1051a7643e3ed68a807f61665e7c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gac5ee1051a7643e3ed68a807f61665e7c" kindref="member">__RV_UKSTAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukstas16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11799"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.158.<sp/>UKSTAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11800"><highlight class="normal"></highlight></codeline>
<codeline lineno="11801"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.159.<sp/>UKSTSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11848" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaed116dce964990e1d8f0905a607b9541" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gaed116dce964990e1d8f0905a607b9541" kindref="member">__RV_UKSTSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ukstsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11854"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.159.<sp/>UKSTSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11855"><highlight class="normal"></highlight></codeline>
<codeline lineno="11856"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.160.<sp/>UKSUB8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11893" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga28d53441b9c0106fb6caed6dc77f89ad" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga28d53441b9c0106fb6caed6dc77f89ad" kindref="member">__RV_UKSUB8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uksub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11899"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.160.<sp/>UKSUB8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11900"><highlight class="normal"></highlight></codeline>
<codeline lineno="11901"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.161.<sp/>UKSUB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="11938" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae159a5930299163247cc7704d2903c73" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gae159a5930299163247cc7704d2903c73" kindref="member">__RV_UKSUB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="11939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uksub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="11942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11944"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.161.<sp/>UKSUB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11945"><highlight class="normal"></highlight></codeline>
<codeline lineno="11946"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.162.<sp/>UKSUB64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12001" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8c38b38409eba3d05396b9d09c1b8382" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8c38b38409eba3d05396b9d09c1b8382" kindref="member">__RV_UKSUB64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12004"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uksub64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12007"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.162.<sp/>UKSUB64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12008"><highlight class="normal"></highlight></codeline>
<codeline lineno="12009"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.163.<sp/>UKSUBH<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12047" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga8f7265e350aad977038169d60af14e55" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga8f7265e350aad977038169d60af14e55" kindref="member">__RV_UKSUBH</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12048"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uksubh<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12053"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.163.<sp/>UKSUBH<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12054"><highlight class="normal"></highlight></codeline>
<codeline lineno="12055"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.164.<sp/>UKSUBW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12091" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gae102902e2e1e3a606807064ab3ea763f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q31__SAT__ALU_1gae102902e2e1e3a606807064ab3ea763f" kindref="member">__RV_UKSUBW</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12092"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uksubw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12097"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.164.<sp/>UKSUBW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12098"><highlight class="normal"></highlight></codeline>
<codeline lineno="12099"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.165.<sp/>UMAR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12145" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gadfcd132e9036eac41fbe56909d8acaa4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1gadfcd132e9036eac41fbe56909d8acaa4" kindref="member">__RV_UMAR64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umar64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="12149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.165.<sp/>UMAR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12151"><highlight class="normal"></highlight></codeline>
<codeline lineno="12152"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.166.<sp/>UMAQA<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12189" refid="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga86598a907350dc26b358e7660f721482" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__8B__MULT__32B__ADD_1ga86598a907350dc26b358e7660f721482" kindref="member">__RV_UMAQA</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umaqa<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="12193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12194"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.166.<sp/>UMAQA<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12195"><highlight class="normal"></highlight></codeline>
<codeline lineno="12196"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.167.<sp/>UMAX8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12227" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga83c4e6f30012da45ea00703d8aafccbe" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1ga83c4e6f30012da45ea00703d8aafccbe" kindref="member">__RV_UMAX8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umax8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.167.<sp/>UMAX8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12234"><highlight class="normal"></highlight></codeline>
<codeline lineno="12235"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.168.<sp/>UMAX16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12266" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa75623ba7f5f23a440782f47f62f1f6f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa75623ba7f5f23a440782f47f62f1f6f" kindref="member">__RV_UMAX16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umax16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.168.<sp/>UMAX16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12273"><highlight class="normal"></highlight></codeline>
<codeline lineno="12274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.169.<sp/>UMIN8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12305" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaea0e139e2e2392c423aaf9f7f18056f2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MISC_1gaea0e139e2e2392c423aaf9f7f18056f2" kindref="member">__RV_UMIN8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umin8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12311"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.169.<sp/>UMIN8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12312"><highlight class="normal"></highlight></codeline>
<codeline lineno="12313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.170.<sp/>UMIN16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12344" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa7c689ce557d35cb4847d43846579a40" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MISC_1gaa7c689ce557d35cb4847d43846579a40" kindref="member">__RV_UMIN16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umin16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12350"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.170.<sp/>UMIN16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12351"><highlight class="normal"></highlight></codeline>
<codeline lineno="12352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.171.<sp/>UMSR64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12398" refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga6011dd7028a2a50e4fac5a3a1da22d54" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__MULT__64B__ADDSUB_1ga6011dd7028a2a50e4fac5a3a1da22d54" kindref="member">__RV_UMSR64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umsr64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;+r&quot;</highlight><highlight class="normal">(t)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="12402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12403"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.171.<sp/>UMSR64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12404"><highlight class="normal"></highlight></codeline>
<codeline lineno="12405"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.172.1.<sp/>UMUL8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12481" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga119cf7edda88230d8d62fd642fff046b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1ga119cf7edda88230d8d62fd642fff046b" kindref="member">__RV_UMUL8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umul8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12487"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.172.1.<sp/>UMUL8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12488"><highlight class="normal"></highlight></codeline>
<codeline lineno="12489"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.172.2.<sp/>UMULX8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12565" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gab655cbf1d89adb8bc28a1600d6e770aa" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__MULTIPLY_1gab655cbf1d89adb8bc28a1600d6e770aa" kindref="member">__RV_UMULX8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umulx8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12571"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.172.2.<sp/>UMULX8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12572"><highlight class="normal"></highlight></codeline>
<codeline lineno="12573"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.173.1.<sp/>UMUL16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12650" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga0b8735b23131378b6bcad1dd67255513" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga0b8735b23131378b6bcad1dd67255513" kindref="member">__RV_UMUL16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umul16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12656"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.173.1.<sp/>UMUL16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12657"><highlight class="normal"></highlight></codeline>
<codeline lineno="12658"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.173.2.<sp/>UMULX16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12735" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga32ff52a5adf2d53a6d661c48ba6e58c4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__MULTIPLY_1ga32ff52a5adf2d53a6d661c48ba6e58c4" kindref="member">__RV_UMULX16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;umulx16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12741"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.173.2.<sp/>UMULX16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12742"><highlight class="normal"></highlight></codeline>
<codeline lineno="12743"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.174.<sp/>URADD8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12782" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga3024b858bfff004934d319dfa6b73102" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1ga3024b858bfff004934d319dfa6b73102" kindref="member">__RV_URADD8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uradd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12788"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.174.<sp/>URADD8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12789"><highlight class="normal"></highlight></codeline>
<codeline lineno="12790"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.175.<sp/>URADD16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12829" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4bb70d87c28d883e2c4cdd71671076e4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga4bb70d87c28d883e2c4cdd71671076e4" kindref="member">__RV_URADD16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uradd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.175.<sp/>URADD16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12836"><highlight class="normal"></highlight></codeline>
<codeline lineno="12837"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.176.<sp/>URADD64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12881" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8458d1a5a3564b122ebe6b84115877e1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8458d1a5a3564b122ebe6b84115877e1" kindref="member">__RV_URADD64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uradd64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12887"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.176.<sp/>URADD64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12888"><highlight class="normal"></highlight></codeline>
<codeline lineno="12889"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.177.<sp/>URADDW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12929" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad8c7e0a31ab014db941c83a0a704da8d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gad8c7e0a31ab014db941c83a0a704da8d" kindref="member">__RV_URADDW</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;uraddw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12935"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.177.<sp/>URADDW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12936"><highlight class="normal"></highlight></codeline>
<codeline lineno="12937"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.178.<sp/>URCRAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="12978" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga50231b389038f448ea1eb29b45c90b9e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga50231b389038f448ea1eb29b45c90b9e" kindref="member">__RV_URCRAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="12979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;urcras16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="12982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12984"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.178.<sp/>URCRAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12985"><highlight class="normal"></highlight></codeline>
<codeline lineno="12986"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.179.<sp/>URCRSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13027" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gad4abe7a167aebc8b921be0e901c59f8d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gad4abe7a167aebc8b921be0e901c59f8d" kindref="member">__RV_URCRSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13028"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;urcrsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13033"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.179.<sp/>URCRSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13034"><highlight class="normal"></highlight></codeline>
<codeline lineno="13035"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.180.<sp/>URSTAS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13076" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga972d51a1eebdd2a479b549286a2d8d92" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga972d51a1eebdd2a479b549286a2d8d92" kindref="member">__RV_URSTAS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;urstas16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13082"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.180.<sp/>URSTAS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13083"><highlight class="normal"></highlight></codeline>
<codeline lineno="13084"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.181.<sp/>URSTSA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13125" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gadacb909a5ebc2d520bec4f86c0467a2c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gadacb909a5ebc2d520bec4f86c0467a2c" kindref="member">__RV_URSTSA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;urstsa16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.181.<sp/>URSTSA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13132"><highlight class="normal"></highlight></codeline>
<codeline lineno="13133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.182.<sp/>URSUB8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13172" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae016aa9f76f26a0e5ce7d3a0120e8afd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__ADDSUB_1gae016aa9f76f26a0e5ce7d3a0120e8afd" kindref="member">__RV_URSUB8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ursub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13178"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.182.<sp/>URSUB8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13179"><highlight class="normal"></highlight></codeline>
<codeline lineno="13180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.183.<sp/>URSUB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13219" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga34716b9076a8f42d4001047705447f1d" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1ga34716b9076a8f42d4001047705447f1d" kindref="member">__RV_URSUB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ursub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.183.<sp/>URSUB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13226"><highlight class="normal"></highlight></codeline>
<codeline lineno="13227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.184.<sp/>URSUB64<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13273" refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gabe20856e2f82d33c17ce4963ee2db286" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gabe20856e2f82d33c17ce4963ee2db286" kindref="member">__RV_URSUB64</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ursub64<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.184.<sp/>URSUB64<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13280"><highlight class="normal"></highlight></codeline>
<codeline lineno="13281"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.185.<sp/>URSUBW<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13321" refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gaf80c041da49050e0469a6e945f5df1fd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__32B__COMPUTATION_1gaf80c041da49050e0469a6e945f5df1fd" kindref="member">__RV_URSUBW</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ursubw<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13327"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.185.<sp/>URSUBW<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13328"><highlight class="normal"></highlight></codeline>
<codeline lineno="13329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.186.<sp/>WEXTI<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13374" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga336d44003e6037e4945a513994b5f601" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga336d44003e6037e4945a513994b5f601" kindref="member">__RV_WEXTI</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;wexti<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13380"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.186.<sp/>WEXTI<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13381"><highlight class="normal"></highlight></codeline>
<codeline lineno="13382"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.187.<sp/>WEXT<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13424" refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga92ce02b48c9b1f373c8b7e602c6bcc5f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga92ce02b48c9b1f373c8b7e602c6bcc5f" kindref="member">__RV_WEXT</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;wext<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.187.<sp/>WEXT<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13431"><highlight class="normal"></highlight></codeline>
<codeline lineno="13432"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.188.1.<sp/>ZUNPKD810<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13470" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0deca77382416530ac829ea0a18d36a5" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0deca77382416530ac829ea0a18d36a5" kindref="member">__RV_ZUNPKD810</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zunpkd810<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13476"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.188.1.<sp/>ZUNPKD810<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13477"><highlight class="normal"></highlight></codeline>
<codeline lineno="13478"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.188.2.<sp/>ZUNPKD820<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13516" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0a124400d7a60b3f860c73b2ef10f753" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga0a124400d7a60b3f860c73b2ef10f753" kindref="member">__RV_ZUNPKD820</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zunpkd820<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13522"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.188.2.<sp/>ZUNPKD820<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13523"><highlight class="normal"></highlight></codeline>
<codeline lineno="13524"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.188.3.<sp/>ZUNPKD830<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13562" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga2ffff9289e72fb5163731af36b82bd96" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga2ffff9289e72fb5163731af36b82bd96" kindref="member">__RV_ZUNPKD830</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zunpkd830<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13568"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.188.3.<sp/>ZUNPKD830<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13569"><highlight class="normal"></highlight></codeline>
<codeline lineno="13570"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.188.4.<sp/>ZUNPKD831<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13608" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga833374dc8db34294d48e728512a2068f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga833374dc8db34294d48e728512a2068f" kindref="member">__RV_ZUNPKD831</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zunpkd831<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.188.4.<sp/>ZUNPKD831<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13615"><highlight class="normal"></highlight></codeline>
<codeline lineno="13616"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>3.188.5.<sp/>ZUNPKD832<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13654" refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga7fdf5939f3c0be0a64c2659b930a9faa" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga7fdf5939f3c0be0a64c2659b930a9faa" kindref="member">__RV_ZUNPKD832</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zunpkd832<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13660"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>3.188.5.<sp/>ZUNPKD832<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13661"><highlight class="normal"></highlight></codeline>
<codeline lineno="13662"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>XXXXX<sp/>Nuclei<sp/>Extended<sp/>DSP<sp/>Instructions<sp/>for<sp/>RV32<sp/>XXXXX<sp/>*/</highlight></codeline>
<codeline lineno="13669"><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.1.<sp/>DKHM8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13715" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga036660946bc3f379a731983caffca53b" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga036660946bc3f379a731983caffca53b" kindref="member">__RV_DKHM8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkhm8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13721"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.1.<sp/>DKHM8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13722"><highlight class="normal"></highlight></codeline>
<codeline lineno="13723"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.2.<sp/>DKHM16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13770" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gae39257eb12a014d3059394217135b9fb" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gae39257eb12a014d3059394217135b9fb" kindref="member">__RV_DKHM16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkhm16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13776"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.2.<sp/>DKHM16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13777"><highlight class="normal"></highlight></codeline>
<codeline lineno="13778"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.3.<sp/>DKABS8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13815" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7279c1730c173384063a9bef9c986010" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7279c1730c173384063a9bef9c986010" kindref="member">__RV_DKABS8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkabs8<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13821"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.3.<sp/>DKABS8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13822"><highlight class="normal"></highlight></codeline>
<codeline lineno="13823"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.4.<sp/>DKABS16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13860" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7d5691b06128c42939278415561c2dc4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7d5691b06128c42939278415561c2dc4" kindref="member">__RV_DKABS16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="13861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkabs16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="13864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13866"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.4.<sp/>DKABS16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13867"><highlight class="normal"></highlight></codeline>
<codeline lineno="13868"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.5.<sp/>DKSLRA8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13918" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga0f7b1184bde378bc5ae6e23f155ecb89" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga0f7b1184bde378bc5ae6e23f155ecb89" kindref="member">__RV_DKSLRA8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkslra8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13924"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.5.<sp/>DKSLRA8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13925"><highlight class="normal"></highlight></codeline>
<codeline lineno="13926"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.6.<sp/>DKSLRA16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="13977" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1b02a9f2e52abd456bfdadc1dac9e188" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1b02a9f2e52abd456bfdadc1dac9e188" kindref="member">__RV_DKSLRA16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="13978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkslra16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="13981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="13982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13983"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.6.<sp/>DKSLRA16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13984"><highlight class="normal"></highlight></codeline>
<codeline lineno="13985"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.7.<sp/>DKADD8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14024" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7f2598c19678a959960b6c6d3379e465" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga7f2598c19678a959960b6c6d3379e465" kindref="member">__RV_DKADD8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="14025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="14028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14030"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.7.<sp/>DKADD8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14031"><highlight class="normal"></highlight></codeline>
<codeline lineno="14032"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.8.<sp/>DKADD16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14071" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaeb50cbc43674d8dd32e7455b6c25b394" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaeb50cbc43674d8dd32e7455b6c25b394" kindref="member">__RV_DKADD16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="14072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14074"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dkadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="14075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14077"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.8.<sp/>DKADD16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14078"><highlight class="normal"></highlight></codeline>
<codeline lineno="14079"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.10.<sp/>DKSUB8<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14118" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga5dbe06f7b351ff1477851894d6d0c927" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga5dbe06f7b351ff1477851894d6d0c927" kindref="member">__RV_DKSUB8</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="14119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dksub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="14122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14124"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.9.<sp/>DKSUB8<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14125"><highlight class="normal"></highlight></codeline>
<codeline lineno="14126"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.10.<sp/>DKSUB16<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14166" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaa5dfb634a380181e51e0636cb216fbb1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gaa5dfb634a380181e51e0636cb216fbb1" kindref="member">__RV_DKSUB16</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="14167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;dksub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(b));</highlight></codeline>
<codeline lineno="14170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A.10.<sp/>DKSUB16<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14173"><highlight class="normal"></highlight></codeline>
<codeline lineno="14174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.11.1.<sp/>EXPD80<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14201" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1bdbaa4714d2052c162a076e676f4ea4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga1bdbaa4714d2052c162a076e676f4ea4" kindref="member">__RV_EXPD80</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="14202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;expd80<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="14205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14207"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A11.1.<sp/>EXPD80<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14208"><highlight class="normal"></highlight></codeline>
<codeline lineno="14209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.11.2.<sp/>EXPD81<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14236" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gad690c697580b52820282c03d6a6567c5" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gad690c697580b52820282c03d6a6567c5" kindref="member">__RV_EXPD81</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="14237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;expd81<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="14240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14242"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A11.2.<sp/>EXPD81<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14243"><highlight class="normal"></highlight></codeline>
<codeline lineno="14244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.11.3.<sp/>EXPD82<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14271" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gafc4a523cfa64150d691bdc5d7d038810" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1gafc4a523cfa64150d691bdc5d7d038810" kindref="member">__RV_EXPD82</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="14272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;expd82<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="14275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14277"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A11.3.<sp/>EXPD82<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14278"><highlight class="normal"></highlight></codeline>
<codeline lineno="14279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>Start<sp/>for<sp/>A.11.4.<sp/>EXPD83<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="14306" refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga6d8dce49013b778d0290cd057cf45dd0" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM_1ga6d8dce49013b778d0290cd057cf45dd0" kindref="member">__RV_EXPD83</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="14307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;expd83<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(a));</highlight></codeline>
<codeline lineno="14310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="14311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14312"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Inline<sp/>Function<sp/>End<sp/>for<sp/>A11.4.<sp/>EXPD83<sp/>=====<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14313"><highlight class="normal"></highlight></codeline>
<codeline lineno="14314"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__RISCV_FEATURE_DSP)<sp/>&amp;&amp;<sp/>(__RISCV_FEATURE_DSP<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="14315"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>XXXXX<sp/>ARM<sp/>Compatiable<sp/>SIMD<sp/>API<sp/>XXXXX<sp/>*/</highlight></codeline>
<codeline lineno="14317"><highlight class="preprocessor">#define<sp/>__QADD8(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KADD8(x,<sp/>y)</highlight></codeline>
<codeline lineno="14318"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14319"><highlight class="preprocessor">#define<sp/>__QSUB8(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KSUB8((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14320"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14321"><highlight class="preprocessor">#define<sp/>__QADD16(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KADD16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14322"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14323"><highlight class="preprocessor">#define<sp/>__SHADD16(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_RADD16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14324"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14325"><highlight class="preprocessor">#define<sp/>__QSUB16(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KSUB16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14326"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14327"><highlight class="preprocessor">#define<sp/>__SHSUB16(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_RSUB16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14328"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14329"><highlight class="preprocessor">#define<sp/>__QASX(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KCRAS16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14330"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14331"><highlight class="preprocessor">#define<sp/>__SHASX(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_RCRAS16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14332"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14333"><highlight class="preprocessor">#define<sp/>__QSAX(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KCRSA16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14334"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14335"><highlight class="preprocessor">#define<sp/>__SHSAX(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_RCRSA16((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14336"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14337"><highlight class="preprocessor">#define<sp/>__SMUSDX(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMXDS((y),<sp/>(x))</highlight></codeline>
<codeline lineno="14338"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14339"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMUADX<sp/>(int32_t<sp/>op1,<sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="14340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga37c752d6151fb29b43b01b2dd8af55d6" kindref="member">__RV_KMXDA</ref>(op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14344"><highlight class="preprocessor">#define<sp/>__QADD(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KADDW((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14345"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14346"><highlight class="preprocessor">#define<sp/>__QSUB(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KSUBW((x),<sp/>(y))</highlight></codeline>
<codeline lineno="14347"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14348"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMLAD(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int32_t<sp/>op3)</highlight></codeline>
<codeline lineno="14349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga84ab72987eeee69e2392965d8d8944f4" kindref="member">__RV_KMADA</ref>(op3,<sp/>op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14353"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMLADX(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int32_t<sp/>op3)</highlight></codeline>
<codeline lineno="14354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga1cab84ebee0378b9c1069e17efdbfd69" kindref="member">__RV_KMAXDA</ref>(op3,<sp/>op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14358"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMLSDX(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int32_t<sp/>op3)</highlight></codeline>
<codeline lineno="14359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(op3<sp/>-<sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga45c60f7cb5ae0e2ddaeca68e0a76283b" kindref="member">__RV_SMXDS</ref>(op1,<sp/>op2));</highlight></codeline>
<codeline lineno="14361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14363"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__SMLALD(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int64_t<sp/>acc)</highlight></codeline>
<codeline lineno="14364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int64_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga8320e2679cb96ee46fcaf761925b8708" kindref="member">__RV_SMALDA</ref>(acc,<sp/>op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14368"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__SMLALDX(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int64_t<sp/>acc)</highlight></codeline>
<codeline lineno="14369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int64_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__64B__ADDSUB_1ga18e89f90f0b3e3d8c34ceb33b671a61b" kindref="member">__RV_SMALXDA</ref>(acc,<sp/>op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14373"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMUAD(int32_t<sp/>op1,<sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="14374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1ga2de43c62af85225d40c1ac4210640925" kindref="member">__RV_KMDA</ref>(op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14378"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMUSD(int32_t<sp/>op1,<sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="14379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__16B__MULT__32B__ADDSUB_1gafab251aa9c5e64dc004c9dc3b8c7c0dd" kindref="member">__RV_SMDRS</ref>(op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14383"><highlight class="preprocessor">#define<sp/>__SXTB16(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SUNPKD820(x)</highlight></codeline>
<codeline lineno="14384"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14385"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SXTAB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="14386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__16B__ADDSUB_1gacacca4e304ad42fc68a96c785f2a0b69" kindref="member">__RV_ADD16</ref>(op1,<sp/><ref refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__8B__UNPACK_1ga8d213189a39651f3bcad77da2eb1f530" kindref="member">__RV_SUNPKD830</ref>(op2));</highlight></codeline>
<codeline lineno="14388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14390"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/>__SMMLA(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int32_t<sp/>op3)</highlight></codeline>
<codeline lineno="14391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14392"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>mul;</highlight></codeline>
<codeline lineno="14393"><highlight class="normal"><sp/><sp/><sp/><sp/>mul<sp/>=<sp/>(int32_t)<ref refid="group__NMSIS__Core__DSP__Intrinsic__SIGNED__MSW__32X32__MAC_1ga17b1cc8cce90ea3852050e9ec0b28795" kindref="member">__RV_SMMUL</ref>(op1,<sp/>op2);</highlight></codeline>
<codeline lineno="14394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(op3<sp/>+<sp/>mul);</highlight></codeline>
<codeline lineno="14395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__DKHM8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKHM8</highlight></codeline>
<codeline lineno="14397"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKHM16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKHM16</highlight></codeline>
<codeline lineno="14398"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKSUB16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKSUB16</highlight></codeline>
<codeline lineno="14399"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMAQA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMAQA</highlight></codeline>
<codeline lineno="14400"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__MULSR64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_MULSR64</highlight></codeline>
<codeline lineno="14401"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DQADD8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKADD8</highlight></codeline>
<codeline lineno="14402"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DQSUB8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKSUB8</highlight></codeline>
<codeline lineno="14403"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKADD16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKADD16</highlight></codeline>
<codeline lineno="14404"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__PKBB16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_PKBB16</highlight></codeline>
<codeline lineno="14405"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKSLRA16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKSLRA16</highlight></codeline>
<codeline lineno="14406"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKSLRA8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKSLRA8</highlight></codeline>
<codeline lineno="14407"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__KABSW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KABSW</highlight></codeline>
<codeline lineno="14408"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKABS8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKABS8</highlight></codeline>
<codeline lineno="14409"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__DKABS16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_DKABS16</highlight></codeline>
<codeline lineno="14410"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMALDA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMALDA</highlight></codeline>
<codeline lineno="14411"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMSLDA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMSLDA</highlight></codeline>
<codeline lineno="14412"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMALBB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMALBB</highlight></codeline>
<codeline lineno="14413"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SUB64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SUB64</highlight></codeline>
<codeline lineno="14414"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__ADD64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_ADD64</highlight></codeline>
<codeline lineno="14415"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMBB16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMBB16</highlight></codeline>
<codeline lineno="14416"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMBT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMBT16</highlight></codeline>
<codeline lineno="14417"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMTT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMTT16</highlight></codeline>
<codeline lineno="14418"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__EXPD80<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_EXPD80</highlight></codeline>
<codeline lineno="14419"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMAX8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMAX8</highlight></codeline>
<codeline lineno="14420"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SMAX16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_SMAX16</highlight></codeline>
<codeline lineno="14421"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__PKTT16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_PKTT16</highlight></codeline>
<codeline lineno="14422"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__KADD16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_KADD16</highlight></codeline>
<codeline lineno="14423"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SADD16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_ADD16</highlight></codeline>
<codeline lineno="14424"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__RISCV_FEATURE_DSP<sp/>==<sp/>1)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14426"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(__DSP_PRESENT)<sp/>&amp;&amp;<sp/>(__DSP_PRESENT<sp/>==<sp/>1)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14428"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14430"><highlight class="preprocessor">#define<sp/>__PKHBT(ARG1,ARG2,ARG3)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((((uint32_t)(ARG1))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;<sp/>0x0000FFFFUL)<sp/>|<sp/><sp/>\</highlight></codeline>
<codeline lineno="14431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((uint32_t)(ARG2))<sp/>&lt;&lt;<sp/>(ARG3))<sp/>&amp;<sp/>0xFFFF0000UL)<sp/><sp/>)</highlight></codeline>
<codeline lineno="14432"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="14433"><highlight class="preprocessor">#define<sp/>__PKHTB(ARG1,ARG2,ARG3)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((((uint32_t)(ARG1))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;<sp/>0xFFFF0000UL)<sp/>|<sp/><sp/>\</highlight></codeline>
<codeline lineno="14434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((uint32_t)(ARG2))<sp/>&gt;&gt;<sp/>(ARG3))<sp/>&amp;<sp/>0x0000FFFFUL)<sp/><sp/>)</highlight></codeline>
<codeline lineno="14435"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14436"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="14437"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="14438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="14439"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__CORE_FEATURE_DSP__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h"/>
  </compounddef>
</doxygen>
