<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic_NON_SIMD_Q15_SAT_ALU</compoundname>
    <title>Non-SIMD Q15 saturation ALU Instructions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga3d272c3c6988c3c1c76ed6f5896c008e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KADDH</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KADDH</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADDH (Signed Addition with Q15 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADDH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add the signed lower 32-bit content of two registers with Q15 saturation.</para><para><bold>Description</bold>:<linebreak/>
The signed lower 32-bit content of Rs1 is added with the signed lower 32-bit content of Rs2. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then sign- extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>+<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>32767)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>32767;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-32768)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>-32768;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="1621" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1621" bodyend="1626"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga26af5537e6aca0133b66832596728a8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KHMBB</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KHMBB</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMBB (Signed Saturating Half Multiply B16 x B16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15 number again and saturate the Q15 result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right- shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KHMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult[31:0]<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>Mresult[30:15];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>Rv32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2443" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2443" bodyend="2448"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga96e244df43ec32a722a3562a0a59a6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KHMBT</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KHMBT</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMBT (Signed Saturating Half Multiply B16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15 number again and saturate the Q15 result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right- shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KHMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult[31:0]<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>Mresult[30:15];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>Rv32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2496" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2496" bodyend="2501"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga06a6deed6954a496ac381758e067e850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KHMTT</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_KHMTT</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KHMTT (Signed Saturating Half Multiply T16 x T16) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KHMxy<sp/>Rd,<sp/>Rs1,<sp/>Rs2<sp/>(xy<sp/>=<sp/>BB,<sp/>BT,<sp/>TT)</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Multiply the signed Q15 number contents of two 16-bit data in the corresponding portion of the lower 32-bit chunk in registers and then right-shift 15 bits to turn the Q30 result into a Q15 number again and saturate the Q15 result into the destination register. If saturation happens, an overflow flag OV will be set.</para><para><bold>Description</bold>:<linebreak/>
Multiply the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs1 with the top or bottom 16-bit Q15 content of the lower 32-bit portion in Rs2. The Q30 result is then right- shifted 15-bits and saturated into a Q15 value. The Q15 value is then sing-extended and written into Rd. When both the two Q15 inputs are 0x8000, saturation will happen. The result will be saturated to 0x7FFF and the overflow flag OV will be set.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[0];<sp/></highlight><highlight class="comment">//<sp/>KHMBB</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[0];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMBT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">aop<sp/>=<sp/>Rs1.H[1];<sp/>bop<sp/>=<sp/>Rs2.H[1];<sp/></highlight><highlight class="comment">//<sp/>KHMTT</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">If<sp/>(0x8000<sp/>!=<sp/>aop<sp/>|<sp/>0x8000<sp/>!=<sp/>bop)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mresult[31:0]<sp/>=<sp/>aop<sp/>*<sp/>bop;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>Mresult[30:15];</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res[15:0]<sp/>=<sp/>0x7FFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE32(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>Rv32</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE64(res[15:0]);<sp/></highlight><highlight class="comment">//<sp/>RV64</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="2549" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="2549" bodyend="2554"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gae30012cd8914b62f2fb84236b138f54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long</type>
        <definition>__STATIC_FORCEINLINE long __RV_KSUBH</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>__RV_KSUBH</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUBH (Signed Subtraction with Q15 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUBH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract the signed lower 32-bit content of two registers with Q15 saturation.</para><para><bold>Description</bold>:<linebreak/>
The signed lower 32-bit content of Rs2 is subtracted from the signed lower 32-bit content of Rs1. And the result is saturated to the 16-bit signed integer range of [-2^15, 2^15-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>-<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^15)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>(2^15)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>-2^15)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>-2^15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res<sp/>=<sp/>tmp;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(res[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="5448" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5448" bodyend="5453"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1gaf5a82ca7a98ea1c06cd7a468d035abcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKADDH</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UKADDH</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADDH (Unsigned Addition with U16 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADDH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add the unsigned lower 32-bit content of two registers with U16 saturation.</para><para><bold>Description</bold>:<linebreak/>
The unsigned lower 32-bit content of Rs1 is added with the unsigned lower 32-bit content of Rs2. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>+<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="11454" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11454" bodyend="11459"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__Q15__SAT__ALU_1ga8f7265e350aad977038169d60af14e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long</type>
        <definition>__STATIC_FORCEINLINE unsigned long __RV_UKSUBH</definition>
        <argsstring>(unsigned int a, unsigned int b)</argsstring>
        <name>__RV_UKSUBH</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUBH (Unsigned Subtraction with U16 Saturation) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUBH<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Subtract the unsigned lower 32-bit content of two registers with U16 saturation.</para><para><bold>Description</bold>:<linebreak/>
The unsigned lower 32-bit content of Rs2 is subtracted from the unsigned lower 32-bit content of Rs1. And the result is saturated to the 16-bit unsigned integer range of [0, 2^16-1] and then sign-extended and written to Rd. If saturation happens, this instruction sets the OV flag.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">tmp<sp/>=<sp/>Rs1.W[0]<sp/>-<sp/>Rs2.W[0];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>(2^16)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(2^16)-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>SE(tmp[15:0]);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" line="12047" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12047" bodyend="12052"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Non-SIMD Q15 saturation ALU Instructions. </para>    </briefdescription>
    <detaileddescription>
<para>there are 7 Non-SIMD Q15 saturation ALU Instructions </para>    </detaileddescription>
  </compounddef>
</doxygen>
