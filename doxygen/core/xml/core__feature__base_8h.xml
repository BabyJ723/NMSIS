<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="core__feature__base_8h" kind="file">
    <compoundname>core_feature_base.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="riscv__encoding_8h" local="yes">riscv_encoding.h</includes>
    <includedby refid="nmsis__core_8h" local="yes">nmsis_core.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>riscv_bits.h</label>
        <link refid="riscv__bits_8h_source"/>
      </node>
      <node id="3">
        <label>core_feature_base.h</label>
        <link refid="core_feature_base.h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>riscv_encoding.h</label>
        <link refid="riscv__encoding_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>core_feature_base.h</label>
        <link refid="core_feature_base.h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>nmsis_core.h</label>
        <link refid="nmsis__core_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="unionCSR__MISA__Type" prot="public">CSR_MISA_Type</innerclass>
    <innerclass refid="unionCSR__MSTATUS__Type" prot="public">CSR_MSTATUS_Type</innerclass>
    <innerclass refid="unionCSR__MTVEC__Type" prot="public">CSR_MTVEC_Type</innerclass>
    <innerclass refid="unionCSR__MCAUSE__Type" prot="public">CSR_MCAUSE_Type</innerclass>
    <innerclass refid="unionCSR__MCOUNTINHIBIT__Type" prot="public">CSR_MCOUNTINHIBIT_Type</innerclass>
    <innerclass refid="unionCSR__MSUBM__Type" prot="public">CSR_MSUBM_Type</innerclass>
    <innerclass refid="unionCSR__MMISCCTRL__Type" prot="public">CSR_MMISCCTRL_Type</innerclass>
    <innerclass refid="unionCSR__MSAVESTATUS__Type" prot="public">CSR_MSAVESTATUS_Type</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__NMSIS__Core__Registers_1ga768dc3bf3c5e4e75e117c4a053b6d0f7" prot="public" static="no">
        <name>__RISCV_XLEN</name>
        <initializer>32</initializer>
        <briefdescription>
<para>Refer to the width of an integer register in bits(either 32 or 64) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="41" column="13" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1gab68e26f20086bc54e8fc3af533c8ed7f" prot="public" static="no">
        <name>__RV_CSR_SWAP</name>
        <param><defname>csr</defname></param>
        <param><defname>val</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrrw instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Read the content of csr register to __v, then write content of val into csr register, then return __v <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to store into the CSR register </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the CSR register value before written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="285" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" prot="public" static="no">
        <name>__RV_CSR_READ</name>
        <param><defname>csr</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrr instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Read the content of csr register to __v and return it <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the CSR register value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="303" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="303" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga7b8025dd8eac9993066d730cee6475a0" compoundref="core__feature__eclic_8h" startline="736" endline="745">__ECLIC_GetVector</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga2e80049df57b285d4dd43454377c0845" compoundref="core__feature__eclic_8h" startline="707" endline="722">__ECLIC_SetVector</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga05bee6a5e41963ef1845c8a7e5a09c89" compoundref="core__feature__eclic_8h" startline="774" endline="778">__get_exc_entry</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gac5b9521ea1bd5260330714b8032d04d5" compoundref="core__feature__eclic_8h" startline="833" endline="836">__get_nmi_entry</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1ga2fe20dcdecc453c6709448944b1f5350" compoundref="core__feature__eclic_8h" startline="813" endline="821">__get_nonvec_entry</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1ga0fc1168753b68d4105d6fc96b038b1fd" compoundref="core__feature__pmp_8h" startline="203" endline="224">__get_PMPADDRx</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1gadca32ce47cd692eb2e7fe25abf36c103" compoundref="core__feature__pmp_8h" startline="163" endline="172">__get_PMPCFGx</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1gadf37b13460f0c2c0d7d2641f31ebbf72" compoundref="core__feature__pmp_8h" startline="61" endline="95">__get_PMPxCFG</referencedby>
        <referencedby refid="group__NMSIS__Core__CSR__Register__Access_1ga0d524220141962c60352cfe0a219bdb4" compoundref="core__feature__base_8h" startline="433" endline="452">__get_rv_cycle</referencedby>
        <referencedby refid="group__NMSIS__Core__CSR__Register__Access_1ga0755f3835c1d5788f99547c185dab2d2" compoundref="core__feature__base_8h" startline="460" endline="479">__get_rv_instret</referencedby>
        <referencedby refid="group__NMSIS__Core__CSR__Register__Access_1ga5f54b26adf57d254f6a589dab36bd28a" compoundref="core__feature__base_8h" startline="488" endline="507">__get_rv_time</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gadbe0f14f32c5989304fd05faf0cff648" compoundref="core__feature__eclic_8h" startline="791" endline="800">__set_nonvec_entry</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1gae1905cc6904d78db702c1a0b72b326f5" compoundref="core__feature__pmp_8h" startline="103" endline="149">__set_PMPxCFG</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" prot="public" static="no">
        <name>__RV_CSR_WRITE</name>
        <param><defname>csr</defname></param>
        <param><defname>val</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrw instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Write the content of val to csr register <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to store into the CSR register </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="321" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="321" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__IntExc_1gaec014abd3940e642f652b97b70d7ac8e" compoundref="core__feature__eclic_8h" startline="757" endline="762">__set_exc_entry</referencedby>
        <referencedby refid="group__NMSIS__Core__IntExc_1gadbe0f14f32c5989304fd05faf0cff648" compoundref="core__feature__eclic_8h" startline="791" endline="800">__set_nonvec_entry</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1ga6341b28b3c2fe7c6e697a1adee7d4dd2" compoundref="core__feature__pmp_8h" startline="232" endline="253">__set_PMPADDRx</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1gaf509ec494237545e28812695aaaa30c8" compoundref="core__feature__pmp_8h" startline="186" endline="195">__set_PMPCFGx</referencedby>
        <referencedby refid="group__NMSIS__Core__PMP__Functions_1gae1905cc6904d78db702c1a0b72b326f5" compoundref="core__feature__pmp_8h" startline="103" endline="149">__set_PMPxCFG</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1" compoundref="core__feature__base_8h" startline="600" endline="603">__set_wfi_sleepmode</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1ga01a3710ed5d399eec664b69fd01b33fb" prot="public" static="no">
        <name>__RV_CSR_READ_SET</name>
        <param><defname>csr</defname></param>
        <param><defname>val</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrrs instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Read the content of csr register to __v, then set csr register to be __v | val, then return __v <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value to be used wih csrrs instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the CSR register value before written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="340" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" prot="public" static="no">
        <name>__RV_CSR_SET</name>
        <param><defname>csr</defname></param>
        <param><defname>val</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrs instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Set csr register to be csr_content | val <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value to be used wih csrs instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="358" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="358" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd" compoundref="core__feature__base_8h" startline="671" endline="674">__disable_all_counter</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517" compoundref="core__feature__base_8h" startline="631" endline="634">__disable_mcycle_counter</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe" compoundref="core__feature__base_8h" startline="651" endline="654">__disable_minstret_counter</referencedby>
        <referencedby refid="group__NMSIS__Core__CSR__Register__Access_1gae84bf4e95944e61937f4ed2453e5ef23" compoundref="core__feature__base_8h" startline="411" endline="414">__enable_irq</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15" compoundref="core__feature__base_8h" startline="611" endline="614">__TXEVT</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c" compoundref="core__feature__base_8h" startline="555" endline="560">__WFE</referencedby>
        <referencedby refid="group__NMSIS__Core__DCache_1gaf90783ed69b3589cde6fe7dbabeb17c0" compoundref="core__feature__cache_8h" startline="100" endline="103">EnableDCache</referencedby>
        <referencedby refid="group__NMSIS__Core__ICache_1ga76dfd7aff65a6a7fa91b53dbe44f9ce5" compoundref="core__feature__cache_8h" startline="63" endline="66">EnableICache</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1ga1ead73950cec4e7221a24500846f39a2" prot="public" static="no">
        <name>__RV_CSR_READ_CLEAR</name>
        <param><defname>csr</defname></param>
        <param><defname>val</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrrc instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Read the content of csr register to __v, then set csr register to be __v &amp; ~val, then return __v <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value to be used wih csrrc instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the CSR register value before written </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="377" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" prot="public" static="no">
        <name>__RV_CSR_CLEAR</name>
        <param><defname>csr</defname></param>
        <param><defname>val</defname></param>
        <briefdescription>
<para>CSR operation Macro for csrc instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Set csr register to be csr_content &amp; ~val <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csr</parametername>
</parameternamelist>
<parameterdescription>
<para>CSR macro definition defined in <ref refid="group__NMSIS__Core__CSR__Registers" kindref="compound">Core CSR Registers</ref>, eg. <ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value to be used wih csrc instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="395" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="395" bodyend="-1"/>
        <referencedby refid="group__NMSIS__Core__CSR__Register__Access_1ga2299877e4ba3e162ca9dbabd6e0abef6" compoundref="core__feature__base_8h" startline="422" endline="425">__disable_irq</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811" compoundref="core__feature__base_8h" startline="661" endline="664">__enable_all_counter</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73" compoundref="core__feature__base_8h" startline="621" endline="624">__enable_mcycle_counter</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5" compoundref="core__feature__base_8h" startline="641" endline="644">__enable_minstret_counter</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c" compoundref="core__feature__base_8h" startline="555" endline="560">__WFE</referencedby>
        <referencedby refid="group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7" compoundref="core__feature__base_8h" startline="542" endline="546">__WFI</referencedby>
        <referencedby refid="group__NMSIS__Core__DCache_1gab30be00d8a0583adac5d786149db433f" compoundref="core__feature__cache_8h" startline="114" endline="117">DisableDCache</referencedby>
        <referencedby refid="group__NMSIS__Core__ICache_1ga4a855b01222d0c42d413f168651616e5" compoundref="core__feature__cache_8h" startline="77" endline="80">DisableICache</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" prot="public" static="no">
        <name>__FENCE</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref> volatile (&quot;fence &quot; #p &quot;,&quot; #s : : : &quot;memory&quot;)</initializer>
        <briefdescription>
<para>Execute fence instruction, p -&gt; pred, s -&gt; succ. </para>        </briefdescription>
        <detaileddescription>
<para>the FENCE instruction ensures that all memory accesses from instructions preceding the fence in program order (the <computeroutput>predecessor set</computeroutput>) appear earlier in the global memory order than memory accesses from instructions appearing after the fence in program order (the <computeroutput>successor set</computeroutput>). For details, please refer to The RISC-V Instruction Set Manual <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predecessor set, such as iorw, rw, r, w </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>successor set, such as iorw, rw, r, w </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="686" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3" prot="public" static="no">
        <name>__RWMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(iorw,iorw)</initializer>
        <briefdescription>
<para>Read &amp; Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="700" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga74918217f0fe94af72bfe5d406d4164b" prot="public" static="no">
        <name>__RMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(ir,ir)</initializer>
        <briefdescription>
<para>Read Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="703" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga4063a0176acd66b4cdad567b45f3249b" prot="public" static="no">
        <name>__WMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(ow,ow)</initializer>
        <briefdescription>
<para>Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="706" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga4e8baf26c3f68696f2b2ad0510eafdb5" prot="public" static="no">
        <name>__SMP_RWMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(rw,rw)</initializer>
        <briefdescription>
<para>SMP Read &amp; Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="709" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga78c8abb848ec15a6e9dcce8c9e4dc1ba" prot="public" static="no">
        <name>__SMP_RMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(r,r)</initializer>
        <briefdescription>
<para>SMP Read Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="712" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga96d95139b3239e90fad24caf26da2160" prot="public" static="no">
        <name>__SMP_WMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" kindref="member">__FENCE</ref>(w,w)</initializer>
        <briefdescription>
<para>SMP Write Memory barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="715" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__CPU__Intrinsic_1ga653c374f1130650b2f115a92bdf23f7b" prot="public" static="no">
        <name>__CPU_RELAX</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref> volatile (&quot;&quot; : : : &quot;memory&quot;)</initializer>
        <briefdescription>
<para>CPU relax for busy loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="718" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" prot="public" static="no">
        <name>WFI_SleepMode_Type</name>
        <enumvalue id="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a791734cb0f58f266b18223e28e2feea2" prot="public">
          <name>WFI_SHALLOW_SLEEP</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Shallow sleep mode, the core_clk will poweroff. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a26cef3a380cffa72dea68b994a3acc3f" prot="public">
          <name>WFI_DEEP_SLEEP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Deep sleep mode, the core_clk and core_ano_clk will poweroff. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>WFI Sleep Mode enumeration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="588" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="588" bodyend="591"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t rv_csr_t</definition>
        <argsstring></argsstring>
        <name>rv_csr_t</name>
        <briefdescription>
<para>Type of Control and Status Register(CSR), depends on the XLEN defined in RISC-V. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="49" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__CSR__Register__Access_1gae84bf4e95944e61937f4ed2453e5ef23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_irq</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_irq</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable IRQ Interrupts. </para>        </briefdescription>
        <detaileddescription>
<para>Enables IRQ interrupts by setting the MIE-bit in the MSTATUS Register. <simplesect kind="remark"><para>Can only be executed in Privileged modes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="411" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="411" bodyend="414"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" compoundref="riscv__encoding_8h" startline="325">CSR_MSTATUS</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga225cb34e3b991318fa87f090cfc3fc5f" compoundref="riscv__encoding_8h" startline="37">MSTATUS_MIE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CSR__Register__Access_1ga2299877e4ba3e162ca9dbabd6e0abef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_irq</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_irq</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable IRQ Interrupts. </para>        </briefdescription>
        <detaileddescription>
<para>Disables IRQ interrupts by clearing the MIE-bit in the MSTATUS Register. <simplesect kind="remark"><para>Can only be executed in Privileged modes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="422" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="422" bodyend="425"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" compoundref="riscv__encoding_8h" startline="325">CSR_MSTATUS</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga225cb34e3b991318fa87f090cfc3fc5f" compoundref="riscv__encoding_8h" startline="37">MSTATUS_MIE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CSR__Register__Access_1ga0d524220141962c60352cfe0a219bdb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint64_t</type>
        <definition>__STATIC_FORCEINLINE uint64_t __get_rv_cycle</definition>
        <argsstring>(void)</argsstring>
        <name>__get_rv_cycle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read whole 64 bits value of mcycle counter. </para>        </briefdescription>
        <detaileddescription>
<para>This function will read the whole 64 bits of MCYCLE register <simplesect kind="return"><para>The whole 64 bits value of MCYCLE </para></simplesect>
<simplesect kind="remark"><para>It will work for both RV32 and RV64 to get full 64bits value of MCYCLE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="433" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="433" bodyend="452"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8" compoundref="riscv__encoding_8h" startline="364">CSR_MCYCLE</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1gae3368bea588a2fcdf2e7d24707ef4dda" compoundref="riscv__encoding_8h" startline="462">CSR_MCYCLEH</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CSR__Register__Access_1ga0755f3835c1d5788f99547c185dab2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint64_t</type>
        <definition>__STATIC_FORCEINLINE uint64_t __get_rv_instret</definition>
        <argsstring>(void)</argsstring>
        <name>__get_rv_instret</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read whole 64 bits value of machine instruction-retired counter. </para>        </briefdescription>
        <detaileddescription>
<para>This function will read the whole 64 bits of MINSTRET register <simplesect kind="return"><para>The whole 64 bits value of MINSTRET </para></simplesect>
<simplesect kind="remark"><para>It will work for both RV32 and RV64 to get full 64bits value of MINSTRET </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="460" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="460" bodyend="479"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5" compoundref="riscv__encoding_8h" startline="365">CSR_MINSTRET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1gaa59d1f570770dc3be6cd493cbb5a12e4" compoundref="riscv__encoding_8h" startline="463">CSR_MINSTRETH</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CSR__Register__Access_1ga5f54b26adf57d254f6a589dab36bd28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint64_t</type>
        <definition>__STATIC_FORCEINLINE uint64_t __get_rv_time</definition>
        <argsstring>(void)</argsstring>
        <name>__get_rv_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Read whole 64 bits value of real-time clock. </para>        </briefdescription>
        <detaileddescription>
<para>This function will read the whole 64 bits of TIME register <simplesect kind="return"><para>The whole 64 bits value of TIME CSR </para></simplesect>
<simplesect kind="remark"><para>It will work for both RV32 and RV64 to get full 64bits value of TIME </para></simplesect>
<simplesect kind="attention"><para>only available when user mode available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="488" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="488" bodyend="507"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" compoundref="core__feature__base_8h" startline="303">__RV_CSR_READ</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a" compoundref="riscv__encoding_8h" startline="285">CSR_TIME</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga2e2ce9bac3d1ad2128a4eb9438a1022d" compoundref="riscv__encoding_8h" startline="431">CSR_TIMEH</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga3113efdf11b109a9cbd50fae783d1adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __NOP</definition>
        <argsstring>(void)</argsstring>
        <name>__NOP</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>NOP Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>No Operation does nothing. This instruction can be used for code alignment purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="528" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="528" bodyend="531"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __WFI</definition>
        <argsstring>(void)</argsstring>
        <name>__WFI</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Wait For Interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>Wait For Interrupt is is executed using CSR_WFE.WFE=0 and WFI instruction. It will suspends execution until interrupt, NMI or Debug happened. When Core is waked up by interrupt, if<orderedlist>
<listitem><para>mstatus.MIE == 1(interrupt enabled), Core will enter ISR code</para></listitem><listitem><para>mstatus.MIE == 0(interrupt disabled), Core will resume previous execution </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="542" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="542" bodyend="546"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" compoundref="riscv__encoding_8h" startline="523">CSR_WFE</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" compoundref="riscv__encoding_8h" startline="146">WFE_WFE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __WFE</definition>
        <argsstring>(void)</argsstring>
        <name>__WFE</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Wait For Event. </para>        </briefdescription>
        <detaileddescription>
<para>Wait For Event is executed using CSR_WFE.WFE=1 and WFI instruction. It will suspends execution until event, NMI or Debug happened. When Core is waked up, Core will resume previous execution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="555" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="555" bodyend="560"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" compoundref="riscv__encoding_8h" startline="523">CSR_WFE</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" compoundref="riscv__encoding_8h" startline="146">WFE_WFE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga2d22b9286eefbf1e1b73ed50ce443183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __EBREAK</definition>
        <argsstring>(void)</argsstring>
        <name>__EBREAK</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Breakpoint Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="569" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="569" bodyend="572"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga639ad274fdb079a1219006725d772c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __ECALL</definition>
        <argsstring>(void)</argsstring>
        <name>__ECALL</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Environment Call Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The ECALL instruction is used to make a service request to the execution environment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="580" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="580" bodyend="583"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __set_wfi_sleepmode</definition>
        <argsstring>(WFI_SleepMode_Type mode)</argsstring>
        <name>__set_wfi_sleepmode</name>
        <param>
          <type><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" kindref="member">WFI_SleepMode_Type</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set Sleep mode of WFI. </para>        </briefdescription>
        <detaileddescription>
<para>Set the SLEEPVALUE CSR register to control the WFI Sleep mode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The sleep mode to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="600" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="600" bodyend="603"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" compoundref="core__feature__base_8h" startline="321">__RV_CSR_WRITE</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb" compoundref="riscv__encoding_8h" startline="521">CSR_SLEEPVALUE</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __TXEVT</definition>
        <argsstring>(void)</argsstring>
        <name>__TXEVT</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Send TX Event. </para>        </briefdescription>
        <detaileddescription>
<para>Set the CSR TXEVT to control send a TX Event. The Core will output signal tx_evt as output event signal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="611" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="611" bodyend="614"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga730f164e5d79c6b27d2187a1e7a17e25" compoundref="riscv__encoding_8h" startline="522">CSR_TXEVT</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_mcycle_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_mcycle_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable MCYCLE counter. </para>        </briefdescription>
        <detaileddescription>
<para>Clear the CY bit of MCOUNTINHIBIT to 0 to enable MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="621" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="621" bodyend="624"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_mcycle_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_mcycle_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable MCYCLE counter. </para>        </briefdescription>
        <detaileddescription>
<para>Set the CY bit of MCOUNTINHIBIT to 1 to disable MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="631" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="631" bodyend="634"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_minstret_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_minstret_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Clear the IR bit of MCOUNTINHIBIT to 0 to enable MINSTRET Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="641" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="641" bodyend="644"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_minstret_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_minstret_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Set the IR bit of MCOUNTINHIBIT to 1 to disable MINSTRET Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="651" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="651" bodyend="654"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __enable_all_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__enable_all_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable MCYCLE &amp; MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Clear the IR and CY bit of MCOUNTINHIBIT to 1 to enable MINSTRET &amp; MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="661" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="661" bodyend="664"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" compoundref="core__feature__base_8h" startline="395">__RV_CSR_CLEAR</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __disable_all_counter</definition>
        <argsstring>(void)</argsstring>
        <name>__disable_all_counter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable MCYCLE &amp; MINSTRET counter. </para>        </briefdescription>
        <detaileddescription>
<para>Set the IR and CY bit of MCOUNTINHIBIT to 1 to disable MINSTRET &amp; MCYCLE Counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="671" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="671" bodyend="674"/>
        <references refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" compoundref="core__feature__base_8h" startline="358">__RV_CSR_SET</references>
        <references refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" compoundref="riscv__encoding_8h" startline="503">CSR_MCOUNTINHIBIT</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" compoundref="riscv__encoding_8h" startline="149">MCOUNTINHIBIT_CY</references>
        <references refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" compoundref="riscv__encoding_8h" startline="148">MCOUNTINHIBIT_IR</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga5b4c34e720fb0c9e939540333dd640e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __FENCE_I</definition>
        <argsstring>(void)</argsstring>
        <name>__FENCE_I</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Fence.i Instruction. </para>        </briefdescription>
        <detaileddescription>
<para>The FENCE.I instruction is used to synchronize the instruction and data streams. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="694" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="694" bodyend="697"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint8_t</type>
        <definition>__STATIC_FORCEINLINE uint8_t __LB</definition>
        <argsstring>(volatile void *addr)</argsstring>
        <name>__LB</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Load 8bit value from address (8 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Load 8 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of type uint8_t at (*addr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="728" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="728" bodyend="734"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint16_t</type>
        <definition>__STATIC_FORCEINLINE uint16_t __LH</definition>
        <argsstring>(volatile void *addr)</argsstring>
        <name>__LH</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Load 16bit value from address (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Load 16 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of type uint16_t at (*addr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="742" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="742" bodyend="748"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __LW</definition>
        <argsstring>(volatile void *addr)</argsstring>
        <name>__LW</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Load 32bit value from address (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Load 32 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of type uint32_t at (*addr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="756" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="756" bodyend="762"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __SB</definition>
        <argsstring>(volatile void *addr, uint8_t val)</argsstring>
        <name>__SB</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write 8bit value to address (8 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Write 8 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="786" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="786" bodyend="789"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __SH</definition>
        <argsstring>(volatile void *addr, uint16_t val)</argsstring>
        <name>__SH</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write 16bit value to address (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Write 16 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="797" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="797" bodyend="800"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> void</type>
        <definition>__STATIC_FORCEINLINE void __SW</definition>
        <argsstring>(volatile void *addr, uint32_t val)</argsstring>
        <name>__SW</name>
        <param>
          <type>volatile void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write 32bit value to address (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Write 32 bit value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="808" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="808" bodyend="811"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga8dab656e3251b574311b852efa785109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __CAS_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t oldval, uint32_t newval)</argsstring>
        <name>__CAS_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>oldval</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>newval</declname>
        </param>
        <briefdescription>
<para>Compare and Swap 32bit value using LR and SC. </para>        </briefdescription>
        <detaileddescription>
<para>Compare old value with memory, if identical, store new value in memory. Return the initial value in memory. Success is indicated by comparing return value with OLD. memory address, return 0 if successful, otherwise return !0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oldval</parametername>
</parameternamelist>
<parameterdescription>
<para>Old value of the data in address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newval</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be stored into the address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the initial value in memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="837" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="837" bodyend="852"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga68f1ebfff49ba330ac04996d3e2b9df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __AMOSWAP_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t newval)</argsstring>
        <name>__AMOSWAP_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>newval</declname>
        </param>
        <briefdescription>
<para>Atomic Swap 32bit value into memory. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically swap new 32bit value into memory using amoswap.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newval</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to be stored into the address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the original value in memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="861" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="861" bodyend="868"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gac12ad95ec020f1c2c83c46231468a40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOADD_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOADD_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic Add with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically ADD 32bit value with value in memory using amoadd.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ADDed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value + add value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="877" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="877" bodyend="884"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga927482a006985e82d90512f19ea68f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOAND_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOAND_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic And with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically AND 32bit value with value in memory using amoand.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ANDed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value &amp; and value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="893" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="893" bodyend="900"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gaa6f71a398756f05bbc1ef4b4a548174f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOOR_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOOR_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic OR with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically OR 32bit value with value in memory using amoor.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be ORed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value | and value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="909" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="909" bodyend="916"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga69a2e79b90f42d82c236fae1aced5c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOXOR_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOXOR_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic XOR with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically XOR 32bit value with value in memory using amoxor.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be XORed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return memory value ^ and value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="925" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="925" bodyend="932"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga75a6dc5418991df25ef66de5e16dbd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __AMOMAXU_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t value)</argsstring>
        <name>__AMOMAXU_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic unsigned MAX with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically unsigned max compare 32bit value with value in memory using amomaxu.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the bigger value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="941" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="941" bodyend="948"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga13034a453b85372f85974b178bd3ee6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOMAX_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOMAX_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic signed MAX with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically signed max compare 32bit value with value in memory using amomax.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the bigger value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="957" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="957" bodyend="964"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1ga75515ac6719d3abca5030cb4fd2f4c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __AMOMINU_W</definition>
        <argsstring>(volatile uint32_t *addr, uint32_t value)</argsstring>
        <name>__AMOMINU_W</name>
        <param>
          <type>volatile uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic unsigned MIN with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically unsigned min compare 32bit value with value in memory using amominu.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the smaller value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="973" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="973" bodyend="980"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__CPU__Intrinsic_1gadd554cdf00f5417208433154e9c9228e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __AMOMIN_W</definition>
        <argsstring>(volatile int32_t *addr, int32_t value)</argsstring>
        <name>__AMOMIN_W</name>
        <param>
          <type>volatile int32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Atomic signed MIN with 32bit value. </para>        </briefdescription>
        <detaileddescription>
<para>Atomically signed min compare 32bit value with value in memory using amomin.d. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address pointer to data, address need to be 4byte aligned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be compared </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the smaller value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" line="989" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h" bodystart="989" bodyend="996"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base core feature API for Nuclei N/NX Core. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CORE_FEATURE_BASE__</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__CORE_FEATURE_BASE__</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;riscv_encoding.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor">#ifndef<sp/>__RISCV_XLEN</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>__riscv_xlen</highlight></codeline>
<codeline lineno="41" refid="group__NMSIS__Core__Registers_1ga768dc3bf3c5e4e75e117c4a053b6d0f7" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__RISCV_XLEN<sp/><sp/><sp/><sp/>32</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__RISCV_XLEN<sp/><sp/><sp/><sp/>__riscv_xlen</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__RISCV_XLEN<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>==<sp/>32</highlight></codeline>
<codeline lineno="49" refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__Registers_1ga9fe08aae694cff694dde8758e73f4e3e" kindref="member">rv_csr_t</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_Registers<sp/>*/</highlight></codeline>
<codeline lineno="66" refid="unionCSR__MISA__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68" refid="unionCSR__MISA__Type_1a7d03318d070023b589d0493a6fc0c77c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>a:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="unionCSR__MISA__Type_1aa79af012ee1e6de37eae3bb515ee01ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>b:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="unionCSR__MISA__Type_1affcb644a18834c71c22c7a3d0717d3f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>c:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="unionCSR__MISA__Type_1a25171c57dba66f92acc7166020e095cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>d:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="unionCSR__MISA__Type_1a745359a52dfafcf113c23bcd8c29ec8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>e:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="unionCSR__MISA__Type_1a4023363711be3ef80da807a0728930ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>f:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="unionCSR__MISA__Type_1a5ffa39768567ee68ba9ddca749749094" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>g:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="unionCSR__MISA__Type_1add06ba0ef4b0e8b34c94b7d097c5b8b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>h:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76" refid="unionCSR__MISA__Type_1a388f9e4fdb069e9c0f3853ef8f9f3a04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>i:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="unionCSR__MISA__Type_1a4256c5f7bf0017aa46de265af7ad2e73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>j:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="unionCSR__MISA__Type_1adfa269cf0add951fbec17e4ef58dfc1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="unionCSR__MISA__Type_1ad3eee1620420ed061491fd48c9483a33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>l:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="unionCSR__MISA__Type_1ae9efe222b556250575bbdb7754ee4df0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>m:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="unionCSR__MISA__Type_1a08ef7ab18dc90635a062fc702a5b9839" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>n:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="unionCSR__MISA__Type_1ad74583efcf15a844c3403f2e5623b8d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="unionCSR__MISA__Type_1a1aeda1a8f5b0920ce7fb005fd45851b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>p:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84" refid="unionCSR__MISA__Type_1a293b7c69518f3fd68f566485d50e83e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>q:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="unionCSR__MISA__Type_1a18e3e874f5d6e2f7bdeab8cf3caf657b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_resreved3:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="unionCSR__MISA__Type_1a79e1df39597bf8184932682bba4e59b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>s:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="unionCSR__MISA__Type_1a8bf50ec00d685519fd3238a4b2222b50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>t:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="unionCSR__MISA__Type_1a746597b02ac481d6f16e9f10c311d85b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>u:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89" refid="unionCSR__MISA__Type_1a24a555a6f05561ed548f05b37ad48df9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>v:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="unionCSR__MISA__Type_1adc432fcf6a2a187caee977c2987f1b8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved4:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91" refid="unionCSR__MISA__Type_1ad127ca5673c61354060d7eb77f31ecb4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>x:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved5:38;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mxl:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="96" refid="unionCSR__MISA__Type_1a02d0ff9e6c8d54a24be971221e4cbd5a" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved5:6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="unionCSR__MISA__Type_1a6f3250a719eb460653f2f4f6f2bc76f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mxl:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/>d;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/><ref refid="unionCSR__MISA__Type" kindref="compound">CSR_MISA_Type</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="unionCSR__MSTATUS__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mie:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpie:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpp:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>fs:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>xs:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mprv:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved3:14;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>uxl:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved6:29;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>sd:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="123" refid="unionCSR__MSTATUS__Type_1ae8ca70d836ff92b95d206e681d081329" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124" refid="unionCSR__MSTATUS__Type_1a39782c19cb5e81a9bb2ac6231b11edcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>sie:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="unionCSR__MSTATUS__Type_1a3f2fb6067e213b937b77c8c72b5a2793" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="unionCSR__MSTATUS__Type_1a8fe9b86b3d0ddb66537db55e8fe1b96b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mie:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127" refid="unionCSR__MSTATUS__Type_1a6ec97869161f24ac6ccdf52d0d9bf2de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128" refid="unionCSR__MSTATUS__Type_1a2da21bb426da143dfba005be019592b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>spie:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129" refid="unionCSR__MSTATUS__Type_1a3c5132f10bbe90eef8a8256edd1e2907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved3:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130" refid="unionCSR__MSTATUS__Type_1a1053ed8fd8525df9fbd32c4890bcfe42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpie:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131" refid="unionCSR__MSTATUS__Type_1a225f2f406e336a6035544c2b718d3d7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved4:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132" refid="unionCSR__MSTATUS__Type_1a54f1b11a82d0c710c8568703e006bbe8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpp:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133" refid="unionCSR__MSTATUS__Type_1a0b85d89e89118380007d94c4c2adb0f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>fs:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134" refid="unionCSR__MSTATUS__Type_1ab2648a5652adc6cd1dd02e3e47d4cd87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>xs:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135" refid="unionCSR__MSTATUS__Type_1a5319b79ff9ccab347d70716fc7ad5bf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mprv:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="unionCSR__MSTATUS__Type_1aa7bf6ccb81c68ffcda46390640774413" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>sum:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="unionCSR__MSTATUS__Type_1a9d5d7b260d563a82fad02c6940902ef0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved6:12;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138" refid="unionCSR__MSTATUS__Type_1a07006b8b4c0dc88ca1e1a2145a9bce36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>sd:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141" refid="unionCSR__MSTATUS__Type_1ad6ccdd78fc15b0b10a9e82e3c25dd98a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MSTATUS__Type_1ad6ccdd78fc15b0b10a9e82e3c25dd98a" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}<sp/><ref refid="unionCSR__MSTATUS__Type" kindref="compound">CSR_MSTATUS_Type</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="unionCSR__MTVEC__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="149" refid="unionCSR__MTVEC__Type_1aaedacb992928db5f3486342eadf944e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mode:6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>addr:58;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="153" refid="unionCSR__MTVEC__Type_1a0d0fea678e6ad934c29011cfd49e9271" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>addr:26;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156" refid="unionCSR__MTVEC__Type_1a78064f13f73bd2c7367fd6dbc8cf356e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MTVEC__Type_1a78064f13f73bd2c7367fd6dbc8cf356e" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/><ref refid="unionCSR__MTVEC__Type" kindref="compound">CSR_MTVEC_Type</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="unionCSR__MCAUSE__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164" refid="unionCSR__MCAUSE__Type_1a1cb072e5e7ddb5d23103e5b7ccd4754b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>exccode:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165" refid="unionCSR__MCAUSE__Type_1a219408dc82a540a8f1984de4754103c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166" refid="unionCSR__MCAUSE__Type_1a12e8d8f10c411011485f89d8c8096adb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpil:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167" refid="unionCSR__MCAUSE__Type_1a71022f579628a81dc0ac558cbc513421" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168" refid="unionCSR__MCAUSE__Type_1a4c04623f4c35a7b546e42c0b39d37d5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpie:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169" refid="unionCSR__MCAUSE__Type_1a00a27e55a870e69d2747ee2d78b5d3e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpp:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170" refid="unionCSR__MCAUSE__Type_1ab67f23d9962f57913aa683f01a8a2008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>minhv:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:32;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>interrupt:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="175" refid="unionCSR__MCAUSE__Type_1ae7500724c75e2815c3624f91df4e7e1d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>interrupt:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178" refid="unionCSR__MCAUSE__Type_1ae5bdc279496969b722055aae0c118460" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MCAUSE__Type_1ae5bdc279496969b722055aae0c118460" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal">}<sp/><ref refid="unionCSR__MCAUSE__Type" kindref="compound">CSR_MCAUSE_Type</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="unionCSR__MCOUNTINHIBIT__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186" refid="unionCSR__MCOUNTINHIBIT__Type_1a254ee53372453cbf96ed0626ba892748" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>cy:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187" refid="unionCSR__MCOUNTINHIBIT__Type_1ac263b873022f7faf2083ef0e200ddc6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188" refid="unionCSR__MCOUNTINHIBIT__Type_1aa701cdd635c06458c4a2857f709be409" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>ir:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:61;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="192" refid="unionCSR__MCOUNTINHIBIT__Type_1aab234a4dac2d08f648cb47df509efaeb" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:29;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195" refid="unionCSR__MCOUNTINHIBIT__Type_1aa9ba6784709e8ba39c6e094156916dc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MCOUNTINHIBIT__Type_1aa9ba6784709e8ba39c6e094156916dc2" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal">}<sp/><ref refid="unionCSR__MCOUNTINHIBIT__Type" kindref="compound">CSR_MCOUNTINHIBIT_Type</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="unionCSR__MSUBM__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203" refid="unionCSR__MSUBM__Type_1a4df7db7411e57be8ab1826f81ca37514" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204" refid="unionCSR__MSUBM__Type_1a1bea0e7308519e40a3134f8d92bca435" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>typ:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205" refid="unionCSR__MSUBM__Type_1a77220967d0a04f29fb37b9730afc8059" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>ptyp:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:54;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="209" refid="unionCSR__MSUBM__Type_1a1d0316c0cbd4c58115811939f05334d0" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:22;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212" refid="unionCSR__MSUBM__Type_1ab188dee35d91c5cd832a5295b4e21e98" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MSUBM__Type_1ab188dee35d91c5cd832a5295b4e21e98" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="unionCSR__MSUBM__Type" kindref="compound">CSR_MSUBM_Type</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="unionCSR__MMISCCTRL__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="220" refid="unionCSR__MMISCCTRL__Type_1aa6e5c778c686f03d8b7f050bb6558f73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221" refid="unionCSR__MMISCCTRL__Type_1ab4bb604620ef0eb2b13778e892f3b44c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>bpu:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222" refid="unionCSR__MMISCCTRL__Type_1a2ec8d9def938eec6f784c348308dd153" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="unionCSR__MMISCCTRL__Type_1abfbd87cd64cdc521f49d43ab17c7dd7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>misalign:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224" refid="unionCSR__MMISCCTRL__Type_1a7cf36aebc77aad6f2e9daaa99048d6ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225" refid="unionCSR__MMISCCTRL__Type_1ab819b8f5dc4a6ad8256834fdae9c952f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>nmi_cause:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved3:54;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="229" refid="unionCSR__MMISCCTRL__Type_1a22bacba1282cd1dba8e3a1b8f3ee8458" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved3:22;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232" refid="unionCSR__MMISCCTRL__Type_1a17abdfbefca3554c1cf1f8c86a5c3925" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MMISCCTRL__Type_1a17abdfbefca3554c1cf1f8c86a5c3925" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal">}<sp/><ref refid="unionCSR__MMISCCTRL__Type" kindref="compound">CSR_MMISCCTRL_Type</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="unionCSR__MSAVESTATUS__Type" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241" refid="unionCSR__MSAVESTATUS__Type_1aea49d991ccf84140f2871c3d2e9577a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpie1:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242" refid="unionCSR__MSAVESTATUS__Type_1a5d06b2cf1ffb09a323db34953a1a1117" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpp1:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243" refid="unionCSR__MSAVESTATUS__Type_1abe13779fb93f296a38bc80cc75d7ffbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved0:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244" refid="unionCSR__MSAVESTATUS__Type_1a71bcf16bcab565b98e2cd135054daceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>ptyp1:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245" refid="unionCSR__MSAVESTATUS__Type_1a3b59f01dc6696bb3861f392e12cd83a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpie2:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246" refid="unionCSR__MSAVESTATUS__Type_1a507ac66274667f23d4c1c8fb175456b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>mpp2:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247" refid="unionCSR__MSAVESTATUS__Type_1a60c203ffddd944222ed36856c707b51c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved1:3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248" refid="unionCSR__MSAVESTATUS__Type_1a98cbf02beb8dc8fc1eee27ada6ebf5a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>ptyp2:2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor">#if<sp/>defined(__RISCV_XLEN)<sp/>&amp;&amp;<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:48;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="252" refid="unionCSR__MSAVESTATUS__Type_1a8e050bc641728ef17037ab95a2b64293" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv_csr_t<sp/>_reserved2:16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255" refid="unionCSR__MSAVESTATUS__Type_1a3830cba893f489931a838102f870bb54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rv_csr_t<sp/><ref refid="unionCSR__MSAVESTATUS__Type_1a3830cba893f489931a838102f870bb54" kindref="member">w</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal">}<sp/><ref refid="unionCSR__MSAVESTATUS__Type" kindref="compound">CSR_MSAVESTATUS_Type</ref>;<sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_Base_Registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###########################<sp/><sp/>Core<sp/>Function<sp/>Access<sp/><sp/>###########################<sp/>*/</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor">#ifndef<sp/>__ASSEMBLY__</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="285" refid="group__NMSIS__Core__CSR__Register__Access_1gab68e26f20086bc54e8fc3af533c8ed7f" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_SWAP(csr,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v<sp/>=<sp/>(unsigned<sp/>long)(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrrw<sp/>%0,<sp/>&quot;<sp/>STRINGIFY(csr)<sp/>&quot;,<sp/>%1&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;rK&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="303" refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_READ(csr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrr<sp/>%0,<sp/>&quot;<sp/>STRINGIFY(csr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="321" refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_WRITE(csr,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v<sp/>=<sp/>(rv_csr_t)(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrw<sp/>&quot;<sp/>STRINGIFY(csr)<sp/>&quot;,<sp/>%0&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;rK&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="340" refid="group__NMSIS__Core__CSR__Register__Access_1ga01a3710ed5d399eec664b69fd01b33fb" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_READ_SET(csr,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v<sp/>=<sp/>(rv_csr_t)(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrrs<sp/>%0,<sp/>&quot;<sp/>STRINGIFY(csr)<sp/>&quot;,<sp/>%1&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;rK&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="358" refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_SET(csr,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v<sp/>=<sp/>(rv_csr_t)(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrs<sp/>&quot;<sp/>STRINGIFY(csr)<sp/>&quot;,<sp/>%0&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;rK&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="377" refid="group__NMSIS__Core__CSR__Register__Access_1ga1ead73950cec4e7221a24500846f39a2" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_READ_CLEAR(csr,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v<sp/>=<sp/>(rv_csr_t)(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrrc<sp/>%0,<sp/>&quot;<sp/>STRINGIFY(csr)<sp/>&quot;,<sp/>%1&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;rK&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="395" refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" refkind="member"><highlight class="preprocessor">#define<sp/>__RV_CSR_CLEAR(csr,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>rv_csr_t<sp/>__v<sp/>=<sp/>(rv_csr_t)(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile(&quot;csrc<sp/>&quot;<sp/>STRINGIFY(csr)<sp/>&quot;,<sp/>%0&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;rK&quot;(__v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;memory&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__ASSEMBLY__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="411" refid="group__NMSIS__Core__CSR__Register__Access_1gae84bf4e95944e61937f4ed2453e5ef23" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gae84bf4e95944e61937f4ed2453e5ef23" kindref="member">__enable_irq</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga225cb34e3b991318fa87f090cfc3fc5f" kindref="member">MSTATUS_MIE</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="group__NMSIS__Core__CSR__Register__Access_1ga2299877e4ba3e162ca9dbabd6e0abef6" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga2299877e4ba3e162ca9dbabd6e0abef6" kindref="member">__disable_irq</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga7086e667c65affe87d2c32115193d736" kindref="member">CSR_MSTATUS</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga225cb34e3b991318fa87f090cfc3fc5f" kindref="member">MSTATUS_MIE</ref>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="group__NMSIS__Core__CSR__Register__Access_1ga0d524220141962c60352cfe0a219bdb4" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga0d524220141962c60352cfe0a219bdb4" kindref="member">__get_rv_cycle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>==<sp/>32</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>high0,<sp/>low,<sp/>high;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>full;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>high0<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gae3368bea588a2fcdf2e7d24707ef4dda" kindref="member">CSR_MCYCLEH</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>low<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8" kindref="member">CSR_MCYCLE</ref>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>high<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gae3368bea588a2fcdf2e7d24707ef4dda" kindref="member">CSR_MCYCLEH</ref>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high0<sp/>!=<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8" kindref="member">CSR_MCYCLE</ref>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>full<sp/>=<sp/>(((uint64_t)high)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>low;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>full;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)<ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8" kindref="member">CSR_MCYCLE</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>TODO<sp/>Need<sp/>cover<sp/>for<sp/>XLEN=128<sp/>case<sp/>in<sp/>future</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)<ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga5a7abfd3679706088142a50995c1bdb8" kindref="member">CSR_MCYCLE</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="group__NMSIS__Core__CSR__Register__Access_1ga0755f3835c1d5788f99547c185dab2d2" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga0755f3835c1d5788f99547c185dab2d2" kindref="member">__get_rv_instret</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>==<sp/>32</highlight></codeline>
<codeline lineno="463"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>high0,<sp/>low,<sp/>high;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>full;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>high0<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gaa59d1f570770dc3be6cd493cbb5a12e4" kindref="member">CSR_MINSTRETH</ref>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>low<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5" kindref="member">CSR_MINSTRET</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>high<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1gaa59d1f570770dc3be6cd493cbb5a12e4" kindref="member">CSR_MINSTRETH</ref>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high0<sp/>!=<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5" kindref="member">CSR_MINSTRET</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>full<sp/>=<sp/>(((uint64_t)high)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>low;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>full;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="475"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)<ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5" kindref="member">CSR_MINSTRET</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>TODO<sp/>Need<sp/>cover<sp/>for<sp/>XLEN=128<sp/>case<sp/>in<sp/>future</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)<ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga204b84adcbccada25ecd7aff3c5a31f5" kindref="member">CSR_MINSTRET</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="group__NMSIS__Core__CSR__Register__Access_1ga5f54b26adf57d254f6a589dab36bd28a" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga5f54b26adf57d254f6a589dab36bd28a" kindref="member">__get_rv_time</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>==<sp/>32</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>high0,<sp/>low,<sp/>high;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>full;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>high0<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga2e2ce9bac3d1ad2128a4eb9438a1022d" kindref="member">CSR_TIMEH</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>low<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a" kindref="member">CSR_TIME</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>high<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga2e2ce9bac3d1ad2128a4eb9438a1022d" kindref="member">CSR_TIMEH</ref>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high0<sp/>!=<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low<sp/>=<sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a" kindref="member">CSR_TIME</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>full<sp/>=<sp/>(((uint64_t)high)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>low;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>full;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)<ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a" kindref="member">CSR_TIME</ref>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>TODO<sp/>Need<sp/>cover<sp/>for<sp/>XLEN=128<sp/>case<sp/>in<sp/>future</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)<ref refid="group__NMSIS__Core__CSR__Register__Access_1ga355c96e5bd1ab3df0203e23a887c00c0" kindref="member">__RV_CSR_READ</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga4bbdf33e8b20f4cb020869e7394e388a" kindref="member">CSR_TIME</ref>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_CSR_Register_Access<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###########################<sp/><sp/>CPU<sp/>Intrinsic<sp/>Functions<sp/>###########################<sp/>*/</highlight></codeline>
<codeline lineno="528" refid="group__NMSIS__Core__CPU__Intrinsic_1ga3113efdf11b109a9cbd50fae783d1adc" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga3113efdf11b109a9cbd50fae783d1adc" kindref="member">__NOP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;nop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga8bc0687a967ccba8e8adbe7abe5fe2f7" kindref="member">__WFI</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" kindref="member">CSR_WFE</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" kindref="member">WFE_WFE</ref>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;wfi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gaca38170721a2eefd87017ed350162c4c" kindref="member">__WFE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" kindref="member">CSR_WFE</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" kindref="member">WFE_WFE</ref>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;wfi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9852d0d6221b272f8f5290c3445ee1ba" kindref="member">CSR_WFE</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga20aa60b214851659e139accdc108f131" kindref="member">WFE_WFE</ref>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="group__NMSIS__Core__CPU__Intrinsic_1ga2d22b9286eefbf1e1b73ed50ce443183" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga2d22b9286eefbf1e1b73ed50ce443183" kindref="member">__EBREAK</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ebreak&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="group__NMSIS__Core__CPU__Intrinsic_1ga639ad274fdb079a1219006725d772c6c" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga639ad274fdb079a1219006725d772c6c" kindref="member">__ECALL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ecall&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>WFI_SleepMode<sp/>{</highlight></codeline>
<codeline lineno="589" refid="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a791734cb0f58f266b18223e28e2feea2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a791734cb0f58f266b18223e28e2feea2" kindref="member">WFI_SHALLOW_SLEEP</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="590" refid="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a26cef3a380cffa72dea68b994a3acc3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gga5d9cca8c88cb703c619aff084e4e7648a26cef3a380cffa72dea68b994a3acc3f" kindref="member">WFI_DEEP_SLEEP</ref><sp/>=<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal">}<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" kindref="member">WFI_SleepMode_Type</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga1a1db7d1454df1cf7b1214d18349cac1" kindref="member">__set_wfi_sleepmode</ref>(<ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga5d9cca8c88cb703c619aff084e4e7648" kindref="member">WFI_SleepMode_Type</ref><sp/>mode)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gaa2d43f43f3f333cfd8e5a326a2aed413" kindref="member">__RV_CSR_WRITE</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga7ee7f2cce602b8b3e2943bc2d0ca65cb" kindref="member">CSR_SLEEPVALUE</ref>,<sp/>mode);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gaa60612c5e378681f32e815743823ba15" kindref="member">__TXEVT</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga730f164e5d79c6b27d2187a1e7a17e25" kindref="member">CSR_TXEVT</ref>,<sp/>0x1);</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gadba90c4a57befeb5e4f739295af55e73" kindref="member">__enable_mcycle_counter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" kindref="member">CSR_MCOUNTINHIBIT</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" kindref="member">MCOUNTINHIBIT_CY</ref>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gaf9ada8a615338120fa38a6e193fd7517" kindref="member">__disable_mcycle_counter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" kindref="member">CSR_MCOUNTINHIBIT</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" kindref="member">MCOUNTINHIBIT_CY</ref>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gae7bb45974eee5b66ea6332ba0ccf23d5" kindref="member">__enable_minstret_counter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" kindref="member">CSR_MCOUNTINHIBIT</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" kindref="member">MCOUNTINHIBIT_IR</ref>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gae1cb8d99e36d784e9071fec80e1f02fe" kindref="member">__disable_minstret_counter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" kindref="member">CSR_MCOUNTINHIBIT</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" kindref="member">MCOUNTINHIBIT_IR</ref>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga1b25cc01665431cd509fd3c1be93a811" kindref="member">__enable_all_counter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1ga14cf0513f6b576fcd1ff700b08f65543" kindref="member">__RV_CSR_CLEAR</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" kindref="member">CSR_MCOUNTINHIBIT</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" kindref="member">MCOUNTINHIBIT_IR</ref>|<ref refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" kindref="member">MCOUNTINHIBIT_CY</ref>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga16f715797bba0ac2ed2e1820c63443cd" kindref="member">__disable_all_counter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CSR__Register__Access_1gafdbd9b5a14b44913675d0fa73ca6716f" kindref="member">__RV_CSR_SET</ref>(<ref refid="group__NMSIS__Core__CSR__Registers_1ga9643607a23d4bc6a50a562d0a1f5a8f3" kindref="member">CSR_MCOUNTINHIBIT</ref>,<sp/><ref refid="group__NMSIS__Core__CSR__Encoding_1gae8693a1f795a0f752391c609ce011cbf" kindref="member">MCOUNTINHIBIT_IR</ref>|<ref refid="group__NMSIS__Core__CSR__Encoding_1ga675e4d52a85bafc0a1663cf2f431583a" kindref="member">MCOUNTINHIBIT_CY</ref>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="686" refid="group__NMSIS__Core__CPU__Intrinsic_1ga101db0d567f4403490117d9bb0a8c9c0" refkind="member"><highlight class="preprocessor">#define<sp/>__FENCE(p,<sp/>s)<sp/>__ASM<sp/>volatile<sp/>(&quot;fence<sp/>&quot;<sp/>#p<sp/>&quot;,&quot;<sp/>#s<sp/>:<sp/>:<sp/>:<sp/>&quot;memory&quot;)</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="694" refid="group__NMSIS__Core__CPU__Intrinsic_1ga5b4c34e720fb0c9e939540333dd640e6" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga5b4c34e720fb0c9e939540333dd640e6" kindref="member">__FENCE_I</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fence.i&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3" refkind="member"><highlight class="preprocessor">#define<sp/>__RWMB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FENCE(iorw,iorw)</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="703" refid="group__NMSIS__Core__CPU__Intrinsic_1ga74918217f0fe94af72bfe5d406d4164b" refkind="member"><highlight class="preprocessor">#define<sp/>__RMB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FENCE(ir,ir)</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="706" refid="group__NMSIS__Core__CPU__Intrinsic_1ga4063a0176acd66b4cdad567b45f3249b" refkind="member"><highlight class="preprocessor">#define<sp/>__WMB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FENCE(ow,ow)</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="709" refid="group__NMSIS__Core__CPU__Intrinsic_1ga4e8baf26c3f68696f2b2ad0510eafdb5" refkind="member"><highlight class="preprocessor">#define<sp/>__SMP_RWMB()<sp/><sp/><sp/><sp/>__FENCE(rw,rw)</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="712" refid="group__NMSIS__Core__CPU__Intrinsic_1ga78c8abb848ec15a6e9dcce8c9e4dc1ba" refkind="member"><highlight class="preprocessor">#define<sp/>__SMP_RMB()<sp/><sp/><sp/><sp/><sp/>__FENCE(r,r)</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="715" refid="group__NMSIS__Core__CPU__Intrinsic_1ga96d95139b3239e90fad24caf26da2160" refkind="member"><highlight class="preprocessor">#define<sp/>__SMP_WMB()<sp/><sp/><sp/><sp/><sp/>__FENCE(w,w)</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="718" refid="group__NMSIS__Core__CPU__Intrinsic_1ga653c374f1130650b2f115a92bdf23f7b" refkind="member"><highlight class="preprocessor">#define<sp/>__CPU_RELAX()<sp/><sp/><sp/>__ASM<sp/>volatile<sp/>(&quot;&quot;<sp/>:<sp/>:<sp/>:<sp/>&quot;memory&quot;)</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Load/Store<sp/>Operations<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="728" refid="group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint8_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8" kindref="member">__LB</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr)</highlight></codeline>
<codeline lineno="729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>result;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;lb<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint16_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f" kindref="member">__LH</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr)</highlight></codeline>
<codeline lineno="743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>result;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;lh<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865" kindref="member">__LW</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;lw<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>!=<sp/>32</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/>__LD(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>result;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ld<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="786" refid="group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd" kindref="member">__SB</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/>uint8_t<sp/>val)</highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sb<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca" kindref="member">__SH</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/>uint16_t<sp/>val)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sh<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3" kindref="member">__SW</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sw<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>!=<sp/>32</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__SD(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/>uint64_t<sp/>val)</highlight></codeline>
<codeline lineno="821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sd<sp/>%0,<sp/>0(%1)&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr));</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="837" refid="group__NMSIS__Core__CPU__Intrinsic_1ga8dab656e3251b574311b852efa785109" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga8dab656e3251b574311b852efa785109" kindref="member">__CAS_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr,<sp/>uint32_t<sp/>oldval,<sp/>uint32_t<sp/>newval)</highlight></codeline>
<codeline lineno="838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>rc;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0:<sp/><sp/><sp/><sp/><sp/>lr.w<sp/>%0,<sp/>%2<sp/><sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bne<sp/><sp/>%0,<sp/>%z3,<sp/>1f<sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc.w<sp/>%1,<sp/>%z4,<sp/>%2<sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnez<sp/>%1,<sp/>0b<sp/><sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1:\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal">(rc),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(oldval),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(newval)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="group__NMSIS__Core__CPU__Intrinsic_1ga68f1ebfff49ba330ac04996d3e2b9df8" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga68f1ebfff49ba330ac04996d3e2b9df8" kindref="member">__AMOSWAP_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr,<sp/>uint32_t<sp/>newval)</highlight></codeline>
<codeline lineno="862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoswap.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(newval)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="group__NMSIS__Core__CPU__Intrinsic_1gac12ad95ec020f1c2c83c46231468a40e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gac12ad95ec020f1c2c83c46231468a40e" kindref="member">__AMOADD_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int32_t<sp/>*addr,<sp/>int32_t<sp/>value)</highlight></codeline>
<codeline lineno="878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoadd.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="893" refid="group__NMSIS__Core__CPU__Intrinsic_1ga927482a006985e82d90512f19ea68f67" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga927482a006985e82d90512f19ea68f67" kindref="member">__AMOAND_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int32_t<sp/>*addr,<sp/>int32_t<sp/>value)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoand.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="909" refid="group__NMSIS__Core__CPU__Intrinsic_1gaa6f71a398756f05bbc1ef4b4a548174f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gaa6f71a398756f05bbc1ef4b4a548174f" kindref="member">__AMOOR_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int32_t<sp/>*addr,<sp/>int32_t<sp/>value)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoor.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="group__NMSIS__Core__CPU__Intrinsic_1ga69a2e79b90f42d82c236fae1aced5c73" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga69a2e79b90f42d82c236fae1aced5c73" kindref="member">__AMOXOR_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int32_t<sp/>*addr,<sp/>int32_t<sp/>value)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoxor.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="group__NMSIS__Core__CPU__Intrinsic_1ga75a6dc5418991df25ef66de5e16dbd46" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga75a6dc5418991df25ef66de5e16dbd46" kindref="member">__AMOMAXU_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="942"><highlight class="normal">{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amomaxu.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="group__NMSIS__Core__CPU__Intrinsic_1ga13034a453b85372f85974b178bd3ee6f" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga13034a453b85372f85974b178bd3ee6f" kindref="member">__AMOMAX_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int32_t<sp/>*addr,<sp/>int32_t<sp/>value)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amomax.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="group__NMSIS__Core__CPU__Intrinsic_1ga75515ac6719d3abca5030cb4fd2f4c2a" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga75515ac6719d3abca5030cb4fd2f4c2a" kindref="member">__AMOMINU_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amominu.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="group__NMSIS__Core__CPU__Intrinsic_1gadd554cdf00f5417208433154e9c9228e" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gadd554cdf00f5417208433154e9c9228e" kindref="member">__AMOMIN_W</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int32_t<sp/>*addr,<sp/>int32_t<sp/>value)</highlight></codeline>
<codeline lineno="990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amomin.w<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__RISCV_XLEN<sp/>==<sp/>64</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/>__CAS_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>*addr,<sp/>uint64_t<sp/>oldval,<sp/>uint64_t<sp/>newval)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>result;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>rc;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0:<sp/><sp/><sp/><sp/><sp/>lr.d<sp/>%0,<sp/>%2<sp/><sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bne<sp/><sp/>%0,<sp/>%z3,<sp/>1f<sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sc.d<sp/>%1,<sp/>%z4,<sp/>%2<sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnez<sp/>%1,<sp/>0b<sp/><sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1:\n&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal">(rc),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>\</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(oldval),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(newval)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/>__AMOSWAP_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>*addr,<sp/>uint64_t<sp/>newval)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>result;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoswap.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(newval)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__AMOADD_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int64_t<sp/>*addr,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int64_t<sp/>result;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoadd.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__AMOAND_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int64_t<sp/>*addr,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int64_t<sp/>result;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoand.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__AMOOR_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int64_t<sp/>*addr,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int64_t<sp/>result;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoor.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__AMOXOR_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int64_t<sp/>*addr,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int64_t<sp/>result;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amoxor.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/>__AMOMAXU_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>*addr,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>result;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amomaxu.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__AMOMAX_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int64_t<sp/>*addr,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int64_t<sp/>result;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amomax.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint64_t<sp/>__AMOMINU_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint64_t<sp/>*addr,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint64_t<sp/>result;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amominu.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int64_t<sp/>__AMOMIN_D(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>int64_t<sp/>*addr,<sp/>int64_t<sp/>value)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>int64_t<sp/>result;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" kindref="member">__ASM</ref><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;amomin.d<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(result),<sp/></highlight><highlight class="stringliteral">&quot;+A&quot;</highlight><highlight class="normal">(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*addr;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__RISCV_XLEN<sp/>==<sp/>64<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1171"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_CPU_Intrinsic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1175"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1177"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__CORE_FEATURE_BASE__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_feature_base.h"/>
  </compounddef>
</doxygen>
