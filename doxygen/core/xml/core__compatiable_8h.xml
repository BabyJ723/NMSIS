<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="core__compatiable_8h" kind="file">
    <compoundname>core_compatiable.h</compoundname>
    <includedby refid="nmsis__core_8h" local="yes">nmsis_core.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>core_compatiable.h</label>
        <link refid="core_compatiable.h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nmsis_core.h</label>
        <link refid="nmsis__core_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1gaad233022e850a009fc6f7602be1182f6" prot="public" static="no">
        <name>__ISB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3" kindref="member">__RWMB</ref>()</initializer>
        <briefdescription>
<para>Instruction Synchronization Barrier, compatiable with ARM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="40" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga067d257a2b34565410acefb5afef2203" prot="public" static="no">
        <name>__DSB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3" kindref="member">__RWMB</ref>()</initializer>
        <briefdescription>
<para>Data Synchronization Barrier, compatiable with ARM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="43" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga671101179b5943990785f36f8c1e2269" prot="public" static="no">
        <name>__DMB</name>
        <param></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga683c246c3fdba09511675365a2fa8bd3" kindref="member">__RWMB</ref>()</initializer>
        <briefdescription>
<para>Data Memory Barrier, compatiable with ARM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="46" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1gacf0a70f77355b4e92cbcf33294a2b834" prot="public" static="no">
        <name>__LDRBT</name>
        <param><defname>ptr</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga7f225699061594cd9a4d905a39cb9ae8" kindref="member">__LB</ref>((ptr))</initializer>
        <briefdescription>
<para>LDRT Unprivileged (8 bit), ARM Compatiable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="49" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1gaa16005628f00d6fadfc10a51b47df494" prot="public" static="no">
        <name>__LDRHT</name>
        <param><defname>ptr</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga08a0019225f8ecc2e0a5bdcefa77ec6f" kindref="member">__LH</ref>((ptr))</initializer>
        <briefdescription>
<para>LDRT Unprivileged (16 bit), ARM Compatiable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="51" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga40e9941f772bbbe5b0d7aa39dbdbd256" prot="public" static="no">
        <name>__LDRT</name>
        <param><defname>ptr</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1gaf898279e3db81302391a698214744865" kindref="member">__LW</ref>((ptr))</initializer>
        <briefdescription>
<para>LDRT Unprivileged (32 bit), ARM Compatiable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="53" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1gaa026f093007b11dccdb1f9fa5050bebe" prot="public" static="no">
        <name>__STRBT</name>
        <param><defname>ptr</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga85ee6d049f3b807b7c5f37513f6b95bd" kindref="member">__SB</ref>((ptr))</initializer>
        <briefdescription>
<para>STRT Unprivileged (8 bit), ARM Compatiable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="56" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga76ff41fa89fcab157544ee69e3e9fe5f" prot="public" static="no">
        <name>__STRHT</name>
        <param><defname>ptr</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga10e81b063600f3abb562f7a6efa3aaca" kindref="member">__SH</ref>((ptr))</initializer>
        <briefdescription>
<para>STRT Unprivileged (16 bit), ARM Compatiable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="58" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1gaede0b652148a370f75b23ce96ec92057" prot="public" static="no">
        <name>__STRT</name>
        <param><defname>ptr</defname></param>
        <initializer><ref refid="group__NMSIS__Core__CPU__Intrinsic_1ga9df58a7326fee34b546cae7d7d6e6de3" kindref="member">__SW</ref>((ptr))</initializer>
        <briefdescription>
<para>STRT Unprivileged (32 bit), ARM Compatiable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="60" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga0ffdc7f8b90076408f400768a7f5e372" prot="public" static="no">
        <name>__RBIT</name>
        <param><defname>value</defname></param>
        <initializer><ref refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD__MISC_1ga5061e392780b3bea521580befe37556f" kindref="member">__RV_BITREV</ref>((value), 31)</initializer>
        <briefdescription>
<para>Reverse bit order of value. </para>        </briefdescription>
        <detaileddescription>
<para>Reverses the bit order of the given value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="180" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__ARMCompatiable__Functions_1gacac866989a2f4d87628d02fd33fdc61d" prot="public" static="no">
        <name>__CLZ</name>
        <param><defname>data</defname></param>
        <initializer><ref refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__MISC_1ga5250b89ea0959cf4f02534c5cd30b79c" kindref="member">__RV_CLZ32</ref>(data)</initializer>
        <briefdescription>
<para>Count leading zeros. </para>        </briefdescription>
        <detaileddescription>
<para>Counts the number of leading zeros of a data value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to count the leading zeros </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of leading zeros in value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="205" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga372c0535573dde3e37f0f08c774a3487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __SSAT</definition>
        <argsstring>(int32_t val, uint32_t sat)</argsstring>
        <name>__SSAT</name>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sat</declname>
        </param>
        <briefdescription>
<para>Signed Saturate. </para>        </briefdescription>
        <detaileddescription>
<para>Saturates a signed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be saturated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sat</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit position to saturate to (1..32) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Saturated value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="70" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="70" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__ARMCompatiable__Functions_1ga6562dbd8182d1571e22dbca7ebdfa9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __USAT</definition>
        <argsstring>(int32_t val, uint32_t sat)</argsstring>
        <name>__USAT</name>
        <param>
          <type>int32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sat</declname>
        </param>
        <briefdescription>
<para>Unsigned Saturate. </para>        </briefdescription>
        <detaileddescription>
<para>Saturates an unsigned value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be saturated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sat</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit position to saturate to (0..31) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Saturated value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="91" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="91" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__ARMCompatiable__Functions_1gadb92679719950635fba8b1b954072695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __REV</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>__REV</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Reverse byte order (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="112" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="112" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__ARMCompatiable__Functions_1gaa12aedd096506c9639c1581acd5c6a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __REV16</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>__REV16</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Reverse byte order (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="130" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__ARMCompatiable__Functions_1gacb695341318226a5f69ed508166622ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> int16_t</type>
        <definition>__STATIC_FORCEINLINE int16_t __REVSH</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>__REVSH</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Reverse byte order (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="149" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__ARMCompatiable__Functions_1gab16acb6456176f1e87a4f2724c2b6028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __ROR</definition>
        <argsstring>(uint32_t op1, uint32_t op2)</argsstring>
        <name>__ROR</name>
        <param>
          <type>uint32_t</type>
          <declname>op1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>op2</declname>
        </param>
        <briefdescription>
<para>Rotate Right in unsigned value (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op1</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to rotate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op2</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Bits to rotate(0-31) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotated value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" line="164" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h" bodystart="164" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ARM compatiable function definitions header file. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CORE_COMPATIABLE_H__</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__CORE_COMPATIABLE_H__</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>ARM<sp/>Compatiable<sp/>Functions<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="40" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gaad233022e850a009fc6f7602be1182f6" refkind="member"><highlight class="preprocessor">#define<sp/>__ISB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RWMB()</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="43" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga067d257a2b34565410acefb5afef2203" refkind="member"><highlight class="preprocessor">#define<sp/>__DSB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RWMB()</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="46" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga671101179b5943990785f36f8c1e2269" refkind="member"><highlight class="preprocessor">#define<sp/>__DMB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RWMB()</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="49" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gacf0a70f77355b4e92cbcf33294a2b834" refkind="member"><highlight class="preprocessor">#define<sp/>__LDRBT(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LB((ptr))</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="51" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gaa16005628f00d6fadfc10a51b47df494" refkind="member"><highlight class="preprocessor">#define<sp/>__LDRHT(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LH((ptr))</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="53" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga40e9941f772bbbe5b0d7aa39dbdbd256" refkind="member"><highlight class="preprocessor">#define<sp/>__LDRT(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LW((ptr))</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="56" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gaa026f093007b11dccdb1f9fa5050bebe" refkind="member"><highlight class="preprocessor">#define<sp/>__STRBT(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__SB((ptr))</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="58" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga76ff41fa89fcab157544ee69e3e9fe5f" refkind="member"><highlight class="preprocessor">#define<sp/>__STRHT(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__SH((ptr))</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="60" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gaede0b652148a370f75b23ce96ec92057" refkind="member"><highlight class="preprocessor">#define<sp/>__STRT(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__SW((ptr))</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Saturation<sp/>Operations<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="70" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga372c0535573dde3e37f0f08c774a3487" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int32_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga372c0535573dde3e37f0f08c774a3487" kindref="member">__SSAT</ref>(int32_t<sp/>val,<sp/>uint32_t<sp/>sat)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sat<sp/>&gt;=<sp/>1U)<sp/>&amp;&amp;<sp/>(sat<sp/>&lt;=<sp/>32U))<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>max<sp/>=<sp/>(int32_t)((1U<sp/>&lt;&lt;<sp/>(sat<sp/>-<sp/>1U))<sp/>-<sp/>1U);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>min<sp/>=<sp/>-1<sp/>-<sp/>max<sp/>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>min)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga6562dbd8182d1571e22dbca7ebdfa9bc" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga6562dbd8182d1571e22dbca7ebdfa9bc" kindref="member">__USAT</ref>(int32_t<sp/>val,<sp/>uint32_t<sp/>sat)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sat<sp/>&lt;=<sp/>31U)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max<sp/>=<sp/>((1U<sp/>&lt;&lt;<sp/>sat)<sp/>-<sp/>1U);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>(int32_t)max)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0U;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)val;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>=====<sp/>Data<sp/>Processing<sp/>Operations<sp/>=====<sp/>*/</highlight></codeline>
<codeline lineno="112" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gadb92679719950635fba8b1b954072695" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1gadb92679719950635fba8b1b954072695" kindref="member">__REV</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>((value<sp/>&amp;<sp/>0xff000000)<sp/>&gt;&gt;<sp/>24)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&amp;<sp/>0x00ff0000)<sp/>&gt;&gt;<sp/>8<sp/>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&amp;<sp/>0x0000ff00)<sp/>&lt;&lt;<sp/>8<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&amp;<sp/>0x000000ff)<sp/>&lt;&lt;<sp/>24);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gaa12aedd096506c9639c1581acd5c6a78" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1gaa12aedd096506c9639c1581acd5c6a78" kindref="member">__REV16</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>((value<sp/>&amp;<sp/>0xff000000)<sp/>&gt;&gt;<sp/>8)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&amp;<sp/>0x00ff00000)<sp/>&lt;&lt;<sp/>8<sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&amp;<sp/>0x0000ff00)<sp/>&gt;&gt;<sp/>8<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((value<sp/>&amp;<sp/>0x000000ff)<sp/>&lt;&lt;<sp/>8)<sp/>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gacb695341318226a5f69ed508166622ac" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>int16_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1gacb695341318226a5f69ed508166622ac" kindref="member">__REVSH</ref>(int16_t<sp/>value)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>result;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>((value<sp/>&amp;<sp/>0xff00)<sp/>&gt;&gt;<sp/>8)<sp/>|<sp/>((value<sp/>&amp;<sp/>0x00ff)<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gab16acb6456176f1e87a4f2724c2b6028" refkind="member"><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1gab16acb6456176f1e87a4f2724c2b6028" kindref="member">__ROR</ref>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>op2<sp/>=<sp/>op2<sp/>&amp;<sp/>0x1F;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op2<sp/>==<sp/>0U)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(op1<sp/>&gt;&gt;<sp/>op2)<sp/>|<sp/>(op1<sp/>&lt;&lt;<sp/>(32U<sp/>-<sp/>op2));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor">#if<sp/>defined(__DSP_PRESENT)<sp/>&amp;&amp;<sp/>(__DSP_PRESENT<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="180" refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga0ffdc7f8b90076408f400768a7f5e372" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__RBIT(value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_BITREV((value),<sp/>31)</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint32_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1ga0ffdc7f8b90076408f400768a7f5e372" kindref="member">__RBIT</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>s<sp/>=<sp/>(4U<sp/></highlight><highlight class="comment">/*sizeof(v)*/</highlight><highlight class="normal"><sp/>*<sp/>8U)<sp/>-<sp/>1U;<sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>shift<sp/>needed<sp/>at<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>value;<sp/></highlight><highlight class="comment">/*<sp/>r<sp/>will<sp/>be<sp/>reversed<sp/>bits<sp/>of<sp/>v;<sp/>first<sp/>get<sp/>LSB<sp/>of<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(value<sp/>&gt;&gt;=<sp/>1U;<sp/>value<sp/>!=<sp/>0U;<sp/>value<sp/>&gt;&gt;=<sp/>1U)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>&lt;&lt;=<sp/>1U;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>value<sp/>&amp;<sp/>1U;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s--;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>&lt;&lt;=<sp/>s;<sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>when<sp/>v&apos;s<sp/>highest<sp/>bits<sp/>are<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(__DSP_PRESENT)<sp/>&amp;&amp;<sp/>(__DSP_PRESENT<sp/>==<sp/>1)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor">#if<sp/>defined(__DSP_PRESENT)<sp/>&amp;&amp;<sp/>(__DSP_PRESENT<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="205" refid="group__NMSIS__Core__ARMCompatiable__Functions_1gacac866989a2f4d87628d02fd33fdc61d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__CLZ(data)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__RV_CLZ32(data)</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref><sp/>uint8_t<sp/><ref refid="group__NMSIS__Core__ARMCompatiable__Functions_1gacac866989a2f4d87628d02fd33fdc61d" kindref="member">__CLZ</ref>(uint32_t<sp/>data)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>temp<sp/>=<sp/>~data;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp<sp/>&amp;<sp/>0x80000000)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret++;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(__DSP_PRESENT)<sp/>&amp;&amp;<sp/>(__DSP_PRESENT<sp/>==<sp/>1)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_ARMCompatiable_Functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__CORE_COMPATIABLE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/Core/Include/core_compatiable.h"/>
  </compounddef>
</doxygen>
