<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic_64B_ADDSUB</compoundname>
    <title>64-bit Addition &amp; Subtraction Instructions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga886e1cf9d61d72c7b6028f2e58ad9f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_ADD64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_ADD64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>ADD64 (64-bit Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: 64-bit Profile</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">ADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit signed or unsigned integers.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit integer of an even/odd pair of registers specified by Rs2(4,1), and then writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction has the same behavior as the ADD instruction in RV64I.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned addition.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal"><sp/>t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>R[t_H].R[t_L]<sp/>=<sp/>R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"><sp/>Rd<sp/>=<sp/>Rs1<sp/>+<sp/>Rs2;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="454" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="454" bodyend="459"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gace8675089dafa59f5ba9114232ffe31d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_KADD64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_KADD64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KADD64 (64-bit Signed Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit signed integers. The result is saturated to the Q63 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by Rs2(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed integer in Rs2. If the result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal"><sp/>t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>result<sp/>=<sp/>R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}<sp/>else<sp/>if<sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal"><sp/>result<sp/>=<sp/>Rs1<sp/>+<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal"><sp/>if<sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}<sp/>else<sp/>if<sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="1574" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="1574" bodyend="1579"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gad703720a47f05b3e322caffbcc45298a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_KSUB64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_KSUB64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>KSUB64 (64-bit Signed Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">KSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed integer subtraction. The result is saturated to the Q63 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit signed integer of an even/odd pair of registers specified by Rs1(4,1). If the 64-bit result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer of Rs2 from the 64-bit signed integer of Rs1. If the 64-bit result is beyond the Q63 number range (-2^63 &lt;= Q63 &lt;= 2^63-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>if<sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rs1<sp/>-<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>&gt;<sp/>(2^63)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^63)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>if<sp/>(result<sp/>&lt;<sp/>-2^63)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>-2^63;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="5401" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="5401" bodyend="5406"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga152f18d1ef922b3104cc763d00611511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_RADD64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_RADD64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RADD64 (64-bit Signed Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit signed integers. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit signed integer of an even/odd pair of registers specified by Rs2(4,1). The 64-bit addition result is first arithmetically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit signed integer in Rs1 with the 64-bit signed integer in Rs2. The 64-bit addition result is first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>+<sp/>Rs2)<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="6306" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6306" bodyend="6311"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gafc5f4bf4b712ae2559a30356fc9773a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> long long</type>
        <definition>__STATIC_FORCEINLINE long long __RV_RSUB64</definition>
        <argsstring>(long long a, long long b)</argsstring>
        <name>__RV_RSUB64</name>
        <param>
          <type>long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>RSUB64 (64-bit Signed Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed integer subtraction. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer of an even/odd pair of registers specified by Rb(4,1) from the 64-bit signed integer of an even/odd pair of registers specified by Ra(4,1). The subtraction result is first arithmetically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rt(4,1). Rx(4,1), i.e., value d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit signed integer in Rs2 from the 64-bit signed integer in Rs1. The 64-bit subtraction result is first arithmetically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L])<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>-<sp/>Rs2)<sp/>s&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="6725" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="6725" bodyend="6730"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga02ed3c841b85e58d5a40d78fa2f5519f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_SUB64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_SUB64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SUB64 (64-bit Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">SUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed or unsigned integer subtraction.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit integer of an even/odd pair of registers specified by Rs1(4,1), and then writes the 64-bit result to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit integer of Rs2 from the 64-bit integer of Rs1, and then writes the 64-bit result to Rd.</para><para><bold>Note</bold>:<linebreak/>
This instruction can be used for either signed or unsigned subtraction.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>Rs1<sp/>-<sp/>Rs2;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="10654" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="10654" bodyend="10659"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8f5a5ff9c41c49dfe0d7981c2e5ab139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UKADD64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_UKADD64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKADD64 (64-bit Unsigned Saturating Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit unsigned integers. The result is saturated to the U64 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1). If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned integer in Rs2. If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>&gt;<sp/>(2^64)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^64)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rs1<sp/>+<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>&gt;<sp/>(2^64)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>(2^64)-1;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="11412" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="11412" bodyend="11417"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8c38b38409eba3d05396b9d09c1b8382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_UKSUB64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_UKSUB64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>UKSUB64 (64-bit Unsigned Saturating Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">UKSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit signed integer subtraction. The result is saturated to the U64 range.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1). If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the operand and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the operand.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer of Rs2 from the 64-bit unsigned integer of an even/odd pair of Rs1. If the 64-bit result is beyond the U64 number range (0 &lt;= U64 &lt;= 2^64-1), it is saturated to the range and the OV bit is set to 1. The saturated result is then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rd(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Rs1(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rs2(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L];</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64</highlight></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>Rs1<sp/>-<sp/>Rs2;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>0;<sp/>OV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>result;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="12001" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12001" bodyend="12006"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1ga8458d1a5a3564b122ebe6b84115877e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_URADD64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_URADD64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URADD64 (64-bit Unsigned Halving Addition) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URADD64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Add two 64-bit unsigned integers. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1) with the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1). The 64-bit addition result is first logically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction adds the 64-bit unsigned integer in Rs1 with the 64-bit unsigned integer Rs2. The 64-bit addition result is first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>+<sp/>R[b_H].R[b_L])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>+<sp/>Rs2)<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="12881" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="12881" bodyend="12886"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__DSP__Intrinsic__64B__ADDSUB_1gabe20856e2f82d33c17ce4963ee2db286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__NMSIS__Core__CompilerControl_1gab904513442afdf77d4f8c74f23cbb040" kindref="member">__STATIC_FORCEINLINE</ref> unsigned long long</type>
        <definition>__STATIC_FORCEINLINE unsigned long long __RV_URSUB64</definition>
        <argsstring>(unsigned long long a, unsigned long long b)</argsstring>
        <name>__RV_URSUB64</name>
        <param>
          <type>unsigned long long</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned long long</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>URSUB64 (64-bit Unsigned Halving Subtraction) </para>        </briefdescription>
        <detaileddescription>
<para><bold>Type</bold>: DSP (64-bit Profile)</para><para><bold>Syntax</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">URSUB64<sp/>Rd,<sp/>Rs1,<sp/>Rs2</highlight></codeline>
</programlisting></para><para><bold>Purpose</bold>:<linebreak/>
Perform a 64-bit unsigned integer subtraction. The result is halved to avoid overflow or saturation.</para><para><bold>RV32 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer of an even/odd pair of registers specified by Rs2(4,1) from the 64-bit unsigned integer of an even/odd pair of registers specified by Rs1(4,1). The subtraction result is first logically right-shifted by 1 bit and then written to an even/odd pair of registers specified by Rd(4,1). Rx(4,1), i.e., d, determines the even/odd pair group of two registers. Specifically, the register pair includes register 2d and 2d+1. The odd <computeroutput>2d+1</computeroutput> register of the pair contains the high 32-bit of the result and the even <computeroutput>2d</computeroutput> register of the pair contains the low 32-bit of the result.</para><para><bold>RV64 Description</bold>:<linebreak/>
This instruction subtracts the 64-bit unsigned integer in Rs2 from the 64-bit unsigned integer in Rs1. The subtraction result is first logically right-shifted by 1 bit and then written to Rd.</para><para><bold>Operations</bold>:<linebreak/>
<programlisting><codeline><highlight class="normal">*<sp/>RV32:</highlight></codeline>
<codeline><highlight class="normal">t_L<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;b0);<sp/>t_H<sp/>=<sp/>CONCAT(Rt(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">a_L<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;b0);<sp/>a_H<sp/>=<sp/>CONCAT(Ra(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">b_L<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;b0);<sp/>b_H<sp/>=<sp/>CONCAT(Rb(4,1),1&apos;b1);</highlight></codeline>
<codeline><highlight class="normal">R[t_H].R[t_L]<sp/>=<sp/>(R[a_H].R[a_L]<sp/>-<sp/>R[b_H].R[b_L])<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">*<sp/>RV64:</highlight></codeline>
<codeline><highlight class="normal">Rd<sp/>=<sp/>(Rs1<sp/>-<sp/>Rs2)<sp/>u&gt;&gt;<sp/>1;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" line="13273" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/NMSIS/Core/Include/core_feature_dsp.h" bodystart="13273" bodyend="13278"/>
        <references refid="group__NMSIS__Core__CompilerControl_1ga1378040bcf22428955c6e3ce9c2053cd" compoundref="nmsis__gcc_8h" startline="59">__ASM</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>64-bit Addition &amp; Subtraction Instructions </para>    </briefdescription>
    <detaileddescription>
<para>there are 10 64-bit Addition &amp; Subtraction Instructions. </para>    </detaileddescription>
  </compounddef>
</doxygen>
