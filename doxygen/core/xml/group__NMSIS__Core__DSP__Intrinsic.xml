<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__NMSIS__Core__DSP__Intrinsic" kind="group">
    <compoundname>NMSIS_Core_DSP_Intrinsic</compoundname>
    <title>Intrinsic Functions for SIMD Instructions</title>
    <innergroup refid="group__NMSIS__Core__DSP__Intrinsic__SIMD__DATA__PROCESS">SIMD Data Processing Instructions</innergroup>
    <innergroup refid="group__NMSIS__Core__DSP__Intrinsic__NON__SIMD">Non-SIMD Instructions</innergroup>
    <innergroup refid="group__NMSIS__Core__DSP__Intrinsic__PART__SIMD__DATA__PROCESS">Partial-SIMD Data Processing Instructions</innergroup>
    <innergroup refid="group__NMSIS__Core__DSP__Intrinsic__64B__PROFILE">64-bit Profile Instructions</innergroup>
    <innergroup refid="group__NMSIS__Core__DSP__Intrinsic__NUCLEI__CUSTOM">Nuclei Customized DSP Instructions</innergroup>
    <briefdescription>
<para>Functions that generate RISC-V DSP SIMD instructions. </para>    </briefdescription>
    <detaileddescription>
<para>The following functions generate specified RISC-V SIMD instructions that cannot be directly accessed by compiler.<itemizedlist>
<listitem><para><bold>DSP ISA Extension Instruction Summary</bold><itemizedlist>
<listitem><para><bold>Shorthand Definitions</bold><itemizedlist>
<listitem><para>r.H == rH1: r[31:16], r.L == r.H0: r[15:0]</para></listitem><listitem><para>r.B3: r[31:24], r.B2: r[23:16], r.B1: r[15:8], r.B0: r[7:0]</para></listitem><listitem><para>r.B[x]: r[(x*8+7):(x*8+0)]</para></listitem><listitem><para>r.H[x]: r[(x*16+7):(x*16+0)]</para></listitem><listitem><para>r.W[x]: r[(x*32+31):(x*32+0)]</para></listitem><listitem><para>r[xU]: the upper 32-bit of a 64-bit number; xU represents the GPR number that contains this upper part 32-bit value.</para></listitem><listitem><para>r[xL]: the lower 32-bit of a 64-bit number; xL represents the GPR number that contains this lower part 32-bit value.</para></listitem><listitem><para>r[xU].r[xL]: a 64-bit number that is formed from a pair of GPRs.</para></listitem><listitem><para>s&gt;&gt;: signed arithmetic right shift:</para></listitem><listitem><para>u&gt;&gt;: unsigned logical right shift</para></listitem><listitem><para>SAT.Qn(): Saturate to the range of [-2^n, 2^n-1], if saturation happens, set PSW.OV.</para></listitem><listitem><para>SAT.Um(): Saturate to the range of [0, 2^m-1], if saturation happens, set PSW.OV.</para></listitem><listitem><para>RUND(): Indicate <computeroutput>rounding</computeroutput>, i.e., add 1 to the most significant discarded bit for right shift or MSW-type multiplication instructions.</para></listitem><listitem><para>Sign or Zero Extending functions:<itemizedlist>
<listitem><para>SEm(data): Sign-Extend data to m-bit.:</para></listitem><listitem><para>ZEm(data): Zero-Extend data to m-bit.</para></listitem></itemizedlist>
</para></listitem><listitem><para>ABS(x): Calculate the absolute value of <computeroutput>x</computeroutput>.</para></listitem><listitem><para>CONCAT(x,y): Concatinate <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> to form a value.</para></listitem><listitem><para>u&lt;: Unsinged less than comparison.</para></listitem><listitem><para>u&lt;=: Unsinged less than &amp; equal comparison.</para></listitem><listitem><para>u&gt;: Unsinged greater than comparison.</para></listitem><listitem><para>s*: Signed multiplication.</para></listitem><listitem><para>u*: Unsigned multiplication. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
