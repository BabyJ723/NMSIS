<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="system__Device_8c" kind="file" language="C++">
    <compoundname>system_Device.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">Device</includes>
    <incdepgraph>
      <node id="69">
        <label>stdint.h</label>
      </node>
      <node id="70">
        <label>Device</label>
      </node>
      <node id="68">
        <label>system_Device.c</label>
        <link refid="system__Device_8c"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="system__Device_8c_1a3cad0f9b3c40159bd2fbd7f5e60f2fff" prot="public" static="no">
        <name>XTAL</name>
        <initializer>(12000000U)       /* Oscillator frequency             */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="35" column="9" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="system__Device_8c_1a95982eccb57c2ae35f8ba3d8f0b05653" prot="public" static="no">
        <name>SYSTEM_CLOCK</name>
        <initializer>(5 * XTAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="37" column="9" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__NMSIS__Core__IntExcNMI__Handling_1ga10f1bcf88d4be44d559c79485f16dd24" prot="public" static="no">
        <name>MAX_SYSTEM_EXCEPTION_NUM</name>
        <initializer>12</initializer>
        <briefdescription>
<para>Max exception handler number, don&apos;t include the NMI(0xFFF) one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="141" column="9" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__NMSIS__Core__IntExcNMI__Handling_1gacdea0407312bb8428c98044b5aef3e23" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* EXC_HANDLER) (unsigned long mcause, unsigned long sp)</definition>
        <argsstring>)(unsigned long mcause, unsigned long sp)</argsstring>
        <name>EXC_HANDLER</name>
        <briefdescription>
<para>Exception Handler Function Typedef. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This typedef is only used internal in this system_&lt;Device&gt;.c file. It is used to do type conversion for registered exception handler before calling it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="158" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__NMSIS__Core__SystemConfig_1gaa3cd3e43291e81e795d642b79b6088e6" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t SystemCoreClock</definition>
        <argsstring></argsstring>
        <name>SystemCoreClock</name>
        <initializer>= SYSTEM_CLOCK</initializer>
        <briefdescription>
<para>Variable to hold the system core clock value. </para>        </briefdescription>
        <detaileddescription>
<para>Holds the system core clock, which is the system clock frequency supplied to the SysTick timer and the processor core clock. This variable can be used by debuggers to query the frequency of the debug timer or to configure the trace clock speed.</para><para><simplesect kind="attention"><para>Compilers must be configured to avoid removing this variable in case the application program is not using it. Debugging systems require the variable to be physically present in memory so that it can be examined to configure the debugger. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="89" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__NMSIS__Core__IntExcNMI__Handling_1gaedd77e0eba0ea9872a4375893480b420" prot="public" static="yes" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM+1]</definition>
        <argsstring>[MAX_SYSTEM_EXCEPTION_NUM+1]</argsstring>
        <name>SystemExceptionHandlers</name>
        <briefdescription>
<para>Store the exception handlers for each exception ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><itemizedlist>
<listitem><para>This SystemExceptionHandlers are used to store all the handlers for all the exception codes Nuclei N/NX core provided.</para></listitem><listitem><para>Exception code 0 - 11, totally 12 exceptions are mapped to SystemExceptionHandlers[0:11]</para></listitem><listitem><para>Exception for NMI is also re-routed to exception handling(exception code 0xFFF) in startup code configuration, the handler itself is mapped to SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM] </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="150" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__NMSIS__Core__SystemConfig_1gae0c36a9591fe6e9c45ecb21a794f0f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SystemCoreClockUpdate</definition>
        <argsstring>(void)</argsstring>
        <name>SystemCoreClockUpdate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to update the variable <ref refid="group__NMSIS__Core__SystemConfig_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Updates the variable <ref refid="group__NMSIS__Core__SystemConfig_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref> and must be called whenever the core clock is changed during program execution. The function evaluates the clock register settings and calculates the current core clock. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="103" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__SystemConfig_1ga93f514700ccf00d08dbdcff7f1224eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SystemInit</definition>
        <argsstring>(void)</argsstring>
        <name>SystemInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to Initialize the system. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes the microcontroller system. Typically, this function configures the oscillator (PLL) that is part of the microcontroller device. For systems with a variable clock speed, it updates the variable <ref refid="group__NMSIS__Core__SystemConfig_1gaa3cd3e43291e81e795d642b79b6088e6" kindref="member">SystemCoreClock</ref>. SystemInit is called from the file <bold>startup<emphasis>_device</emphasis></bold>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="121" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="121" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1ga97971400b10d2cdd33f0d1fb59f9d0c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void system_default_exception_handler</definition>
        <argsstring>(unsigned long mcause, unsigned long sp)</argsstring>
        <name>system_default_exception_handler</name>
        <param>
          <type>unsigned long</type>
          <declname>mcause</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>System Default Exception Handler. </para>        </briefdescription>
        <detaileddescription>
<para>This function provided a default exception and NMI handling code for all exception ids. By default, It will just print some information for debug, Vendor can customize it according to its requirements. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="166" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="166" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1gab6afbaed495af51eeeb4eb7d1c5da420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Exception_Init</definition>
        <argsstring>(void)</argsstring>
        <name>Exception_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize all the default core exception handlers. </para>        </briefdescription>
        <detaileddescription>
<para>The core exception handler for each exception id will be initialized to <ref refid="group__NMSIS__Core__IntExcNMI__Handling_1ga97971400b10d2cdd33f0d1fb59f9d0c8" kindref="member">system_default_exception_handler</ref>. <simplesect kind="note"><para>Called in <ref refid="group__NMSIS__Core__SystemConfig_1gad1cbc4315ef293463e6057dfb24c8115" kindref="member">_init</ref> function, used to initialize default exception handlers for all exception IDs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="183" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1ga9df7d45dd6f418ba31b6cec6c4958490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Exception_Register_EXC</definition>
        <argsstring>(uint32_t EXCn, unsigned long exc_handler)</argsstring>
        <name>Exception_Register_EXC</name>
        <param>
          <type>uint32_t</type>
          <declname>EXCn</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>exc_handler</declname>
        </param>
        <briefdescription>
<para>Register an exception handler for exception code EXCn. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>For EXCn &lt; <ref refid="group__NMSIS__Core__IntExcNMI__Handling_1ga10f1bcf88d4be44d559c79485f16dd24" kindref="member">MAX_SYSTEM_EXCEPTION_NUM</ref>, it will be registered into SystemExceptionHandlers[EXCn-1].</para></listitem><listitem><para>For EXCn == NMI_EXCn, it will be registered into SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM]. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>EXCn</parametername>
</parameternamelist>
<parameterdescription>
<para>See EXCn_Type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exc_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception handler for this exception code EXCn </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="198" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1ga84df4676c5284f0ea383eeba33e9aa40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long Exception_Get_EXC</definition>
        <argsstring>(uint32_t EXCn)</argsstring>
        <name>Exception_Get_EXC</name>
        <param>
          <type>uint32_t</type>
          <declname>EXCn</declname>
        </param>
        <briefdescription>
<para>Get current exception handler for exception code EXCn. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>For EXCn &lt; <ref refid="group__NMSIS__Core__IntExcNMI__Handling_1ga10f1bcf88d4be44d559c79485f16dd24" kindref="member">MAX_SYSTEM_EXCEPTION_NUM</ref>, it will return SystemExceptionHandlers[EXCn-1].</para></listitem><listitem><para>For EXCn == NMI_EXCn, it will return SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM]. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>EXCn</parametername>
</parameternamelist>
<parameterdescription>
<para>See EXCn_Type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current exception handler for exception code EXCn, if not found, return 0. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="215" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="215" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1gac7f5b810aee623f65822bac1efe2006d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t core_exception_handler</definition>
        <argsstring>(unsigned long mcause, unsigned long sp)</argsstring>
        <name>core_exception_handler</name>
        <param>
          <type>unsigned long</type>
          <declname>mcause</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Common NMI and Exception handler entry. </para>        </briefdescription>
        <detaileddescription>
<para>This function provided a command entry for NMI and exception. Silicon Vendor could modify this template implementation according to requirement. <simplesect kind="remark"><para><itemizedlist>
<listitem><para>RISCV provided common entry for all types of exception. This is proposed code template for exception entry function, Silicon Vendor could modify the implementation.</para></listitem><listitem><para>For the core_exception_handler template, we provided exception register function Exception_Register_EXCn which can help developer to register your exception handler for specific exception number. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="237" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="237" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1ga2d2e27f47287f5d28cc26f2cb214337f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECLIC_Init</definition>
        <argsstring>(void)</argsstring>
        <name>ECLIC_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize Global ECLIC Config. </para>        </briefdescription>
        <detaileddescription>
<para>ECLIC needs be initialized after boot up, Vendor could also change the initialization configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="262" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="262" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__IntExcNMI__Handling_1ga52cbc8fa60b210b75ac79baa25ac74bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ECLIC_Register_IRQ</definition>
        <argsstring>(IRQn_Type IRQn, uint8_t shv, ECLIC_TRIGGER_Type trig_mode, uint8_t lvl, uint8_t priority, void *handler)</argsstring>
        <name>ECLIC_Register_IRQ</name>
        <param>
          <type><ref refid="group__NMSIS__Core__IntExc_1ga7e1129cd8a196f4284d41db3e82ad5c8" kindref="member">IRQn_Type</ref></type>
          <declname>IRQn</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>shv</declname>
        </param>
        <param>
          <type><ref refid="group__NMSIS__Core__ECLIC__Registers_1ga35f79c25d5118ccfde82872bc5946ecf" kindref="member">ECLIC_TRIGGER_Type</ref></type>
          <declname>trig_mode</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize a specific IRQ and register the handler. </para>        </briefdescription>
        <detaileddescription>
<para>This function set vector mode, trigger mode and polarity, interrupt level and priority, assign handler for specific IRQn. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">IRQn</parametername>
</parameternamelist>
<parameterdescription>
<para>NMI interrupt handler address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shv</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__NMSIS__Core__ECLIC__Registers_1ga6a01697e0ba89c691f98fee801f4a25c" kindref="member">ECLIC_NON_VECTOR_INTERRUPT</ref> means non-vector mode, and <ref refid="group__NMSIS__Core__ECLIC__Registers_1ga915384ab6567d38315e8cf5a566f4840" kindref="member">ECLIC_VECTOR_INTERRUPT</ref> is vector mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trig_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>see <ref refid="group__NMSIS__Core__ECLIC__Registers_1ga35f79c25d5118ccfde82872bc5946ecf" kindref="member">ECLIC_TRIGGER_Type</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>interupt level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt priority </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt handler return -1 means invalid input parameter. 0 means successful. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para><itemizedlist>
<listitem><para>This function use to configure specific eclic interrupt and register its interrupt handler and enable its interrupt. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="286" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="286" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__SystemConfig_1gad1cbc4315ef293463e6057dfb24c8115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _init</definition>
        <argsstring>(void)</argsstring>
        <name>_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>_init function called in __libc_init_array() </para>        </briefdescription>
        <detaileddescription>
<para>This <computeroutput>__libc_init_array()</computeroutput> function is called during startup code, user need to implement this function, otherwise when link it will error init.c:(.text.__libc_init_array+0x26): undefined reference to `_init&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="316" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="316" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="group__NMSIS__Core__SystemConfig_1ga173a20f19acf36985bbac6786a02b544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _fini</definition>
        <argsstring>(void)</argsstring>
        <name>_fini</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>_fini function called in __libc_fini_array() </para>        </briefdescription>
        <detaileddescription>
<para>This <computeroutput>__libc_fini_array()</computeroutput> function is called when exit main. user need to implement this function, otherwise when link it will error fini.c:(.text.__libc_fini_array+0x28): undefined reference to `_fini&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" line="336" column="1" bodyfile="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c" bodystart="336" bodyend="340"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2009-2018<sp/>Arm<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>@file<sp/><sp/><sp/><sp/><sp/>system_&lt;Device&gt;.c</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/>NMSIS<sp/>Nuclei<sp/>N/NX<sp/>Device<sp/>Peripheral<sp/>Access<sp/>Layer<sp/>Source<sp/>File<sp/>for</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Device<sp/>&lt;Device&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>@version<sp/><sp/>V1.00</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>@date<sp/><sp/><sp/><sp/><sp/>17.<sp/>Dec<sp/>2019</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;&lt;Device&gt;</highlight><highlight class="normal">.h</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">/*----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/>Define<sp/>clocks</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/>*----------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">/*<sp/>TODO:<sp/>add<sp/>here<sp/>your<sp/>necessary<sp/>defines<sp/>for<sp/>device<sp/>initialization</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>following<sp/>is<sp/>an<sp/>example<sp/>for<sp/>different<sp/>system<sp/>frequencies<sp/>*/</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">#define<sp/>XTAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(12000000U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>Oscillator<sp/>frequency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">#define<sp/>SYSTEM_CLOCK<sp/><sp/><sp/><sp/>(5<sp/>*<sp/>XTAL)</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral">/*----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/>System<sp/>Core<sp/>Clock<sp/>Variable</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/>*----------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral">/*<sp/>TODO:<sp/>initialize<sp/>SystemCoreClock<sp/>with<sp/>the<sp/>system<sp/>core<sp/>clock<sp/>frequency<sp/>value</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>achieved<sp/>after<sp/>system<sp/>intitialization.</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>means<sp/>system<sp/>core<sp/>clock<sp/>frequency<sp/>after<sp/>call<sp/>to<sp/>SystemInit()<sp/>*/</highlight></codeline>
<codeline lineno="89" refid="group__NMSIS__Core__SystemConfig_1gaa3cd3e43291e81e795d642b79b6088e6" refkind="member"><highlight class="stringliteral">uint32_t<sp/>SystemCoreClock<sp/>=<sp/>SYSTEM_CLOCK;<sp/><sp/>/*<sp/>System<sp/>Clock<sp/>Frequency<sp/>(Core<sp/>Clock)<sp/>*/</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral">/*----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/>Clock<sp/>functions</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/>*----------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="103" refid="group__NMSIS__Core__SystemConfig_1gae0c36a9591fe6e9c45ecb21a794f0f0f" refkind="member"><highlight class="stringliteral">void<sp/>SystemCoreClockUpdate<sp/>(void)<sp/><sp/>/*<sp/>Get<sp/>Core<sp/>Clock<sp/>Frequency<sp/>*/</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>TODO:<sp/>add<sp/>code<sp/>to<sp/>calculate<sp/>the<sp/>system<sp/>frequency<sp/>based<sp/>upon<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>register<sp/>settings.</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>retrieve<sp/>the<sp/>system<sp/>core<sp/>clock<sp/>frequeny</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>after<sp/>user<sp/>changed<sp/>register<sp/>settings.</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/>SYSTEM_CLOCK;</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121" refid="group__NMSIS__Core__SystemConfig_1ga93f514700ccf00d08dbdcff7f1224eb2" refkind="member"><highlight class="stringliteral">void<sp/>SystemInit<sp/>(void)</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>TODO:<sp/>add<sp/>code<sp/>to<sp/>initialize<sp/>the<sp/>system</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/>Warn:<sp/>do<sp/>not<sp/>use<sp/>global<sp/>variables<sp/>because<sp/>this<sp/>function<sp/>is<sp/>called<sp/>before</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/>reaching<sp/>pre-main.<sp/>RW<sp/>section<sp/>maybe<sp/>overwritten<sp/>afterwards.</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>SystemCoreClock<sp/>=<sp/>SYSTEM_CLOCK;</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141" refid="group__NMSIS__Core__IntExcNMI__Handling_1ga10f1bcf88d4be44d559c79485f16dd24" refkind="member"><highlight class="stringliteral">#define<sp/>MAX_SYSTEM_EXCEPTION_NUM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight></codeline>
<codeline lineno="150" refid="group__NMSIS__Core__IntExcNMI__Handling_1gaedd77e0eba0ea9872a4375893480b420" refkind="member"><highlight class="stringliteral">static<sp/>unsigned<sp/>long<sp/>SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM+1];</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="158" refid="group__NMSIS__Core__IntExcNMI__Handling_1gacdea0407312bb8428c98044b5aef3e23" refkind="member"><highlight class="stringliteral">typedef<sp/>void<sp/>(*EXC_HANDLER)<sp/>(unsigned<sp/>long<sp/>mcause,<sp/>unsigned<sp/>long<sp/>sp);</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="166" refid="group__NMSIS__Core__IntExcNMI__Handling_1ga97971400b10d2cdd33f0d1fb59f9d0c8" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>system_default_exception_handler(unsigned<sp/>long<sp/>mcause,<sp/>unsigned<sp/>long<sp/>sp)</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>TODO:<sp/>Uncomment<sp/>this<sp/>if<sp/>you<sp/>have<sp/>implement<sp/>printf<sp/>function.</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/>Or<sp/>you<sp/>can<sp/>implement<sp/>your<sp/>own<sp/>version<sp/>as<sp/>you<sp/>like<sp/>*/</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//printf(&quot;</highlight><highlight class="normal">MCAUSE:<sp/>0x%lx\r\n</highlight><highlight class="stringliteral">&quot;,<sp/>mcause);</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//printf(&quot;</highlight><highlight class="normal">MEPC<sp/><sp/>:<sp/>0x%lx\r\n</highlight><highlight class="stringliteral">&quot;,<sp/>__RV_CSR_READ(CSR_MEPC));</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//printf(&quot;</highlight><highlight class="normal">MTVAL<sp/>:<sp/>0x%lx\r\n</highlight><highlight class="stringliteral">&quot;,<sp/>__RV_CSR_READ(CSR_MBADADDR));</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183" refid="group__NMSIS__Core__IntExcNMI__Handling_1gab6afbaed495af51eeeb4eb7d1c5da420" refkind="member"><highlight class="stringliteral">static<sp/>void<sp/>Exception_Init(void)</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_SYSTEM_EXCEPTION_NUM+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemExceptionHandlers[i]<sp/>=<sp/>(unsigned<sp/>long)system_default_exception_handler;</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="198" refid="group__NMSIS__Core__IntExcNMI__Handling_1ga9df7d45dd6f418ba31b6cec6c4958490" refkind="member"><highlight class="stringliteral">void<sp/>Exception_Register_EXC(uint32_t<sp/>EXCn,<sp/>unsigned<sp/>long<sp/>exc_handler)</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>((EXCn<sp/>&lt;<sp/>MAX_SYSTEM_EXCEPTION_NUM)<sp/>&amp;&amp;<sp/>(EXCn<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemExceptionHandlers[EXCn]<sp/>=<sp/>exc_handler;</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(EXCn<sp/>==<sp/>NMI_EXCn)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM]<sp/>=<sp/>exc_handler;</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="215" refid="group__NMSIS__Core__IntExcNMI__Handling_1ga84df4676c5284f0ea383eeba33e9aa40" refkind="member"><highlight class="stringliteral">unsigned<sp/>long<sp/>Exception_Get_EXC(uint32_t<sp/>EXCn)</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>((EXCn<sp/>&lt;<sp/>MAX_SYSTEM_EXCEPTION_NUM)<sp/>&amp;&amp;<sp/>(EXCn<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SystemExceptionHandlers[EXCn];</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(EXCn<sp/>==<sp/>NMI_EXCn)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM];</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="237" refid="group__NMSIS__Core__IntExcNMI__Handling_1gac7f5b810aee623f65822bac1efe2006d" refkind="member"><highlight class="stringliteral">uint32_t<sp/>core_exception_handler(unsigned<sp/>long<sp/>mcause,<sp/>unsigned<sp/>long<sp/>sp)</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>uint32_t<sp/>EXCn<sp/>=<sp/>(uint32_t)(mcause<sp/>&amp;<sp/>0X00000fff);</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>EXC_HANDLER<sp/>exc_handler;</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>((EXCn<sp/>&lt;<sp/>MAX_SYSTEM_EXCEPTION_NUM)<sp/>&amp;&amp;<sp/>(EXCn<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exc_handler<sp/>=<sp/>(EXC_HANDLER)SystemExceptionHandlers[EXCn];</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(EXCn<sp/>==<sp/>NMI_EXCn)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exc_handler<sp/>=<sp/>(EXC_HANDLER)SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM];</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exc_handler<sp/>=<sp/>(EXC_HANDLER)system_default_exception_handler;</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(exc_handler<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exc_handler(mcause,<sp/>sp);</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="262" refid="group__NMSIS__Core__IntExcNMI__Handling_1ga2d2e27f47287f5d28cc26f2cb214337f" refkind="member"><highlight class="stringliteral">void<sp/>ECLIC_Init(void)</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>Global<sp/>Configuration<sp/>about<sp/>MTH<sp/>and<sp/>NLBits.</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:<sp/>Please<sp/>adapt<sp/>it<sp/>according<sp/>to<sp/>your<sp/>system<sp/>requirement.<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>is<sp/>called<sp/>in<sp/>_init<sp/>function<sp/>*/</highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetMth(0);</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetCfgNlbits(2);</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="286" refid="group__NMSIS__Core__IntExcNMI__Handling_1ga52cbc8fa60b210b75ac79baa25ac74bb" refkind="member"><highlight class="stringliteral">int32_t<sp/>ECLIC_Register_IRQ(IRQn_Type<sp/>IRQn,<sp/>uint8_t<sp/>shv,<sp/>ECLIC_TRIGGER_Type<sp/>trig_mode,<sp/>uint8_t<sp/>lvl,<sp/>uint8_t<sp/>priority,<sp/>void<sp/>*handler)</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>((IRQn<sp/>&gt;<sp/>SOC_INT_MAX)<sp/>||<sp/>(shv<sp/>&gt;<sp/>ECLIC_VECTOR_INTERRUPT)<sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(trig_mode<sp/>&gt;<sp/>ECLIC_NEGTIVE_EDGE_TRIGGER<sp/>)<sp/>||<sp/>(handler<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>set<sp/>interrupt<sp/>vector<sp/>mode<sp/>*/</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetShvIRQ(IRQn,<sp/>shv);</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>set<sp/>interrupt<sp/>trigger<sp/>mode<sp/>and<sp/>polarity<sp/>*/</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetTrigIRQ(IRQn,<sp/>trig_mode);</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>set<sp/>interrupt<sp/>level<sp/>*/</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetLevelIRQ(IRQn,<sp/>lvl);</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>set<sp/>interrupt<sp/>priority<sp/>*/</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetPriorityIRQ(IRQn,<sp/>priority);</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>set<sp/>interrupt<sp/>handler<sp/>entry<sp/>to<sp/>vector<sp/>table<sp/>*/</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_SetVector(IRQn,<sp/>(rv_csr_t)handler);</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>enable<sp/>interrupt<sp/>*/</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_EnableIRQ(IRQn);<sp/></highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral">}<sp/>/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_ExceptionAndNMI<sp/>*/</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="316" refid="group__NMSIS__Core__SystemConfig_1gad1cbc4315ef293463e6057dfb24c8115" refkind="member"><highlight class="stringliteral">void<sp/>_init(void)</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>TODO:<sp/>Add<sp/>your<sp/>own<sp/>initialization<sp/>code<sp/>here,<sp/>called<sp/>before<sp/>main<sp/>via<sp/>__libc_init_array<sp/>*/</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Add<sp/>code<sp/>to<sp/>set<sp/>the<sp/>system<sp/>clock<sp/>frequency<sp/>value<sp/>SystemCoreClock</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Add<sp/>code<sp/>to<sp/>initialize<sp/>necessary<sp/>gpio<sp/>and<sp/>basic<sp/>uart<sp/>for<sp/>debug<sp/>print</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>Initialize<sp/>exception<sp/>default<sp/>handlers<sp/>*/</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Exception_Init();</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>ECLIC<sp/>initilization,<sp/>mainly<sp/>MTH<sp/>and<sp/>NLBIT<sp/>settings<sp/>*/</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ECLIC_Init();</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="336" refid="group__NMSIS__Core__SystemConfig_1ga173a20f19acf36985bbac6786a02b544" refkind="member"><highlight class="stringliteral">void<sp/>_fini(void)</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>/*<sp/>TODO:<sp/>Add<sp/>your<sp/>own<sp/>finishing<sp/>code<sp/>here,<sp/>called<sp/>after<sp/>main<sp/>via<sp/>__libc_fini_array<sp/>*/</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/>/*<sp/>End<sp/>of<sp/>Doxygen<sp/>Group<sp/>NMSIS_Core_SystemAndClock<sp/>*/</highlight></codeline>
    </programlisting>
    <location file="/home/xl_ci/gitlab-runner/builds/f5c994c2/0/software/library/cmsis-5-riscv/CMSIS/nmsis_release/Device/_Template_Vendor/Vendor/Device/Source/system_Device.c"/>
  </compounddef>
</doxygen>
