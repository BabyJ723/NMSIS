<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="riscv__math_8h" kind="file">
    <compoundname>riscv_math.h</compoundname>
    <includes local="yes">nmsis_core.h</includes>
    <includes local="yes">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">float.h</includes>
    <includedby refid="riscv__class__marks__example__f32_8c" local="yes">riscv_class_marks_example_f32.c</includedby>
    <includedby refid="riscv__convolution__example_2math__helper_8h" local="yes">math_helper.h</includedby>
    <includedby refid="riscv__convolution__example__f32_8c" local="yes">riscv_convolution_example_f32.c</includedby>
    <includedby refid="riscv__dotproduct__example__f32_8c" local="yes">riscv_dotproduct_example_f32.c</includedby>
    <includedby refid="riscv__fft__bin__data_8c" local="yes">riscv_fft_bin_data.c</includedby>
    <includedby refid="riscv__fft__bin__example__f32_8c" local="yes">riscv_fft_bin_example_f32.c</includedby>
    <includedby refid="riscv__fir__example_2math__helper_8h" local="yes">math_helper.h</includedby>
    <includedby refid="riscv__fir__data_8c" local="yes">riscv_fir_data.c</includedby>
    <includedby refid="riscv__fir__example__f32_8c" local="yes">riscv_fir_example_f32.c</includedby>
    <includedby refid="riscv__graphic__equalizer__example_2math__helper_8h" local="yes">math_helper.h</includedby>
    <includedby refid="riscv__graphic__equalizer__data_8c" local="yes">riscv_graphic_equalizer_data.c</includedby>
    <includedby refid="riscv__graphic__equalizer__example__q31_8c" local="yes">riscv_graphic_equalizer_example_q31.c</includedby>
    <includedby refid="riscv__linear__interp__example_2math__helper_8h" local="yes">math_helper.h</includedby>
    <includedby refid="riscv__linear__interp__example__f32_8c" local="yes">riscv_linear_interp_example_f32.c</includedby>
    <includedby refid="riscv__matrix__example_2math__helper_8h" local="yes">math_helper.h</includedby>
    <includedby refid="riscv__matrix__example__f32_8c" local="yes">riscv_matrix_example_f32.c</includedby>
    <includedby refid="riscv__signal__converge__example_2math__helper_8h" local="yes">math_helper.h</includedby>
    <includedby refid="riscv__signal__converge__data_8c" local="yes">riscv_signal_converge_data.c</includedby>
    <includedby refid="riscv__signal__converge__example__f32_8c" local="yes">riscv_signal_converge_example_f32.c</includedby>
    <includedby refid="riscv__sin__cos__example__f32_8c" local="yes">riscv_sin_cos_example_f32.c</includedby>
    <includedby refid="riscv__variance__example__f32_8c" local="yes">riscv_variance_example_f32.c</includedby>
    <includedby refid="riscv__common__tables_8h" local="yes">riscv_common_tables.h</includedby>
    <includedby refid="riscv__const__structs_8h" local="yes">riscv_const_structs.h</includedby>
    <includedby refid="riscv__abs__f32_8c" local="yes">riscv_abs_f32.c</includedby>
    <includedby refid="riscv__abs__q15_8c" local="yes">riscv_abs_q15.c</includedby>
    <includedby refid="riscv__abs__q31_8c" local="yes">riscv_abs_q31.c</includedby>
    <includedby refid="riscv__abs__q7_8c" local="yes">riscv_abs_q7.c</includedby>
    <includedby refid="riscv__add__f32_8c" local="yes">riscv_add_f32.c</includedby>
    <includedby refid="riscv__add__q15_8c" local="yes">riscv_add_q15.c</includedby>
    <includedby refid="riscv__add__q31_8c" local="yes">riscv_add_q31.c</includedby>
    <includedby refid="riscv__add__q7_8c" local="yes">riscv_add_q7.c</includedby>
    <includedby refid="riscv__dot__prod__f32_8c" local="yes">riscv_dot_prod_f32.c</includedby>
    <includedby refid="riscv__dot__prod__q15_8c" local="yes">riscv_dot_prod_q15.c</includedby>
    <includedby refid="riscv__dot__prod__q31_8c" local="yes">riscv_dot_prod_q31.c</includedby>
    <includedby refid="riscv__dot__prod__q7_8c" local="yes">riscv_dot_prod_q7.c</includedby>
    <includedby refid="riscv__mult__f32_8c" local="yes">riscv_mult_f32.c</includedby>
    <includedby refid="riscv__mult__q15_8c" local="yes">riscv_mult_q15.c</includedby>
    <includedby refid="riscv__mult__q31_8c" local="yes">riscv_mult_q31.c</includedby>
    <includedby refid="riscv__mult__q7_8c" local="yes">riscv_mult_q7.c</includedby>
    <includedby refid="riscv__negate__f32_8c" local="yes">riscv_negate_f32.c</includedby>
    <includedby refid="riscv__negate__q15_8c" local="yes">riscv_negate_q15.c</includedby>
    <includedby refid="riscv__negate__q31_8c" local="yes">riscv_negate_q31.c</includedby>
    <includedby refid="riscv__negate__q7_8c" local="yes">riscv_negate_q7.c</includedby>
    <includedby refid="riscv__offset__f32_8c" local="yes">riscv_offset_f32.c</includedby>
    <includedby refid="riscv__offset__q15_8c" local="yes">riscv_offset_q15.c</includedby>
    <includedby refid="riscv__offset__q31_8c" local="yes">riscv_offset_q31.c</includedby>
    <includedby refid="riscv__offset__q7_8c" local="yes">riscv_offset_q7.c</includedby>
    <includedby refid="riscv__scale__f32_8c" local="yes">riscv_scale_f32.c</includedby>
    <includedby refid="riscv__scale__q15_8c" local="yes">riscv_scale_q15.c</includedby>
    <includedby refid="riscv__scale__q31_8c" local="yes">riscv_scale_q31.c</includedby>
    <includedby refid="riscv__scale__q7_8c" local="yes">riscv_scale_q7.c</includedby>
    <includedby refid="riscv__shift__q15_8c" local="yes">riscv_shift_q15.c</includedby>
    <includedby refid="riscv__shift__q31_8c" local="yes">riscv_shift_q31.c</includedby>
    <includedby refid="riscv__shift__q7_8c" local="yes">riscv_shift_q7.c</includedby>
    <includedby refid="riscv__sub__f32_8c" local="yes">riscv_sub_f32.c</includedby>
    <includedby refid="riscv__sub__q15_8c" local="yes">riscv_sub_q15.c</includedby>
    <includedby refid="riscv__sub__q31_8c" local="yes">riscv_sub_q31.c</includedby>
    <includedby refid="riscv__sub__q7_8c" local="yes">riscv_sub_q7.c</includedby>
    <includedby refid="riscv__common__tables_8c" local="yes">riscv_common_tables.c</includedby>
    <includedby refid="riscv__dct4__f32__8192__tables_8c" local="yes">riscv_dct4_f32_8192_tables.c</includedby>
    <includedby refid="riscv__dct4__q15__8192__tables_8c" local="yes">riscv_dct4_q15_8192_tables.c</includedby>
    <includedby refid="riscv__dct4__q31__8192__tables_8c" local="yes">riscv_dct4_q31_8192_tables.c</includedby>
    <includedby refid="riscv__realcoef__tables_8c" local="yes">riscv_realcoef_tables.c</includedby>
    <includedby refid="riscv__twiddlecoef__rfft__tables_8c" local="yes">riscv_twiddlecoef_rfft_tables.c</includedby>
    <includedby refid="riscv__twiddlecoef__tables_8c" local="yes">riscv_twiddlecoef_tables.c</includedby>
    <includedby refid="riscv__cmplx__conj__f32_8c" local="yes">riscv_cmplx_conj_f32.c</includedby>
    <includedby refid="riscv__cmplx__conj__q15_8c" local="yes">riscv_cmplx_conj_q15.c</includedby>
    <includedby refid="riscv__cmplx__conj__q31_8c" local="yes">riscv_cmplx_conj_q31.c</includedby>
    <includedby refid="riscv__cmplx__dot__prod__f32_8c" local="yes">riscv_cmplx_dot_prod_f32.c</includedby>
    <includedby refid="riscv__cmplx__dot__prod__q15_8c" local="yes">riscv_cmplx_dot_prod_q15.c</includedby>
    <includedby refid="riscv__cmplx__dot__prod__q31_8c" local="yes">riscv_cmplx_dot_prod_q31.c</includedby>
    <includedby refid="riscv__cmplx__mag__f32_8c" local="yes">riscv_cmplx_mag_f32.c</includedby>
    <includedby refid="riscv__cmplx__mag__q15_8c" local="yes">riscv_cmplx_mag_q15.c</includedby>
    <includedby refid="riscv__cmplx__mag__q31_8c" local="yes">riscv_cmplx_mag_q31.c</includedby>
    <includedby refid="riscv__cmplx__mag__squared__f32_8c" local="yes">riscv_cmplx_mag_squared_f32.c</includedby>
    <includedby refid="riscv__cmplx__mag__squared__q15_8c" local="yes">riscv_cmplx_mag_squared_q15.c</includedby>
    <includedby refid="riscv__cmplx__mag__squared__q31_8c" local="yes">riscv_cmplx_mag_squared_q31.c</includedby>
    <includedby refid="riscv__cmplx__mult__cmplx__f32_8c" local="yes">riscv_cmplx_mult_cmplx_f32.c</includedby>
    <includedby refid="riscv__cmplx__mult__cmplx__q15_8c" local="yes">riscv_cmplx_mult_cmplx_q15.c</includedby>
    <includedby refid="riscv__cmplx__mult__cmplx__q31_8c" local="yes">riscv_cmplx_mult_cmplx_q31.c</includedby>
    <includedby refid="riscv__cmplx__mult__real__f32_8c" local="yes">riscv_cmplx_mult_real_f32.c</includedby>
    <includedby refid="riscv__cmplx__mult__real__q15_8c" local="yes">riscv_cmplx_mult_real_q15.c</includedby>
    <includedby refid="riscv__cmplx__mult__real__q31_8c" local="yes">riscv_cmplx_mult_real_q31.c</includedby>
    <includedby refid="riscv__pid__init__f32_8c" local="yes">riscv_pid_init_f32.c</includedby>
    <includedby refid="riscv__pid__init__q15_8c" local="yes">riscv_pid_init_q15.c</includedby>
    <includedby refid="riscv__pid__init__q31_8c" local="yes">riscv_pid_init_q31.c</includedby>
    <includedby refid="riscv__pid__reset__f32_8c" local="yes">riscv_pid_reset_f32.c</includedby>
    <includedby refid="riscv__pid__reset__q15_8c" local="yes">riscv_pid_reset_q15.c</includedby>
    <includedby refid="riscv__pid__reset__q31_8c" local="yes">riscv_pid_reset_q31.c</includedby>
    <includedby refid="riscv__sin__cos__f32_8c" local="yes">riscv_sin_cos_f32.c</includedby>
    <includedby refid="riscv__sin__cos__q31_8c" local="yes">riscv_sin_cos_q31.c</includedby>
    <includedby refid="riscv__cos__f32_8c" local="yes">riscv_cos_f32.c</includedby>
    <includedby refid="riscv__cos__q15_8c" local="yes">riscv_cos_q15.c</includedby>
    <includedby refid="riscv__cos__q31_8c" local="yes">riscv_cos_q31.c</includedby>
    <includedby refid="riscv__sin__f32_8c" local="yes">riscv_sin_f32.c</includedby>
    <includedby refid="riscv__sin__q15_8c" local="yes">riscv_sin_q15.c</includedby>
    <includedby refid="riscv__sin__q31_8c" local="yes">riscv_sin_q31.c</includedby>
    <includedby refid="riscv__sqrt__q15_8c" local="yes">riscv_sqrt_q15.c</includedby>
    <includedby refid="riscv__sqrt__q31_8c" local="yes">riscv_sqrt_q31.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__32x64__init__q31_8c" local="yes">riscv_biquad_cascade_df1_32x64_init_q31.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__32x64__q31_8c" local="yes">riscv_biquad_cascade_df1_32x64_q31.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__f32_8c" local="yes">riscv_biquad_cascade_df1_f32.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__fast__q15_8c" local="yes">riscv_biquad_cascade_df1_fast_q15.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__fast__q31_8c" local="yes">riscv_biquad_cascade_df1_fast_q31.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__init__f32_8c" local="yes">riscv_biquad_cascade_df1_init_f32.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__init__q15_8c" local="yes">riscv_biquad_cascade_df1_init_q15.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__init__q31_8c" local="yes">riscv_biquad_cascade_df1_init_q31.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__q15_8c" local="yes">riscv_biquad_cascade_df1_q15.c</includedby>
    <includedby refid="riscv__biquad__cascade__df1__q31_8c" local="yes">riscv_biquad_cascade_df1_q31.c</includedby>
    <includedby refid="riscv__biquad__cascade__df2T__f32_8c" local="yes">riscv_biquad_cascade_df2T_f32.c</includedby>
    <includedby refid="riscv__biquad__cascade__df2T__f64_8c" local="yes">riscv_biquad_cascade_df2T_f64.c</includedby>
    <includedby refid="riscv__biquad__cascade__df2T__init__f32_8c" local="yes">riscv_biquad_cascade_df2T_init_f32.c</includedby>
    <includedby refid="riscv__biquad__cascade__df2T__init__f64_8c" local="yes">riscv_biquad_cascade_df2T_init_f64.c</includedby>
    <includedby refid="riscv__biquad__cascade__stereo__df2T__f32_8c" local="yes">riscv_biquad_cascade_stereo_df2T_f32.c</includedby>
    <includedby refid="riscv__biquad__cascade__stereo__df2T__init__f32_8c" local="yes">riscv_biquad_cascade_stereo_df2T_init_f32.c</includedby>
    <includedby refid="riscv__conv__f32_8c" local="yes">riscv_conv_f32.c</includedby>
    <includedby refid="riscv__conv__fast__opt__q15_8c" local="yes">riscv_conv_fast_opt_q15.c</includedby>
    <includedby refid="riscv__conv__fast__q15_8c" local="yes">riscv_conv_fast_q15.c</includedby>
    <includedby refid="riscv__conv__fast__q31_8c" local="yes">riscv_conv_fast_q31.c</includedby>
    <includedby refid="riscv__conv__opt__q15_8c" local="yes">riscv_conv_opt_q15.c</includedby>
    <includedby refid="riscv__conv__opt__q7_8c" local="yes">riscv_conv_opt_q7.c</includedby>
    <includedby refid="riscv__conv__partial__f32_8c" local="yes">riscv_conv_partial_f32.c</includedby>
    <includedby refid="riscv__conv__partial__fast__opt__q15_8c" local="yes">riscv_conv_partial_fast_opt_q15.c</includedby>
    <includedby refid="riscv__conv__partial__fast__q15_8c" local="yes">riscv_conv_partial_fast_q15.c</includedby>
    <includedby refid="riscv__conv__partial__fast__q31_8c" local="yes">riscv_conv_partial_fast_q31.c</includedby>
    <includedby refid="riscv__conv__partial__opt__q15_8c" local="yes">riscv_conv_partial_opt_q15.c</includedby>
    <includedby refid="riscv__conv__partial__opt__q7_8c" local="yes">riscv_conv_partial_opt_q7.c</includedby>
    <includedby refid="riscv__conv__partial__q15_8c" local="yes">riscv_conv_partial_q15.c</includedby>
    <includedby refid="riscv__conv__partial__q31_8c" local="yes">riscv_conv_partial_q31.c</includedby>
    <includedby refid="riscv__conv__partial__q7_8c" local="yes">riscv_conv_partial_q7.c</includedby>
    <includedby refid="riscv__conv__q15_8c" local="yes">riscv_conv_q15.c</includedby>
    <includedby refid="riscv__conv__q31_8c" local="yes">riscv_conv_q31.c</includedby>
    <includedby refid="riscv__conv__q7_8c" local="yes">riscv_conv_q7.c</includedby>
    <includedby refid="riscv__correlate__f32_8c" local="yes">riscv_correlate_f32.c</includedby>
    <includedby refid="riscv__correlate__fast__opt__q15_8c" local="yes">riscv_correlate_fast_opt_q15.c</includedby>
    <includedby refid="riscv__correlate__fast__q15_8c" local="yes">riscv_correlate_fast_q15.c</includedby>
    <includedby refid="riscv__correlate__fast__q31_8c" local="yes">riscv_correlate_fast_q31.c</includedby>
    <includedby refid="riscv__correlate__opt__q15_8c" local="yes">riscv_correlate_opt_q15.c</includedby>
    <includedby refid="riscv__correlate__opt__q7_8c" local="yes">riscv_correlate_opt_q7.c</includedby>
    <includedby refid="riscv__correlate__q15_8c" local="yes">riscv_correlate_q15.c</includedby>
    <includedby refid="riscv__correlate__q31_8c" local="yes">riscv_correlate_q31.c</includedby>
    <includedby refid="riscv__correlate__q7_8c" local="yes">riscv_correlate_q7.c</includedby>
    <includedby refid="riscv__fir__decimate__f32_8c" local="yes">riscv_fir_decimate_f32.c</includedby>
    <includedby refid="riscv__fir__decimate__fast__q15_8c" local="yes">riscv_fir_decimate_fast_q15.c</includedby>
    <includedby refid="riscv__fir__decimate__fast__q31_8c" local="yes">riscv_fir_decimate_fast_q31.c</includedby>
    <includedby refid="riscv__fir__decimate__init__f32_8c" local="yes">riscv_fir_decimate_init_f32.c</includedby>
    <includedby refid="riscv__fir__decimate__init__q15_8c" local="yes">riscv_fir_decimate_init_q15.c</includedby>
    <includedby refid="riscv__fir__decimate__init__q31_8c" local="yes">riscv_fir_decimate_init_q31.c</includedby>
    <includedby refid="riscv__fir__decimate__q15_8c" local="yes">riscv_fir_decimate_q15.c</includedby>
    <includedby refid="riscv__fir__decimate__q31_8c" local="yes">riscv_fir_decimate_q31.c</includedby>
    <includedby refid="riscv__fir__f32_8c" local="yes">riscv_fir_f32.c</includedby>
    <includedby refid="riscv__fir__fast__q15_8c" local="yes">riscv_fir_fast_q15.c</includedby>
    <includedby refid="riscv__fir__fast__q31_8c" local="yes">riscv_fir_fast_q31.c</includedby>
    <includedby refid="riscv__fir__init__f32_8c" local="yes">riscv_fir_init_f32.c</includedby>
    <includedby refid="riscv__fir__init__q15_8c" local="yes">riscv_fir_init_q15.c</includedby>
    <includedby refid="riscv__fir__init__q31_8c" local="yes">riscv_fir_init_q31.c</includedby>
    <includedby refid="riscv__fir__init__q7_8c" local="yes">riscv_fir_init_q7.c</includedby>
    <includedby refid="riscv__fir__interpolate__f32_8c" local="yes">riscv_fir_interpolate_f32.c</includedby>
    <includedby refid="riscv__fir__interpolate__init__f32_8c" local="yes">riscv_fir_interpolate_init_f32.c</includedby>
    <includedby refid="riscv__fir__interpolate__init__q15_8c" local="yes">riscv_fir_interpolate_init_q15.c</includedby>
    <includedby refid="riscv__fir__interpolate__init__q31_8c" local="yes">riscv_fir_interpolate_init_q31.c</includedby>
    <includedby refid="riscv__fir__interpolate__q15_8c" local="yes">riscv_fir_interpolate_q15.c</includedby>
    <includedby refid="riscv__fir__interpolate__q31_8c" local="yes">riscv_fir_interpolate_q31.c</includedby>
    <includedby refid="riscv__fir__lattice__f32_8c" local="yes">riscv_fir_lattice_f32.c</includedby>
    <includedby refid="riscv__fir__lattice__init__f32_8c" local="yes">riscv_fir_lattice_init_f32.c</includedby>
    <includedby refid="riscv__fir__lattice__init__q15_8c" local="yes">riscv_fir_lattice_init_q15.c</includedby>
    <includedby refid="riscv__fir__lattice__init__q31_8c" local="yes">riscv_fir_lattice_init_q31.c</includedby>
    <includedby refid="riscv__fir__lattice__q15_8c" local="yes">riscv_fir_lattice_q15.c</includedby>
    <includedby refid="riscv__fir__lattice__q31_8c" local="yes">riscv_fir_lattice_q31.c</includedby>
    <includedby refid="riscv__fir__q15_8c" local="yes">riscv_fir_q15.c</includedby>
    <includedby refid="riscv__fir__q31_8c" local="yes">riscv_fir_q31.c</includedby>
    <includedby refid="riscv__fir__q7_8c" local="yes">riscv_fir_q7.c</includedby>
    <includedby refid="riscv__fir__sparse__f32_8c" local="yes">riscv_fir_sparse_f32.c</includedby>
    <includedby refid="riscv__fir__sparse__init__f32_8c" local="yes">riscv_fir_sparse_init_f32.c</includedby>
    <includedby refid="riscv__fir__sparse__init__q15_8c" local="yes">riscv_fir_sparse_init_q15.c</includedby>
    <includedby refid="riscv__fir__sparse__init__q31_8c" local="yes">riscv_fir_sparse_init_q31.c</includedby>
    <includedby refid="riscv__fir__sparse__init__q7_8c" local="yes">riscv_fir_sparse_init_q7.c</includedby>
    <includedby refid="riscv__fir__sparse__q15_8c" local="yes">riscv_fir_sparse_q15.c</includedby>
    <includedby refid="riscv__fir__sparse__q31_8c" local="yes">riscv_fir_sparse_q31.c</includedby>
    <includedby refid="riscv__fir__sparse__q7_8c" local="yes">riscv_fir_sparse_q7.c</includedby>
    <includedby refid="riscv__iir__lattice__f32_8c" local="yes">riscv_iir_lattice_f32.c</includedby>
    <includedby refid="riscv__iir__lattice__init__f32_8c" local="yes">riscv_iir_lattice_init_f32.c</includedby>
    <includedby refid="riscv__iir__lattice__init__q15_8c" local="yes">riscv_iir_lattice_init_q15.c</includedby>
    <includedby refid="riscv__iir__lattice__init__q31_8c" local="yes">riscv_iir_lattice_init_q31.c</includedby>
    <includedby refid="riscv__iir__lattice__q15_8c" local="yes">riscv_iir_lattice_q15.c</includedby>
    <includedby refid="riscv__iir__lattice__q31_8c" local="yes">riscv_iir_lattice_q31.c</includedby>
    <includedby refid="riscv__lms__f32_8c" local="yes">riscv_lms_f32.c</includedby>
    <includedby refid="riscv__lms__init__f32_8c" local="yes">riscv_lms_init_f32.c</includedby>
    <includedby refid="riscv__lms__init__q15_8c" local="yes">riscv_lms_init_q15.c</includedby>
    <includedby refid="riscv__lms__init__q31_8c" local="yes">riscv_lms_init_q31.c</includedby>
    <includedby refid="riscv__lms__norm__f32_8c" local="yes">riscv_lms_norm_f32.c</includedby>
    <includedby refid="riscv__lms__norm__init__f32_8c" local="yes">riscv_lms_norm_init_f32.c</includedby>
    <includedby refid="riscv__lms__norm__init__q15_8c" local="yes">riscv_lms_norm_init_q15.c</includedby>
    <includedby refid="riscv__lms__norm__init__q31_8c" local="yes">riscv_lms_norm_init_q31.c</includedby>
    <includedby refid="riscv__lms__norm__q15_8c" local="yes">riscv_lms_norm_q15.c</includedby>
    <includedby refid="riscv__lms__norm__q31_8c" local="yes">riscv_lms_norm_q31.c</includedby>
    <includedby refid="riscv__lms__q15_8c" local="yes">riscv_lms_q15.c</includedby>
    <includedby refid="riscv__lms__q31_8c" local="yes">riscv_lms_q31.c</includedby>
    <includedby refid="riscv__mat__add__f32_8c" local="yes">riscv_mat_add_f32.c</includedby>
    <includedby refid="riscv__mat__add__q15_8c" local="yes">riscv_mat_add_q15.c</includedby>
    <includedby refid="riscv__mat__add__q31_8c" local="yes">riscv_mat_add_q31.c</includedby>
    <includedby refid="riscv__mat__cmplx__mult__f32_8c" local="yes">riscv_mat_cmplx_mult_f32.c</includedby>
    <includedby refid="riscv__mat__cmplx__mult__q15_8c" local="yes">riscv_mat_cmplx_mult_q15.c</includedby>
    <includedby refid="riscv__mat__cmplx__mult__q31_8c" local="yes">riscv_mat_cmplx_mult_q31.c</includedby>
    <includedby refid="riscv__mat__init__f32_8c" local="yes">riscv_mat_init_f32.c</includedby>
    <includedby refid="riscv__mat__init__q15_8c" local="yes">riscv_mat_init_q15.c</includedby>
    <includedby refid="riscv__mat__init__q31_8c" local="yes">riscv_mat_init_q31.c</includedby>
    <includedby refid="riscv__mat__inverse__f32_8c" local="yes">riscv_mat_inverse_f32.c</includedby>
    <includedby refid="riscv__mat__inverse__f64_8c" local="yes">riscv_mat_inverse_f64.c</includedby>
    <includedby refid="riscv__mat__mult__f32_8c" local="yes">riscv_mat_mult_f32.c</includedby>
    <includedby refid="riscv__mat__mult__fast__q15_8c" local="yes">riscv_mat_mult_fast_q15.c</includedby>
    <includedby refid="riscv__mat__mult__fast__q31_8c" local="yes">riscv_mat_mult_fast_q31.c</includedby>
    <includedby refid="riscv__mat__mult__q15_8c" local="yes">riscv_mat_mult_q15.c</includedby>
    <includedby refid="riscv__mat__mult__q31_8c" local="yes">riscv_mat_mult_q31.c</includedby>
    <includedby refid="riscv__mat__scale__f32_8c" local="yes">riscv_mat_scale_f32.c</includedby>
    <includedby refid="riscv__mat__scale__q15_8c" local="yes">riscv_mat_scale_q15.c</includedby>
    <includedby refid="riscv__mat__scale__q31_8c" local="yes">riscv_mat_scale_q31.c</includedby>
    <includedby refid="riscv__mat__sub__f32_8c" local="yes">riscv_mat_sub_f32.c</includedby>
    <includedby refid="riscv__mat__sub__q15_8c" local="yes">riscv_mat_sub_q15.c</includedby>
    <includedby refid="riscv__mat__sub__q31_8c" local="yes">riscv_mat_sub_q31.c</includedby>
    <includedby refid="riscv__mat__trans__f32_8c" local="yes">riscv_mat_trans_f32.c</includedby>
    <includedby refid="riscv__mat__trans__q15_8c" local="yes">riscv_mat_trans_q15.c</includedby>
    <includedby refid="riscv__mat__trans__q31_8c" local="yes">riscv_mat_trans_q31.c</includedby>
    <includedby refid="riscv__max__f32_8c" local="yes">riscv_max_f32.c</includedby>
    <includedby refid="riscv__max__q15_8c" local="yes">riscv_max_q15.c</includedby>
    <includedby refid="riscv__max__q31_8c" local="yes">riscv_max_q31.c</includedby>
    <includedby refid="riscv__max__q7_8c" local="yes">riscv_max_q7.c</includedby>
    <includedby refid="riscv__mean__f32_8c" local="yes">riscv_mean_f32.c</includedby>
    <includedby refid="riscv__mean__q15_8c" local="yes">riscv_mean_q15.c</includedby>
    <includedby refid="riscv__mean__q31_8c" local="yes">riscv_mean_q31.c</includedby>
    <includedby refid="riscv__mean__q7_8c" local="yes">riscv_mean_q7.c</includedby>
    <includedby refid="riscv__min__f32_8c" local="yes">riscv_min_f32.c</includedby>
    <includedby refid="riscv__min__q15_8c" local="yes">riscv_min_q15.c</includedby>
    <includedby refid="riscv__min__q31_8c" local="yes">riscv_min_q31.c</includedby>
    <includedby refid="riscv__min__q7_8c" local="yes">riscv_min_q7.c</includedby>
    <includedby refid="riscv__power__f32_8c" local="yes">riscv_power_f32.c</includedby>
    <includedby refid="riscv__power__q15_8c" local="yes">riscv_power_q15.c</includedby>
    <includedby refid="riscv__power__q31_8c" local="yes">riscv_power_q31.c</includedby>
    <includedby refid="riscv__power__q7_8c" local="yes">riscv_power_q7.c</includedby>
    <includedby refid="riscv__rms__f32_8c" local="yes">riscv_rms_f32.c</includedby>
    <includedby refid="riscv__rms__q15_8c" local="yes">riscv_rms_q15.c</includedby>
    <includedby refid="riscv__rms__q31_8c" local="yes">riscv_rms_q31.c</includedby>
    <includedby refid="riscv__std__f32_8c" local="yes">riscv_std_f32.c</includedby>
    <includedby refid="riscv__std__q15_8c" local="yes">riscv_std_q15.c</includedby>
    <includedby refid="riscv__std__q31_8c" local="yes">riscv_std_q31.c</includedby>
    <includedby refid="riscv__var__f32_8c" local="yes">riscv_var_f32.c</includedby>
    <includedby refid="riscv__var__q15_8c" local="yes">riscv_var_q15.c</includedby>
    <includedby refid="riscv__var__q31_8c" local="yes">riscv_var_q31.c</includedby>
    <includedby refid="riscv__copy__f32_8c" local="yes">riscv_copy_f32.c</includedby>
    <includedby refid="riscv__copy__q15_8c" local="yes">riscv_copy_q15.c</includedby>
    <includedby refid="riscv__copy__q31_8c" local="yes">riscv_copy_q31.c</includedby>
    <includedby refid="riscv__copy__q7_8c" local="yes">riscv_copy_q7.c</includedby>
    <includedby refid="riscv__fill__f32_8c" local="yes">riscv_fill_f32.c</includedby>
    <includedby refid="riscv__fill__q15_8c" local="yes">riscv_fill_q15.c</includedby>
    <includedby refid="riscv__fill__q31_8c" local="yes">riscv_fill_q31.c</includedby>
    <includedby refid="riscv__fill__q7_8c" local="yes">riscv_fill_q7.c</includedby>
    <includedby refid="riscv__float__to__q15_8c" local="yes">riscv_float_to_q15.c</includedby>
    <includedby refid="riscv__float__to__q31_8c" local="yes">riscv_float_to_q31.c</includedby>
    <includedby refid="riscv__float__to__q7_8c" local="yes">riscv_float_to_q7.c</includedby>
    <includedby refid="riscv__q15__to__float_8c" local="yes">riscv_q15_to_float.c</includedby>
    <includedby refid="riscv__q15__to__q31_8c" local="yes">riscv_q15_to_q31.c</includedby>
    <includedby refid="riscv__q15__to__q7_8c" local="yes">riscv_q15_to_q7.c</includedby>
    <includedby refid="riscv__q31__to__float_8c" local="yes">riscv_q31_to_float.c</includedby>
    <includedby refid="riscv__q31__to__q15_8c" local="yes">riscv_q31_to_q15.c</includedby>
    <includedby refid="riscv__q31__to__q7_8c" local="yes">riscv_q31_to_q7.c</includedby>
    <includedby refid="riscv__q7__to__float_8c" local="yes">riscv_q7_to_float.c</includedby>
    <includedby refid="riscv__q7__to__q15_8c" local="yes">riscv_q7_to_q15.c</includedby>
    <includedby refid="riscv__q7__to__q31_8c" local="yes">riscv_q7_to_q31.c</includedby>
    <includedby refid="riscv__bitreversal_8c" local="yes">riscv_bitreversal.c</includedby>
    <includedby refid="riscv__bitreversal2_8c" local="yes">riscv_bitreversal2.c</includedby>
    <includedby refid="riscv__cfft__f32_8c" local="yes">riscv_cfft_f32.c</includedby>
    <includedby refid="riscv__cfft__q15_8c" local="yes">riscv_cfft_q15.c</includedby>
    <includedby refid="riscv__cfft__q31_8c" local="yes">riscv_cfft_q31.c</includedby>
    <includedby refid="riscv__cfft__radix2__f32_8c" local="yes">riscv_cfft_radix2_f32.c</includedby>
    <includedby refid="riscv__cfft__radix2__init__f32_8c" local="yes">riscv_cfft_radix2_init_f32.c</includedby>
    <includedby refid="riscv__cfft__radix2__init__q15_8c" local="yes">riscv_cfft_radix2_init_q15.c</includedby>
    <includedby refid="riscv__cfft__radix2__init__q31_8c" local="yes">riscv_cfft_radix2_init_q31.c</includedby>
    <includedby refid="riscv__cfft__radix2__q15_8c" local="yes">riscv_cfft_radix2_q15.c</includedby>
    <includedby refid="riscv__cfft__radix2__q31_8c" local="yes">riscv_cfft_radix2_q31.c</includedby>
    <includedby refid="riscv__cfft__radix4__f32_8c" local="yes">riscv_cfft_radix4_f32.c</includedby>
    <includedby refid="riscv__cfft__radix4__init__f32_8c" local="yes">riscv_cfft_radix4_init_f32.c</includedby>
    <includedby refid="riscv__cfft__radix4__init__q15_8c" local="yes">riscv_cfft_radix4_init_q15.c</includedby>
    <includedby refid="riscv__cfft__radix4__init__q31_8c" local="yes">riscv_cfft_radix4_init_q31.c</includedby>
    <includedby refid="riscv__cfft__radix4__q15_8c" local="yes">riscv_cfft_radix4_q15.c</includedby>
    <includedby refid="riscv__cfft__radix4__q31_8c" local="yes">riscv_cfft_radix4_q31.c</includedby>
    <includedby refid="riscv__cfft__radix8__f32_8c" local="yes">riscv_cfft_radix8_f32.c</includedby>
    <includedby refid="riscv__dct4__f32_8c" local="yes">riscv_dct4_f32.c</includedby>
    <includedby refid="riscv__dct4__init__f32_8c" local="yes">riscv_dct4_init_f32.c</includedby>
    <includedby refid="riscv__dct4__init__q15_8c" local="yes">riscv_dct4_init_q15.c</includedby>
    <includedby refid="riscv__dct4__init__q31_8c" local="yes">riscv_dct4_init_q31.c</includedby>
    <includedby refid="riscv__dct4__q15_8c" local="yes">riscv_dct4_q15.c</includedby>
    <includedby refid="riscv__dct4__q31_8c" local="yes">riscv_dct4_q31.c</includedby>
    <includedby refid="riscv__rfft__f32_8c" local="yes">riscv_rfft_f32.c</includedby>
    <includedby refid="riscv__rfft__fast__f32_8c" local="yes">riscv_rfft_fast_f32.c</includedby>
    <includedby refid="riscv__rfft__fast__init__f32_8c" local="yes">riscv_rfft_fast_init_f32.c</includedby>
    <includedby refid="riscv__rfft__init__f32_8c" local="yes">riscv_rfft_init_f32.c</includedby>
    <includedby refid="riscv__rfft__init__q15_8c" local="yes">riscv_rfft_init_q15.c</includedby>
    <includedby refid="riscv__rfft__init__q31_8c" local="yes">riscv_rfft_init_q31.c</includedby>
    <includedby refid="riscv__rfft__q15_8c" local="yes">riscv_rfft_q15.c</includedby>
    <includedby refid="riscv__rfft__q31_8c" local="yes">riscv_rfft_q31.c</includedby>
    <incdepgraph>
      <node id="480">
        <label>float.h</label>
      </node>
      <node id="477">
        <label>nmsis_core.h</label>
      </node>
      <node id="478">
        <label>string.h</label>
      </node>
      <node id="476">
        <label>riscv_math.h</label>
        <link refid="riscv_math.h"/>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
      </node>
      <node id="479">
        <label>math.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structriscv__fir__instance__q7" prot="public">riscv_fir_instance_q7</innerclass>
    <innerclass refid="structriscv__fir__instance__q15" prot="public">riscv_fir_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__instance__q31" prot="public">riscv_fir_instance_q31</innerclass>
    <innerclass refid="structriscv__fir__instance__f32" prot="public">riscv_fir_instance_f32</innerclass>
    <innerclass refid="structriscv__biquad__casd__df1__inst__q15" prot="public">riscv_biquad_casd_df1_inst_q15</innerclass>
    <innerclass refid="structriscv__biquad__casd__df1__inst__q31" prot="public">riscv_biquad_casd_df1_inst_q31</innerclass>
    <innerclass refid="structriscv__biquad__casd__df1__inst__f32" prot="public">riscv_biquad_casd_df1_inst_f32</innerclass>
    <innerclass refid="structriscv__matrix__instance__f32" prot="public">riscv_matrix_instance_f32</innerclass>
    <innerclass refid="structriscv__matrix__instance__f64" prot="public">riscv_matrix_instance_f64</innerclass>
    <innerclass refid="structriscv__matrix__instance__q15" prot="public">riscv_matrix_instance_q15</innerclass>
    <innerclass refid="structriscv__matrix__instance__q31" prot="public">riscv_matrix_instance_q31</innerclass>
    <innerclass refid="structriscv__pid__instance__q15" prot="public">riscv_pid_instance_q15</innerclass>
    <innerclass refid="structriscv__pid__instance__q31" prot="public">riscv_pid_instance_q31</innerclass>
    <innerclass refid="structriscv__pid__instance__f32" prot="public">riscv_pid_instance_f32</innerclass>
    <innerclass refid="structriscv__linear__interp__instance__f32" prot="public">riscv_linear_interp_instance_f32</innerclass>
    <innerclass refid="structriscv__bilinear__interp__instance__f32" prot="public">riscv_bilinear_interp_instance_f32</innerclass>
    <innerclass refid="structriscv__bilinear__interp__instance__q31" prot="public">riscv_bilinear_interp_instance_q31</innerclass>
    <innerclass refid="structriscv__bilinear__interp__instance__q15" prot="public">riscv_bilinear_interp_instance_q15</innerclass>
    <innerclass refid="structriscv__bilinear__interp__instance__q7" prot="public">riscv_bilinear_interp_instance_q7</innerclass>
    <innerclass refid="structriscv__cfft__radix2__instance__q15" prot="public">riscv_cfft_radix2_instance_q15</innerclass>
    <innerclass refid="structriscv__cfft__radix4__instance__q15" prot="public">riscv_cfft_radix4_instance_q15</innerclass>
    <innerclass refid="structriscv__cfft__radix2__instance__q31" prot="public">riscv_cfft_radix2_instance_q31</innerclass>
    <innerclass refid="structriscv__cfft__radix4__instance__q31" prot="public">riscv_cfft_radix4_instance_q31</innerclass>
    <innerclass refid="structriscv__cfft__radix2__instance__f32" prot="public">riscv_cfft_radix2_instance_f32</innerclass>
    <innerclass refid="structriscv__cfft__radix4__instance__f32" prot="public">riscv_cfft_radix4_instance_f32</innerclass>
    <innerclass refid="structriscv__cfft__instance__q15" prot="public">riscv_cfft_instance_q15</innerclass>
    <innerclass refid="structriscv__cfft__instance__q31" prot="public">riscv_cfft_instance_q31</innerclass>
    <innerclass refid="structriscv__cfft__instance__f32" prot="public">riscv_cfft_instance_f32</innerclass>
    <innerclass refid="structriscv__rfft__instance__q15" prot="public">riscv_rfft_instance_q15</innerclass>
    <innerclass refid="structriscv__rfft__instance__q31" prot="public">riscv_rfft_instance_q31</innerclass>
    <innerclass refid="structriscv__rfft__instance__f32" prot="public">riscv_rfft_instance_f32</innerclass>
    <innerclass refid="structriscv__rfft__fast__instance__f32" prot="public">riscv_rfft_fast_instance_f32</innerclass>
    <innerclass refid="structriscv__dct4__instance__f32" prot="public">riscv_dct4_instance_f32</innerclass>
    <innerclass refid="structriscv__dct4__instance__q31" prot="public">riscv_dct4_instance_q31</innerclass>
    <innerclass refid="structriscv__dct4__instance__q15" prot="public">riscv_dct4_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__decimate__instance__q15" prot="public">riscv_fir_decimate_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__decimate__instance__q31" prot="public">riscv_fir_decimate_instance_q31</innerclass>
    <innerclass refid="structriscv__fir__decimate__instance__f32" prot="public">riscv_fir_decimate_instance_f32</innerclass>
    <innerclass refid="structriscv__fir__interpolate__instance__q15" prot="public">riscv_fir_interpolate_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__interpolate__instance__q31" prot="public">riscv_fir_interpolate_instance_q31</innerclass>
    <innerclass refid="structriscv__fir__interpolate__instance__f32" prot="public">riscv_fir_interpolate_instance_f32</innerclass>
    <innerclass refid="structriscv__biquad__cas__df1__32x64__ins__q31" prot="public">riscv_biquad_cas_df1_32x64_ins_q31</innerclass>
    <innerclass refid="structriscv__biquad__cascade__df2T__instance__f32" prot="public">riscv_biquad_cascade_df2T_instance_f32</innerclass>
    <innerclass refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" prot="public">riscv_biquad_cascade_stereo_df2T_instance_f32</innerclass>
    <innerclass refid="structriscv__biquad__cascade__df2T__instance__f64" prot="public">riscv_biquad_cascade_df2T_instance_f64</innerclass>
    <innerclass refid="structriscv__fir__lattice__instance__q15" prot="public">riscv_fir_lattice_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__lattice__instance__q31" prot="public">riscv_fir_lattice_instance_q31</innerclass>
    <innerclass refid="structriscv__fir__lattice__instance__f32" prot="public">riscv_fir_lattice_instance_f32</innerclass>
    <innerclass refid="structriscv__iir__lattice__instance__q15" prot="public">riscv_iir_lattice_instance_q15</innerclass>
    <innerclass refid="structriscv__iir__lattice__instance__q31" prot="public">riscv_iir_lattice_instance_q31</innerclass>
    <innerclass refid="structriscv__iir__lattice__instance__f32" prot="public">riscv_iir_lattice_instance_f32</innerclass>
    <innerclass refid="structriscv__lms__instance__f32" prot="public">riscv_lms_instance_f32</innerclass>
    <innerclass refid="structriscv__lms__instance__q15" prot="public">riscv_lms_instance_q15</innerclass>
    <innerclass refid="structriscv__lms__instance__q31" prot="public">riscv_lms_instance_q31</innerclass>
    <innerclass refid="structriscv__lms__norm__instance__f32" prot="public">riscv_lms_norm_instance_f32</innerclass>
    <innerclass refid="structriscv__lms__norm__instance__q31" prot="public">riscv_lms_norm_instance_q31</innerclass>
    <innerclass refid="structriscv__lms__norm__instance__q15" prot="public">riscv_lms_norm_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__sparse__instance__f32" prot="public">riscv_fir_sparse_instance_f32</innerclass>
    <innerclass refid="structriscv__fir__sparse__instance__q31" prot="public">riscv_fir_sparse_instance_q31</innerclass>
    <innerclass refid="structriscv__fir__sparse__instance__q15" prot="public">riscv_fir_sparse_instance_q15</innerclass>
    <innerclass refid="structriscv__fir__sparse__instance__q7" prot="public">riscv_fir_sparse_instance_q7</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="riscv__math_8h_1ae831631f3421f6d219713c1259dc56cf" prot="public" static="no">
        <name>__NMSIS_GENERIC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="255" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1aad77ae594e95c5af6ae4129bd6a483c2" prot="public" static="no">
        <name>DELTA_Q31</name>
        <initializer>(0x100)</initializer>
        <briefdescription>
<para>Macros required for reciprocal calculation in Normalized LMS. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="285" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a663277ff19ad0b409fb98b64b2c2750b" prot="public" static="no">
        <name>DELTA_Q15</name>
        <initializer>0x5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="286" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a29f839928f4752b73c8858d6dbb55294" prot="public" static="no">
        <name>INDEX_MASK</name>
        <initializer>0x0000003F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="287" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a598a3330b3c21701223ee0ca14316eca" prot="public" static="no">
        <name>PI</name>
        <initializer>3.14159265358979f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="289" column="11" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1afcb9147c96853bea484cfc2dde07463d" prot="public" static="no">
        <name>FAST_MATH_TABLE_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
<para>Macros required for SINE and COSINE Fast math approximations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="296" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a4268f77b1811a0c7fc2532a0bf6108b0" prot="public" static="no">
        <name>FAST_MATH_Q31_SHIFT</name>
        <initializer>(32 - 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="297" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a34716b73c631e65e8dd855e08384ecb2" prot="public" static="no">
        <name>FAST_MATH_Q15_SHIFT</name>
        <initializer>(16 - 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="298" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1aaff6d2358c4ada8de838a279254ab550" prot="public" static="no">
        <name>CONTROLLER_Q31_SHIFT</name>
        <initializer>(32 - 9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="299" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a8407c9e1347d10e3bcf0a7014f1fb2ff" prot="public" static="no">
        <name>TABLE_SPACING_Q31</name>
        <initializer>0x400000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="300" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a60b0142af7be007902142add27919b82" prot="public" static="no">
        <name>TABLE_SPACING_Q15</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="301" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a1339e9abc11a3870e0c04f822a62166a" prot="public" static="no">
        <name>INPUT_SPACING</name>
        <initializer>0xB60B61</initializer>
        <briefdescription>
<para>Macros required for SINE and COSINE Controller functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="308" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a4c5bea1f30b556ef93661b1e2c6b7cd3" prot="public" static="no">
        <name>__SIMD32_TYPE</name>
        <initializer>int32_t</initializer>
        <briefdescription>
<para>definition to read/write two 16 bit values. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="361" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a9de2e0a5785be82866bcb96012282248" prot="public" static="no">
        <name>__SIMD32</name>
        <param><defname>addr</defname></param>
        <initializer>(*(__SIMD32_TYPE **) &amp; (addr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="363" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a1185d670d798aaf52eec13f0403f3407" prot="public" static="no">
        <name>__SIMD32_CONST</name>
        <param><defname>addr</defname></param>
        <initializer>( (__SIMD32_TYPE * )   (addr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="364" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1af0d54ec57b936994a34f073d0049ea3f" prot="public" static="no">
        <name>_SIMD32_OFFSET</name>
        <param><defname>addr</defname></param>
        <initializer>(*(__SIMD32_TYPE * )   (addr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="365" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1ad1b053da364f9fd82ca1a381df7590b6" prot="public" static="no">
        <name>__SIMD64</name>
        <param><defname>addr</defname></param>
        <initializer>(*(      int64_t **) &amp; (addr))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="366" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a3ebff224ad44c217fde9f530342e2960" prot="public" static="no">
        <name>__PACKq7</name>
        <param><defname>v0</defname></param>
        <param><defname>v1</defname></param>
        <param><defname>v2</defname></param>
        <param><defname>v3</defname></param>
        <briefdescription>
<para>definition to pack four 8 bit values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="624" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1aba3e538352fc7f9d6d15f9a18d469399" prot="public" static="no">
        <name>multAcc_32x32_keep32_R</name>
        <param><defname>a</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>a = (q31_t) (((((q63_t) a) &lt;&lt; 32) + ((q63_t) x * y) + 0x80000000LL ) &gt;&gt; 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end of BilinearInterpolate group </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7173" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a668fbf1cd1c3bc8faf1b1c83964ade23" prot="public" static="no">
        <name>multSub_32x32_keep32_R</name>
        <param><defname>a</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>a = (q31_t) (((((q63_t) a) &lt;&lt; 32) - ((q63_t) x * y) + 0x80000000LL ) &gt;&gt; 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7177" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a960f210642058d2b3d5368729a6e8375" prot="public" static="no">
        <name>mult_32x32_keep32_R</name>
        <param><defname>a</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>a = (q31_t) (((q63_t) x * y + 0x80000000LL ) &gt;&gt; 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7181" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a58454519e12e8157f0a1c36071333655" prot="public" static="no">
        <name>multAcc_32x32_keep32</name>
        <param><defname>a</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>a += (q31_t) (((q63_t) x * y) &gt;&gt; 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7185" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a9ec66f3082a4c65c78075638255f42ab" prot="public" static="no">
        <name>multSub_32x32_keep32</name>
        <param><defname>a</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>a -= (q31_t) (((q63_t) x * y) &gt;&gt; 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7189" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1abb4baa0192bbb6fabc9251af4b4cb322" prot="public" static="no">
        <name>mult_32x32_keep32</name>
        <param><defname>a</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>a = (q31_t) (((q63_t) x * y ) &gt;&gt; 32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7193" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1ad00c044ecf01cbfeefa92eccec6bac11" prot="public" static="no">
        <name>LOW_OPTIMIZATION_ENTER</name>
        <initializer>__attribute__(( optimize(&quot;-O1&quot;) ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7197" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1ac721c44da2fb7177249d9d55a0072a7f" prot="public" static="no">
        <name>LOW_OPTIMIZATION_EXIT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7199" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1acb70c9d0f9cbb3e9db6f69dac1df62a3" prot="public" static="no">
        <name>IAR_ONLY_LOW_OPTIMIZATION_ENTER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7200" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="riscv__math_8h_1a3d509b1b74b79a57a0aac3e3d0622b2f" prot="public" static="no">
        <name>IAR_ONLY_LOW_OPTIMIZATION_EXIT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7201" column="9" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730e" prot="public" static="no">
        <name>riscv_status</name>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730eabc9bda64860b61ebecc7ed73d4e82b9a" prot="public">
          <name>RISCV_MATH_SUCCESS</name>
          <initializer>=  0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No error </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730eac62c0956cc13fd261e6ca594086e708f" prot="public">
          <name>RISCV_MATH_ARGUMENT_ERROR</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One or more arguments are incorrect </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730ea348fe38ec0570818c093222c05356297" prot="public">
          <name>RISCV_MATH_LENGTH_ERROR</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Length of data buffer is incorrect </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730eab4fd224b25631f89ca70d1475234eb02" prot="public">
          <name>RISCV_MATH_SIZE_MISMATCH</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Size of matrices is not compatible with the operation </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730ead08e5734ec92fc14d19adb1b37eb9e10" prot="public">
          <name>RISCV_MATH_NANINF</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Not-a-number (NaN) or infinity is generated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730ea9ce14eb8a869e8bfabe96d80868c48ea" prot="public">
          <name>RISCV_MATH_SINGULAR</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input matrix is singular and cannot be inverted </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="riscv__math_8h_1a5aa7a8b97ef920a50ffce81efaba730ea386c575031a5925c33932ed2f50dd4a9" prot="public">
          <name>RISCV_MATH_TEST_FAILURE</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Test Failed </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error status returned by some functions in the library. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="316" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="315" bodyend="324"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="riscv__math_8h_1ae541b6f232c305361e9b416fc9eed263" prot="public" static="no">
        <type>int8_t</type>
        <definition>typedef int8_t q7_t</definition>
        <argsstring></argsstring>
        <name>q7_t</name>
        <briefdescription>
<para>8-bit fractional data type in 1.7 format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="329" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="riscv__math_8h_1ab5a8fb21a5b3b983d5f54f31614052ea" prot="public" static="no">
        <type>int16_t</type>
        <definition>typedef int16_t q15_t</definition>
        <argsstring></argsstring>
        <name>q15_t</name>
        <briefdescription>
<para>16-bit fractional data type in 1.15 format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="334" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="riscv__math_8h_1adc89a3547f5324b7b3b95adec3806bc0" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t q31_t</definition>
        <argsstring></argsstring>
        <name>q31_t</name>
        <briefdescription>
<para>32-bit fractional data type in 1.31 format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="339" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="riscv__math_8h_1a5aea1cb12fc02d9d44c8abf217eaa5c6" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t q63_t</definition>
        <argsstring></argsstring>
        <name>q63_t</name>
        <briefdescription>
<para>64-bit fractional data type in 1.63 format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="344" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="riscv__math_8h_1a4611b605e45ab401f02cab15c5e38715" prot="public" static="no">
        <type>float</type>
        <definition>typedef float float32_t</definition>
        <argsstring></argsstring>
        <name>float32_t</name>
        <briefdescription>
<para>32-bit floating-point type definition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="349" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="riscv__math_8h_1ac55f3ae81b5bc9053760baacf57e47f4" prot="public" static="no">
        <type>double</type>
        <definition>typedef double float64_t</definition>
        <argsstring></argsstring>
        <name>float64_t</name>
        <briefdescription>
<para>64-bit floating-point type definition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="354" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="riscv__math_8h_1a1eba08f198f867711068918c45026564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t read_q15x2</definition>
        <argsstring>(q15_t *pQ15)</argsstring>
        <name>read_q15x2</name>
        <param>
          <type>q15_t *</type>
          <declname>pQ15</declname>
        </param>
        <briefdescription>
<para>Read 2 Q15 from Q15 pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="376" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="376" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a63675cbbd75b0ba77f5bb21c3b808095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t read_q15x2_ia</definition>
        <argsstring>(q15_t **pQ15)</argsstring>
        <name>read_q15x2_ia</name>
        <param>
          <type>q15_t **</type>
          <declname>pQ15</declname>
        </param>
        <briefdescription>
<para>Read 2 Q15 from Q15 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="395" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="395" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ab7b6f52fa2c76d9d390fd3656947af6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q63_t</type>
        <definition>__STATIC_FORCEINLINE q63_t read_q15x4_ia</definition>
        <argsstring>(q15_t **pQ15)</argsstring>
        <name>read_q15x4_ia</name>
        <param>
          <type>q15_t **</type>
          <declname>pQ15</declname>
        </param>
        <briefdescription>
<para>Read 4 Q15 from Q15 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="416" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="416" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ae7ddd4049745db9c70a5cd7e8068d1bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t read_q15x2_da</definition>
        <argsstring>(q15_t **pQ15)</argsstring>
        <name>read_q15x2_da</name>
        <param>
          <type>q15_t **</type>
          <declname>pQ15</declname>
        </param>
        <briefdescription>
<para>Read 2 Q15 from Q15 pointer and decrement pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="431" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="431" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a12222a89854a8f55970a9d045df433bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t read_q15x4_da</definition>
        <argsstring>(q15_t **pQ15)</argsstring>
        <name>read_q15x4_da</name>
        <param>
          <type>q15_t **</type>
          <declname>pQ15</declname>
        </param>
        <briefdescription>
<para>Read 4 Q15 from Q15 pointer and decrement pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="452" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="452" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a576a0e2a4667277b42c478dfda753dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void write_q15x2_ia</definition>
        <argsstring>(q15_t **pQ15, q31_t value)</argsstring>
        <name>write_q15x2_ia</name>
        <param>
          <type>q15_t **</type>
          <declname>pQ15</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write 2 Q15 to Q15 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Q31 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="468" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="468" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a626dd85e4d65470d368544e46722b4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void write_q15x4_ia</definition>
        <argsstring>(q15_t **pQ15, q63_t value)</argsstring>
        <name>write_q15x4_ia</name>
        <param>
          <type>q15_t **</type>
          <declname>pQ15</declname>
        </param>
        <param>
          <type>q63_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write 4 Q15 to Q15 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Q31 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="489" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="489" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a1c6d46f43d41c6ca1b7d6a0d8ed95036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void write_q15x2</definition>
        <argsstring>(q15_t *pQ15, q31_t value)</argsstring>
        <name>write_q15x2</name>
        <param>
          <type>q15_t *</type>
          <declname>pQ15</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write 2 Q15 to Q15 pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Q31 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="503" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="503" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a2f9d56dd88fd1e4589b9f92c5fa35c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void write_q15x4</definition>
        <argsstring>(q15_t *pQ15, q63_t value)</argsstring>
        <name>write_q15x4</name>
        <param>
          <type>q15_t *</type>
          <declname>pQ15</declname>
        </param>
        <param>
          <type>q63_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write 4 Q15 to Q15 pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ15</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Q31 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="522" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="522" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ae785427da7e5603113b0e7a7943ca1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q63_t</type>
        <definition>__STATIC_FORCEINLINE q63_t read_q7x8_ia</definition>
        <argsstring>(q7_t **pQ7)</argsstring>
        <name>read_q7x8_ia</name>
        <param>
          <type>q7_t **</type>
          <declname>pQ7</declname>
        </param>
        <briefdescription>
<para>Read 8 Q7 from Q7 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ7</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="534" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="534" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a969ec542d2035cd9289f68f932cb626a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t read_q7x4_ia</definition>
        <argsstring>(q7_t **pQ7)</argsstring>
        <name>read_q7x4_ia</name>
        <param>
          <type>q7_t **</type>
          <declname>pQ7</declname>
        </param>
        <briefdescription>
<para>Read 4 Q7 from Q7 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ7</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="548" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="548" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a57dbc6933462fd03c5345c660e0b9e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t read_q7x4_da</definition>
        <argsstring>(q7_t **pQ7)</argsstring>
        <name>read_q7x4_da</name>
        <param>
          <type>q7_t **</type>
          <declname>pQ7</declname>
        </param>
        <briefdescription>
<para>Read 4 Q7 from Q7 pointer and decrement pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ7</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Q31 value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="569" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="569" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1afb974aa132e71d8c73e646b759f09e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void write_q7x8_ia</definition>
        <argsstring>(q7_t **pQ7, q63_t value)</argsstring>
        <name>write_q7x8_ia</name>
        <param>
          <type>q7_t **</type>
          <declname>pQ7</declname>
        </param>
        <param>
          <type>q63_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write 8 Q7 to Q7 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ7</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Q63 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="591" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="591" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a05bde59a4c7dd866d0a2e3e6fcac17bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void write_q7x4_ia</definition>
        <argsstring>(q7_t **pQ7, q31_t value)</argsstring>
        <name>write_q7x4_ia</name>
        <param>
          <type>q7_t **</type>
          <declname>pQ7</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Write 4 Q7 to Q7 pointer and increment pointer afterwards. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pQ7</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Q31 value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="605" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="605" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ad3a8d07983196592f6edca8f84aec7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t clip_q63_to_q31</definition>
        <argsstring>(q63_t x)</argsstring>
        <name>clip_q63_to_q31</name>
        <param>
          <type>q63_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Clips Q63 to Q31 values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="634" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="634" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a027d446e8a72228f0a681779a7038a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q15_t</type>
        <definition>__STATIC_FORCEINLINE q15_t clip_q63_to_q15</definition>
        <argsstring>(q63_t x)</argsstring>
        <name>clip_q63_to_q15</name>
        <param>
          <type>q63_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Clips Q63 to Q15 values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="644" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="644" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1afa69cfc57f04c36c2ba499525168fe0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q7_t</type>
        <definition>__STATIC_FORCEINLINE q7_t clip_q31_to_q7</definition>
        <argsstring>(q31_t x)</argsstring>
        <name>clip_q31_to_q7</name>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Clips Q31 to Q7 values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="654" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="654" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a8648908e55b9fd8893b36eb7050e69a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q15_t</type>
        <definition>__STATIC_FORCEINLINE q15_t clip_q31_to_q15</definition>
        <argsstring>(q31_t x)</argsstring>
        <name>clip_q31_to_q15</name>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Clips Q31 to Q15 values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="664" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="664" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a1922856352479a1443dad21208351d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q63_t</type>
        <definition>__STATIC_FORCEINLINE q63_t mult32x64</definition>
        <argsstring>(q63_t x, q31_t y)</argsstring>
        <name>mult32x64</name>
        <param>
          <type>q63_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Multiplies 32 X 64 and returns 32 bit result in 2.30 format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="674" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="674" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a4b5a7e1780646ff9f935fdf036121820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t riscv_recip_q31</definition>
        <argsstring>(q31_t in, q31_t *dst, const q31_t *pRecipTable)</argsstring>
        <name>riscv_recip_q31</name>
        <param>
          <type>q31_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pRecipTable</declname>
        </param>
        <briefdescription>
<para>Function to Calculates 1/in (reciprocal) value of Q31 Data type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="685" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="685" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1aac0b39af96533e88ceaf07a420b092fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t riscv_recip_q15</definition>
        <argsstring>(q15_t in, q15_t *dst, const q15_t *pRecipTable)</argsstring>
        <name>riscv_recip_q15</name>
        <param>
          <type>q15_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pRecipTable</declname>
        </param>
        <briefdescription>
<para>Function to Calculates 1/in (reciprocal) value of Q15 Data type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="736" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="736" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a2fb737513178e1e4b473008d0ebca517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __QADD8</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__QADD8</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="831" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="831" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a646b60c85d3e75c6c2bd78df06db9b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __QSUB8</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__QSUB8</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="849" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="849" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ae849a77250aa7bdc008f3f5e279de24e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __QADD16</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__QADD16</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="867" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="867" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a8bbf1eddc4fe17ba0e45217355a1fed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SHADD16</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SHADD16</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="884" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="884" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a3821f41c9144c9390bd2000c352c6454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __QSUB16</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__QSUB16</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="900" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="900" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a67078440657eb28859c39adc62ce16b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SHSUB16</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SHSUB16</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="916" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="916" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a12b3b944de6144cebccf3a815e964656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __QASX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__QASX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="932" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="932" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a6242e7d226a6b9848a7002f8e486f88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SHASX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SHASX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="948" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="948" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a995e63883c48c3c312c1492cb30d2e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __QSAX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__QSAX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="964" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="964" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a048274994b64ee3b63d754b2dd76de4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SHSAX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SHSAX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="980" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="980" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a19acaeacb4ecb2c19e5df75c36b16895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMUSDX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SMUSDX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="996" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="996" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a5459e095b1250db7f7c12763648f818b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMUADX</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SMUADX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1007" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1007" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a3cfcec82d3ff1b8570010b771052cb96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __QADD</definition>
        <argsstring>(int32_t x, int32_t y)</argsstring>
        <name>__QADD</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1019" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1019" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a98e0174c04cb34aec3ce57d5a370953d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __QSUB</definition>
        <argsstring>(int32_t x, int32_t y)</argsstring>
        <name>__QSUB</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1030" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1030" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ac2e3c09dbb7c8fe39d3edfa6cdd4a862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMLAD</definition>
        <argsstring>(uint32_t x, uint32_t y, uint32_t sum)</argsstring>
        <name>__SMLAD</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1041" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1041" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1aa768ceb80ab9196f4f49aa8840474eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMLADX</definition>
        <argsstring>(uint32_t x, uint32_t y, uint32_t sum)</argsstring>
        <name>__SMLADX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1055" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1055" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a72f55b9cc9aac9fea5ea37acdd642b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMLSDX</definition>
        <argsstring>(uint32_t x, uint32_t y, uint32_t sum)</argsstring>
        <name>__SMLSDX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1069" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1069" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a5e81e17e4b2c742f2bb2ca18721330b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint64_t</type>
        <definition>__STATIC_FORCEINLINE uint64_t __SMLALD</definition>
        <argsstring>(uint32_t x, uint32_t y, uint64_t sum)</argsstring>
        <name>__SMLALD</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1083" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1083" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ae97294482e85127ef97526a962ebd1b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint64_t</type>
        <definition>__STATIC_FORCEINLINE uint64_t __SMLALDX</definition>
        <argsstring>(uint32_t x, uint32_t y, uint64_t sum)</argsstring>
        <name>__SMLALDX</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1098" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1098" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a1caa8809ee9d31e162d28ebb09b2a773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMUAD</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SMUAD</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1113" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1113" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a7c93c24f4f94bcbb57fefcafa587e838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SMUSD</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>__SMUSD</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1125" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1125" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a1d4c96261598742fea98a13d28fbb06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE uint32_t</type>
        <definition>__STATIC_FORCEINLINE uint32_t __SXTB16</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>__SXTB16</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1137" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1137" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a5a21d62839618246ef1383fc5531425b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE int32_t</type>
        <definition>__STATIC_FORCEINLINE int32_t __SMMLA</definition>
        <argsstring>(int32_t x, int32_t y, int32_t sum)</argsstring>
        <name>__SMMLA</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>sum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1147" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="1147" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1gaaff318c4988ee737e847feee8afab3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_q7</definition>
        <argsstring>(const riscv_fir_instance_q7 *S, const q7_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_q7</name>
        <param>
          <type>const <ref refid="structriscv__fir__instance__q7" kindref="compound">riscv_fir_instance_q7</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q7 FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the Q7 FIR filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. Both coefficients and state variables are represented in 1.7 format and multiplications yield a 2.14 result. The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. The accumulator is converted to 18.7 format by discarding the low 7 bits. Finally, the result is truncated to 1.7 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1205" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_q7.c" bodystart="58" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1gae23d333a0ce67c25a40f56b14e6b4c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_init_q7</definition>
        <argsstring>(riscv_fir_instance_q7 *S, uint16_t numTaps, const q7_t *pCoeffs, q7_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_init_q7</name>
        <param>
          <type><ref refid="structriscv__fir__instance__q7" kindref="compound">riscv_fir_instance_q7</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q7 FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of filter coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that are processed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples processed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR_1gaaff318c4988ee737e847feee8afab3d5" kindref="member">riscv_fir_q7()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1219" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_init_q7.c" bodystart="60" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1ga8df4a826bbe755b7b0efa9615bf4df49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_q15</definition>
        <argsstring>(const riscv_fir_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_q15</name>
        <param>
          <type>const <ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR_1ga1797bd3279a9f58d181bc51ad66f06dc" kindref="member">riscv_fir_fast_q15()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1233" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_q15.c" bodystart="61" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1ga1797bd3279a9f58d181bc51ad66f06dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_fast_q15</definition>
        <argsstring>(const riscv_fir_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_fast_q15</name>
        <param>
          <type>const <ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the fast Q15 FIR filter (fast version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the fast Q15 FIR filter (fast version).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around and distorts the result. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits. The 2.30 accumulator is then truncated to 2.15 format and saturated to yield the 1.15 result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR_1ga8df4a826bbe755b7b0efa9615bf4df49" kindref="member">riscv_fir_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to avoid wrap around distortion. Both the slow and the fast versions use the same instance structure. Use function <ref refid="group__FIR_1ga4ff373438cd370b20a26ab7d3f8a5206" kindref="member">riscv_fir_init_q15()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1246" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_fast_q15.c" bodystart="61" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1ga4ff373438cd370b20a26ab7d3f8a5206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_init_q15</definition>
        <argsstring>(riscv_fir_instance_q15 *S, uint16_t numTaps, const q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_init_q15</name>
        <param>
          <type><ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of filter coefficients in the filter. Must be even and greater than or equal to 4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that are processed at a time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SUCCESS</computeroutput> if initialization was successful or <computeroutput>RISCV_MATH_ARGUMENT_ERROR</computeroutput> if <computeroutput>numTaps</computeroutput> is not a supported value.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter. Must be even and greater than or equal to 4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples processed per call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>numTaps</computeroutput> is not greater than or equal to 4 and even</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> Note that <computeroutput>numTaps</computeroutput> must be even and greater than or equal to 4. To implement an odd length filter simply increase <computeroutput>numTaps</computeroutput> by 1 and set the last coefficient to zero. For example, to implement a filter with <computeroutput>numTaps=3</computeroutput> and coefficients <preformatted>
    {0.3, -0.8, 0.3}
</preformatted> set <computeroutput>numTaps=4</computeroutput> and use the coefficients: <preformatted>
    {0.3, -0.8, 0.3, 0}.
</preformatted> Similarly, to implement a two point filter <preformatted>
    {0.3, -0.3}
</preformatted> set <computeroutput>numTaps=4</computeroutput> and use the coefficients: <preformatted>
    {0.3, -0.3, 0, 0}.
</preformatted> <computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize</computeroutput>, when running on RISC-V Core with DSP enabled and is of length <computeroutput>numTaps+blockSize-1</computeroutput>, when running on RISC-V0 where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR_1ga8df4a826bbe755b7b0efa9615bf4df49" kindref="member">riscv_fir_q15()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1263" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_init_q15.c" bodystart="79" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1ga5ab3142de031afd37695e2ac09c880d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_q31</definition>
        <argsstring>(const riscv_fir_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_q31</name>
        <param>
          <type>const <ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the Q31 FIR filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits. After all multiply-accumulates are performed, the 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR_1gaf3afcaa386694efed94fd250f07a54ad" kindref="member">riscv_fir_fast_q31()</ref> for a faster but less precise implementation of this filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1277" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_q31.c" bodystart="60" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1gaf3afcaa386694efed94fd250f07a54ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_fast_q31</definition>
        <argsstring>(const riscv_fir_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_fast_q31</name>
        <param>
          <type>const <ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the fast Q31 FIR filter (fast version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the fast Q31 FIR filter (fast version).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This function is optimized for speed at the expense of fixed-point precision and overflow protection. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are added to a 2.30 accumulator. Finally, the accumulator is saturated and converted to a 1.31 result. The fast version has the same overflow behavior as the standard version and provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR_1ga5ab3142de031afd37695e2ac09c880d1" kindref="member">riscv_fir_q31()</ref> for a slower implementation of this function which uses a 64-bit accumulator to provide higher precision. Both the slow and the fast versions use the same instance structure. Use function <ref refid="group__FIR_1ga20b9154a895a31aabdf745c7a98b16ea" kindref="member">riscv_fir_init_q31()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1290" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_fast_q31.c" bodystart="63" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1ga20b9154a895a31aabdf745c7a98b16ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_init_q31</definition>
        <argsstring>(riscv_fir_instance_q31 *S, uint16_t numTaps, const q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_init_q31</name>
        <param>
          <type><ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of filter coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that are processed at a time.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples processed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> <computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR_1ga5ab3142de031afd37695e2ac09c880d1" kindref="member">riscv_fir_q31()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1304" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_init_q31.c" bodystart="59" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1ga9609646d34fdf7b619a1dd845058e495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_f32</definition>
        <argsstring>(const riscv_fir_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_f32</name>
        <param>
          <type>const <ref refid="structriscv__fir__instance__f32" kindref="compound">riscv_fir_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the floating-point FIR filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1318" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_f32.c" bodystart="342" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR_1gabc32b5613cbace1478d28da3654fd357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_init_f32</definition>
        <argsstring>(riscv_fir_instance_f32 *S, uint16_t numTaps, const float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_init_f32</name>
        <param>
          <type><ref refid="structriscv__fir__instance__f32" kindref="compound">riscv_fir_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of filter coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that are processed at a time.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples processed per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR_1ga9609646d34fdf7b619a1dd845058e495" kindref="member">riscv_fir_f32()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1332" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_init_f32.c" bodystart="60" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1ga51d1bc8c536ec95a274807dbf6b4c747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_q15</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_q15</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. The accumulator is then shifted by <computeroutput>postShift</computeroutput> bits to truncate the result to 1.15 format by discarding the low 16 bits. Finally, the result is saturated to 1.15 format. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1gaaaa59376091d7b8caf6116de4e68f28b" kindref="member">riscv_biquad_cascade_df1_fast_q15()</ref> for a faster but less precise implementation of this filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1378" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_q15.c" bodystart="60" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gad0f11309749f0135467c1b476d5a05b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_init_q15</definition>
        <argsstring>(riscv_biquad_casd_df1_inst_q15 *S, uint8_t numStages, const q15_t *pCoeffs, q15_t *pState, int8_t postShift)</argsstring>
        <name>riscv_biquad_cascade_df1_init_q15</name>
        <param>
          <type><ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied to the output. Varies according to the coefficients format</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied to the accumulator result. Varies according to the coefficients format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, 0, b11, b12, a11, a12, b20, 0, b21, b22, a21, a22, ...}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>6*numStages</computeroutput> values. The zero coefficient between <computeroutput>b1</computeroutput> and <computeroutput>b2</computeroutput> facilities use of 16-bit SIMD instructions on the RISC-V4. </para></simplesect>
<simplesect kind="par"><title></title><para>The state variables are stored in the array <computeroutput>pState</computeroutput>. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1392" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_q15.c" bodystart="72" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gaaaa59376091d7b8caf6116de4e68f28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_fast_q15</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_fast_q15</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Fast but less precise processing function for the Q15 Biquad cascade filter for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Fast but less precise processing function for the Q15 Biquad cascade filter for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around and distorts the result. In order to avoid overflows completely the input signal must be scaled down by two bits and lie in the range [-0.25 +0.25). The 2.30 accumulator is then shifted by <computeroutput>postShift</computeroutput> bits and the result truncated to 1.15 format by discarding the low 16 bits. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1ga51d1bc8c536ec95a274807dbf6b4c747" kindref="member">riscv_biquad_cascade_df1_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to avoid wrap around distortion. Both the slow and the fast versions use the same instance structure. Use the function <ref refid="group__BiquadCascadeDF1_1gad0f11309749f0135467c1b476d5a05b8" kindref="member">riscv_biquad_cascade_df1_init_q15()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1406" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_fast_q15.c" bodystart="61" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1ga9db8b6490e760bcbb86366385ffd7a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_q31</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_q31</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by 2 bits and lie in the range [-0.25 +0.25). After all 5 multiply-accumulates are performed, the 2.62 accumulator is shifted by <computeroutput>postShift</computeroutput> bits and the result truncated to 1.31 format by discarding the low 32 bits. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1gaed838e1892c406620fbb0e131e273d8d" kindref="member">riscv_biquad_cascade_df1_fast_q31()</ref> for a faster but less precise implementation of this filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1419" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_q31.c" bodystart="60" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gaed838e1892c406620fbb0e131e273d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_fast_q31</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_fast_q31</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Fast but less precise processing function for the Q31 Biquad cascade filter for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Fast but less precise processing function for the Q31 Biquad cascade filter for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This function is optimized for speed at the expense of fixed-point precision and overflow protection. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are added to a 2.30 accumulator. Finally, the accumulator is saturated and converted to a 1.31 result. The fast version has the same overflow behavior as the standard version and provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signal must be scaled down by two bits and lie in the range [-0.25 +0.25). Use the intialization function <ref refid="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" kindref="member">riscv_biquad_cascade_df1_init_q31()</ref> to initialize filter structure. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1ga9db8b6490e760bcbb86366385ffd7a5b" kindref="member">riscv_biquad_cascade_df1_q31()</ref> for a slower implementation of this function which uses 64-bit accumulation to provide higher precision. Both the slow and the fast versions use the same instance structure. Use the function <ref refid="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" kindref="member">riscv_biquad_cascade_df1_init_q31()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1432" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_fast_q31.c" bodystart="63" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_init_q31</definition>
        <argsstring>(riscv_biquad_casd_df1_inst_q31 *S, uint8_t numStages, const q31_t *pCoeffs, q31_t *pState, int8_t postShift)</argsstring>
        <name>riscv_biquad_cascade_df1_init_q31</name>
        <param>
          <type><ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied to the output. Varies according to the coefficients format</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied after the accumulator. Varies according to the coefficients format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> points to state variables array. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1446" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_q31.c" bodystart="71" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gac9bd447ab6475b0bbe7aaf14b0a4c6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_f32</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_f32</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1460" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_f32.c" bodystart="320" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1ga3cdfc93d24e61bf7c88d3d51f01cb73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_init_f32</definition>
        <argsstring>(riscv_biquad_casd_df1_inst_f32 *S, uint8_t numStages, const float32_t *pCoeffs, float32_t *pState)</argsstring>
        <name>riscv_biquad_cascade_df1_init_f32</name>
        <param>
          <type><ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted></para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> is a pointer to state array. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1473" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_f32.c" bodystart="71" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixAdd_1gabfdad4197bfca4e75133d8328e41f8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_add_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrcA, const riscv_matrix_instance_f32 *pSrcB, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_add_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point matrix addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1528" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_add_f32.c" bodystart="147" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixAdd_1ga99a2735b64d77826022397e66272ce92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_add_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrcA, const riscv_matrix_instance_q15 *pSrcB, riscv_matrix_instance_q15 *pDst)</argsstring>
        <name>riscv_mat_add_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q15 matrix addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1541" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_add_q15.c" bodystart="55" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixAdd_1ga60b6ca8480aa4eb4be0235b133702d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_add_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrcA, const riscv_matrix_instance_q31 *pSrcB, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_add_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 matrix addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1554" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_add_q31.c" bodystart="55" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxMatrixMult_1gaefc3c7a3dba4761e5539f212124500c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_cmplx_mult_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrcA, const riscv_matrix_instance_f32 *pSrcB, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_cmplx_mult_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point, complex, matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
Floating-point, complex, matrix multiplication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output complex matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1567" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_f32.c" bodystart="407" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxMatrixMult_1ga38acb81acbd0dce4f1eb4bf533647181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_cmplx_mult_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrcA, const riscv_matrix_instance_q15 *pSrcB, riscv_matrix_instance_q15 *pDst, q15_t *pScratch)</argsstring>
        <name>riscv_mat_cmplx_mult_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch</declname>
        </param>
        <briefdescription>
<para>Q15, complex, matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
Q15, complex, matrix multiplication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an array for storing intermediate results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Conditions for optimum performance</title><para>Input, output and state buffers should be aligned by 32-bit</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The inputs to the multiplications are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1580" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_q15.c" bodystart="62" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxMatrixMult_1gab4de134e992a9fbb53bff2965ad72cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_cmplx_mult_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrcA, const riscv_matrix_instance_q31 *pSrcB, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_cmplx_mult_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31, complex, matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
Q31, complex, matrix multiplication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output complex matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. The input is thus scaled down by log2(numColsA) bits to avoid overflows, as a total of numColsA additions are performed internally. The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1594" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_q31.c" bodystart="61" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixTrans_1gae9c3388323897b322f6bd136d52f0a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_trans_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrc, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_trans_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point matrix transpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1606" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_trans_f32.c" bodystart="187" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixTrans_1gaf3a6e089ca08fe48cc387d987d08dfea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_trans_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrc, riscv_matrix_instance_q15 *pDst)</argsstring>
        <name>riscv_mat_trans_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q15 matrix transpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1617" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_trans_q15.c" bodystart="50" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixTrans_1gaf42658e8941fb98465ca722d90d452e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_trans_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrc, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_trans_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 matrix transpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1628" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_trans_q31.c" bodystart="50" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixMult_1ga0f1c7b30e1c552617b8bb6a6898e57d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_mult_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrcA, const riscv_matrix_instance_f32 *pSrcB, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_mult_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1640" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_mult_f32.c" bodystart="399" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixMult_1gaccc2ce7b1bdbffa4332ae95d1151a5f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_mult_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrcA, const riscv_matrix_instance_q15 *pSrcB, riscv_matrix_instance_q15 *pDst, q15_t *pState)</argsstring>
        <name>riscv_mat_mult_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Q15 matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array for storing intermediate results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array for storing intermediate results (Unused) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The inputs to the multiplications are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format. </para></simplesect>
<simplesect kind="par"><title></title><para>Refer to <ref refid="group__MatrixMult_1ga39f8eb0440c425a21ae4ee04b0bdb0c1" kindref="member">riscv_mat_mult_fast_q15()</ref> for a faster but less precise version of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1654" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_mult_q15.c" bodystart="62" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixMult_1ga39f8eb0440c425a21ae4ee04b0bdb0c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_mult_fast_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrcA, const riscv_matrix_instance_q15 *pSrcB, riscv_matrix_instance_q15 *pDst, q15_t *pState)</argsstring>
        <name>riscv_mat_mult_fast_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Q15 matrix multiplication (fast variant) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array for storing intermediate results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
Q15 matrix multiplication (fast variant) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array for storing intermediate results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The difference between the function <ref refid="group__MatrixMult_1gaccc2ce7b1bdbffa4332ae95d1151a5f7" kindref="member">riscv_mat_mult_q15()</ref> and this fast variant is that the fast variant use a 32-bit rather than a 64-bit accumulator. The result of each 1.15 x 1.15 multiplication is truncated to 2.30 format. These intermediate results are accumulated in a 32-bit register in 2.30 format. Finally, the accumulator is saturated and converted to a 1.15 result. </para></simplesect>
<simplesect kind="par"><title></title><para>The fast version has the same overflow behavior as the standard version but provides less precision since it discards the low 16 bits of each multiplication result. In order to avoid overflows completely the input signals must be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows, as a total of numColsA additions are computed internally for each output element. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__MatrixMult_1gaccc2ce7b1bdbffa4332ae95d1151a5f7" kindref="member">riscv_mat_mult_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to provide higher precision. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1669" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_mult_fast_q15.c" bodystart="68" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixMult_1ga0e5d2a6760fda6dad3a1f159d8d4d45e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_mult_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrcA, const riscv_matrix_instance_q31 *pSrcB, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_mult_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. The input is thus scaled down by log2(numColsA) bits to avoid overflows, as a total of numColsA additions are performed internally. The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final result. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__MatrixMult_1ga84068b1bbb318d532690735db534edf6" kindref="member">riscv_mat_mult_fast_q31()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1683" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_mult_q31.c" bodystart="63" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixMult_1ga84068b1bbb318d532690735db534edf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_mult_fast_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrcA, const riscv_matrix_instance_q31 *pSrcB, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_mult_fast_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 matrix multiplication (fast variant) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
Q31 matrix multiplication (fast variant) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The difference between the function <ref refid="group__MatrixMult_1ga0e5d2a6760fda6dad3a1f159d8d4d45e" kindref="member">riscv_mat_mult_q31()</ref> and this fast variant is that the fast variant use a 32-bit rather than a 64-bit accumulator. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are accumulated in a 32-bit register in 2.30 format. Finally, the accumulator is saturated and converted to a 1.31 result. </para></simplesect>
<simplesect kind="par"><title></title><para>The fast version has the same overflow behavior as the standard version but provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signals must be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows, as a total of numColsA additions are computed internally for each output element. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__MatrixMult_1ga0e5d2a6760fda6dad3a1f159d8d4d45e" kindref="member">riscv_mat_mult_q31()</ref> for a slower implementation of this function which uses 64-bit accumulation to provide higher precision. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1696" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_mult_fast_q31.c" bodystart="67" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixSub_1gab035be0f902e03f857e7161d603cc130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_sub_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrcA, const riscv_matrix_instance_f32 *pSrcB, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_sub_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point matrix subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1709" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_sub_f32.c" bodystart="145" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixSub_1ga2d0e8484cb1c8b3252307abffd4c5664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_sub_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrcA, const riscv_matrix_instance_q15 *pSrcB, riscv_matrix_instance_q15 *pDst)</argsstring>
        <name>riscv_mat_sub_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q15 matrix subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1722" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_sub_q15.c" bodystart="55" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixSub_1ga09b9e40794c869340710b03966a95710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_sub_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrcA, const riscv_matrix_instance_q31 *pSrcB, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_sub_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 matrix subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1735" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_sub_q31.c" bodystart="55" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixScale_1gad025b0b8b1424e42dd4b0b0d88db2db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_scale_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrc, float32_t scale, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_scale_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point matrix scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scale factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scale factor to be applied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1748" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_scale_f32.c" bodystart="143" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixScale_1ga18f1d6575425214ce9eaec5a8362436f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_scale_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrc, q15_t scaleFract, int32_t shift, riscv_matrix_instance_q15 *pDst)</argsstring>
        <name>riscv_mat_scale_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>scaleFract</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q15 matrix scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The input data <computeroutput>*pSrc</computeroutput> and <computeroutput>scaleFract</computeroutput> are in 1.15 format. These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1762" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_scale_q15.c" bodystart="56" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixScale_1gaa8bead3b36fc7aeed7fa2579dbe403a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_scale_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrc, q31_t scaleFract, int32_t shift, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_scale_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>scaleFract</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 matrix scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns either <computeroutput>RISCV_MATH_SIZE_MISMATCH</computeroutput> or <computeroutput>RISCV_MATH_SUCCESS</computeroutput> based on the outcome of size checking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The input data <computeroutput>*pSrc</computeroutput> and <computeroutput>scaleFract</computeroutput> are in 1.31 format. These are multiplied to yield a 2.62 intermediate result which is shifted with saturation to 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1777" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_scale_q31.c" bodystart="56" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixInit_1gaa331509280e01b0d5a291a3edc3445a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mat_init_q31</definition>
        <argsstring>(riscv_matrix_instance_q31 *S, uint16_t nRows, uint16_t nColumns, q31_t *pData)</argsstring>
        <name>riscv_mat_init_q31</name>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nRows</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nColumns</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pData</declname>
        </param>
        <briefdescription>
<para>Q31 matrix initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point matrix structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pData</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the matrix data array.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pData</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the matrix data array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1790" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_init_q31.c" bodystart="55" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixInit_1ga898e2982d889ba9c78de91066e72bd52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mat_init_q15</definition>
        <argsstring>(riscv_matrix_instance_q15 *S, uint16_t nRows, uint16_t nColumns, q15_t *pData)</argsstring>
        <name>riscv_mat_init_q15</name>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nRows</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nColumns</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pData</declname>
        </param>
        <briefdescription>
<para>Q15 matrix initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point matrix structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pData</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the matrix data array.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pData</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the matrix data array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1803" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_init_q15.c" bodystart="50" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixInit_1gadd1996f7da2fd9f19a6e2f3e691b681f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mat_init_f32</definition>
        <argsstring>(riscv_matrix_instance_f32 *S, uint16_t nRows, uint16_t nColumns, float32_t *pData)</argsstring>
        <name>riscv_mat_init_f32</name>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nRows</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>nColumns</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pData</declname>
        </param>
        <briefdescription>
<para>Floating-point matrix initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point matrix structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pData</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the matrix data array.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nColumns</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pData</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the matrix data array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1816" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_init_f32.c" bodystart="59" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1ga88096786fde77479ae2fc7f0b4a060b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_pid_init_f32</definition>
        <argsstring>(riscv_pid_instance_f32 *S, int32_t resetStateFlag)</argsstring>
        <name>riscv_pid_init_f32</name>
        <param>
          <type><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>resetStateFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the PID structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resetStateFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to reset the state. 0 = no change in state 1 = reset the state.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the PID structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resetStateFlag</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>value = 0: no change in state</para></listitem><listitem><para>value = 1: reset state </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The <computeroutput>resetStateFlag</computeroutput> specifies whether to set state to zero or not. <linebreak/>
 The function computes the structure fields: <computeroutput>A0</computeroutput>, <computeroutput>A1</computeroutput> <computeroutput>A2</computeroutput> using the proportional gain( <computeroutput>Kp</computeroutput>), integral gain( <computeroutput>Ki</computeroutput>) and derivative gain( <computeroutput>Kd</computeroutput>) also sets the state variables to all zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1876" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_pid_init_f32.c" bodystart="52" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1ga436fc2266fe54087bc8b203eb675087c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_pid_reset_f32</definition>
        <argsstring>(riscv_pid_instance_f32 *S)</argsstring>
        <name>riscv_pid_reset_f32</name>
        <param>
          <type><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Reset function for the floating-point PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the floating-point PID Control structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point PID structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The function resets the state buffer to zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1885" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_pid_reset_f32.c" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1ga2ca8b149095d04d8dc73e4a052be1c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_pid_init_q31</definition>
        <argsstring>(riscv_pid_instance_q31 *S, int32_t resetStateFlag)</argsstring>
        <name>riscv_pid_init_q31</name>
        <param>
          <type><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>resetStateFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 PID structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resetStateFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to reset the state. 0 = no change in state 1 = reset the state.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 PID structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resetStateFlag</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>value = 0: no change in state</para></listitem><listitem><para>value = 1: reset state </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The <computeroutput>resetStateFlag</computeroutput> specifies whether to set state to zero or not. <linebreak/>
 The function computes the structure fields: <computeroutput>A0</computeroutput>, <computeroutput>A1</computeroutput> <computeroutput>A2</computeroutput> using the proportional gain( <computeroutput>Kp</computeroutput>), integral gain( <computeroutput>Ki</computeroutput>) and derivative gain( <computeroutput>Kd</computeroutput>) also sets the state variables to all zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1894" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_pid_init_q31.c" bodystart="52" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1ga9014e1ffacd82a5ecf90f11aa626caab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_pid_reset_q31</definition>
        <argsstring>(riscv_pid_instance_q31 *S)</argsstring>
        <name>riscv_pid_reset_q31</name>
        <param>
          <type><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Reset function for the Q31 PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 PID Control structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 PID structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The function resets the state buffer to zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1904" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_pid_reset_q31.c" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1ga3addd5e4ea6d8aeaf4f1ecd7cf5c6c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_pid_init_q15</definition>
        <argsstring>(riscv_pid_instance_q15 *S, int32_t resetStateFlag)</argsstring>
        <name>riscv_pid_init_q15</name>
        <param>
          <type><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>resetStateFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 PID structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resetStateFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to reset the state. 0 = no change in state 1 = reset the state.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 PID structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resetStateFlag</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>value = 0: no change in state</para></listitem><listitem><para>value = 1: reset state </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The <computeroutput>resetStateFlag</computeroutput> specifies whether to set state to zero or not. <linebreak/>
 The function computes the structure fields: <computeroutput>A0</computeroutput>, <computeroutput>A1</computeroutput> <computeroutput>A2</computeroutput> using the proportional gain( <computeroutput>Kp</computeroutput>), integral gain( <computeroutput>Ki</computeroutput>) and derivative gain( <computeroutput>Kd</computeroutput>) also sets the state variables to all zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1913" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_pid_init_q15.c" bodystart="52" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1gaf85e1dc20d915a787ce687e1a80f2bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_pid_reset_q15</definition>
        <argsstring>(riscv_pid_instance_q15 *S)</argsstring>
        <name>riscv_pid_reset_q15</name>
        <param>
          <type><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Reset function for the Q15 PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the q15 PID Control structure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 PID structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The function resets the state buffer to zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1922" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_pid_reset_q15.c" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicMult_1ga1845c38508f4157faa0fac3b104a0fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mult_q7</definition>
        <argsstring>(const q7_t *pSrcA, const q7_t *pSrcB, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_mult_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q7 vector multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1985" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_mult_q7.c" bodystart="54" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicMult_1gacb33f56ed33bd4f1b09042defa89cef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mult_q15</definition>
        <argsstring>(const q15_t *pSrcA, const q15_t *pSrcB, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_mult_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q15 vector multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="1999" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_mult_q15.c" bodystart="54" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicMult_1ga6417e0441c17cf0bf524ba032cc89681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mult_q31</definition>
        <argsstring>(const q31_t *pSrcA, const q31_t *pSrcB, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_mult_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q31 vector multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2013" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_mult_q31.c" bodystart="54" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicMult_1gae63353652b163647d48e82dae770d751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mult_f32</definition>
        <argsstring>(const float32_t *pSrcA, const float32_t *pSrcB, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_mult_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Floating-point vector multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2027" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_mult_f32.c" bodystart="62" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1gacad6e8ca43f6349539c22241654573a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_cfft_radix2_init_q15</definition>
        <argsstring>(riscv_cfft_radix2_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_radix2_init_q15</name>
        <param>
          <type><ref refid="structriscv__cfft__radix2__instance__q15" kindref="compound">riscv_cfft_radix2_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga264c98d1748ec1c5cfd561194df73059" kindref="member">riscv_cfft_q15</ref> and will be removed <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 CFFT/CIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>ifftFlag</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlag for calculation of CIFFT otherwise CFFT is calculated </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>fftLen</computeroutput> Specifies length of CFFT/CIFFT process. Supported FFT Lengths are 16, 64, 256, 1024. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2049" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix2_init_q15.c" bodystart="70" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1gab7cdf99ddd1bb7d03634d20d6c2773f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_radix2_q15</definition>
        <argsstring>(const riscv_cfft_radix2_instance_q15 *S, q15_t *pSrc)</argsstring>
        <name>riscv_cfft_radix2_q15</name>
        <param>
          <type>const <ref refid="structriscv__cfft__radix2__instance__q15" kindref="compound">riscv_cfft_radix2_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
<para>Processing function for the fixed-point CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga264c98d1748ec1c5cfd561194df73059" kindref="member">riscv_cfft_q15</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the fixed-point CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2056" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix2_q15.c" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga064e7bc238432770e9e56ad0f8016b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_cfft_radix4_init_q15</definition>
        <argsstring>(riscv_cfft_radix4_instance_q15 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_radix4_init_q15</name>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000010"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga264c98d1748ec1c5cfd561194df73059" kindref="member">riscv_cfft_q15</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>ifftFlag</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlag for calculation of CIFFT otherwise CFFT is calculated </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>fftLen</computeroutput> Specifies length of CFFT/CIFFT process. Supported FFT Lengths are 16, 64, 256, 1024. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2076" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix4_init_q15.c" bodystart="71" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga47697317fa5f9f6bca6aa77813743a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_radix4_q15</definition>
        <argsstring>(const riscv_cfft_radix4_instance_q15 *S, q15_t *pSrc)</argsstring>
        <name>riscv_cfft_radix4_q15</name>
        <param>
          <type>const <ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga264c98d1748ec1c5cfd561194df73059" kindref="member">riscv_cfft_q15</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 CFFT/CIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer. Processing occurs in-place. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Input and output formats:</title><para>Internally input is downscaled by 2 for every stage to avoid saturations inside CFFT/CIFFT process. Hence the output format is different for different FFT sizes. The input and output formats for different FFT sizes and number of bits to upscale are mentioned in the tables below for CFFT and CIFFT: </para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="CFFTQ15.png">Input and Output Formats for Q15 CFFT</image>
 <image type="html" name="CIFFTQ15.png">Input and Output Formats for Q15 CIFFT</image>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2083" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix4_q15.c" bodystart="78" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1gaf86c4dc08d643e0aa7a9b056287c0857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_cfft_radix2_init_q31</definition>
        <argsstring>(riscv_cfft_radix2_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_radix2_init_q31</name>
        <param>
          <type><ref refid="structriscv__cfft__radix2__instance__q31" kindref="compound">riscv_cfft_radix2_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga5ff7e02a685c0cf6b0a93642488b4000" kindref="member">riscv_cfft_q31</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>ifftFlag</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlag for calculation of CIFFT otherwise CFFT is calculated </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>fftLen</computeroutput> Specifies length of CFFT/CIFFT process. Supported FFT Lengths are 16, 64, 256, 1024. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2102" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix2_init_q31.c" bodystart="69" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1gae1cc226afadc65fe0d56a9693c703dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_radix2_q31</definition>
        <argsstring>(const riscv_cfft_radix2_instance_q31 *S, q31_t *pSrc)</argsstring>
        <name>riscv_cfft_radix2_q31</name>
        <param>
          <type>const <ref refid="structriscv__cfft__radix2__instance__q31" kindref="compound">riscv_cfft_radix2_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
<para>Processing function for the fixed-point CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga5ff7e02a685c0cf6b0a93642488b4000" kindref="member">riscv_cfft_q31</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the fixed-point CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2109" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix2_q31.c" bodystart="67" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga3bb0236efa7373a44c5ac9224fc143b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_radix4_q31</definition>
        <argsstring>(const riscv_cfft_radix4_instance_q31 *S, q31_t *pSrc)</argsstring>
        <name>riscv_cfft_radix4_q31</name>
        <param>
          <type>const <ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga5ff7e02a685c0cf6b0a93642488b4000" kindref="member">riscv_cfft_q31</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Input and output formats:</title><para>Internally input is downscaled by 2 for every stage to avoid saturations inside CFFT/CIFFT process. Hence the output format is different for different FFT sizes. The input and output formats for different FFT sizes and number of bits to upscale are mentioned in the tables below for CFFT and CIFFT: </para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="CFFTQ31.png">Input and Output Formats for Q31 CFFT</image>
 <image type="html" name="CIFFTQ31.png">Input and Output Formats for Q31 CIFFT</image>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2128" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix4_q31.c" bodystart="76" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1gacc883cc192d4c36fb74119ef4dbd744b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_cfft_radix4_init_q31</definition>
        <argsstring>(riscv_cfft_radix4_instance_q31 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_radix4_init_q31</name>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga5ff7e02a685c0cf6b0a93642488b4000" kindref="member">riscv_cfft_q31</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 CFFT/CIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>ifftFlag</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlag for calculation of CIFFT otherwise CFFT is calculated </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>fftLen</computeroutput> Specifies length of CFFT/CIFFT process. Supported FFT Lengths are 16, 64, 256, 1024. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2133" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix4_init_q31.c" bodystart="70" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1gae9048c940cbb81c70035ce08ea2fa09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_cfft_radix2_init_f32</definition>
        <argsstring>(riscv_cfft_radix2_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_radix2_init_f32</name>
        <param>
          <type><ref refid="structriscv__cfft__radix2__instance__f32" kindref="compound">riscv_cfft_radix2_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga2e7afb704493463708fb1404c7a5bb5a" kindref="member">riscv_cfft_f32</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>ifftFlag</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlag for calculation of CIFFT otherwise CFFT is calculated </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>fftLen</computeroutput> Specifies length of CFFT/CIFFT process. Supported FFT Lengths are 16, 64, 256, 1024. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2155" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix2_init_f32.c" bodystart="69" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga16cc33ddd8ed2dfaf23b9abb0c28cc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_radix2_f32</definition>
        <argsstring>(const riscv_cfft_radix2_instance_f32 *S, float32_t *pSrc)</argsstring>
        <name>riscv_cfft_radix2_f32</name>
        <param>
          <type>const <ref refid="structriscv__cfft__radix2__instance__f32" kindref="compound">riscv_cfft_radix2_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
<para>Radix-2 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga2e7afb704493463708fb1404c7a5bb5a" kindref="member">riscv_cfft_f32</ref> and will be removed in the future <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Radix-2 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2162" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix2_f32.c" bodystart="68" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga3b1ebc22002732736620feb0b725e9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_cfft_radix4_init_f32</definition>
        <argsstring>(riscv_cfft_radix4_instance_f32 *S, uint16_t fftLen, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_radix4_init_f32</name>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000009"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superceded by <ref refid="group__ComplexFFT_1ga2e7afb704493463708fb1404c7a5bb5a" kindref="member">riscv_cfft_f32</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>ifftFlag</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlag for calculation of CIFFT otherwise CFFT is calculated </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>fftLen</computeroutput> Specifies length of CFFT/CIFFT process. Supported FFT Lengths are 16, 64, 256, 1024. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2182" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix4_init_f32.c" bodystart="69" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga07d1cb586d6c9553c7e9e4aa05fe9320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_radix4_f32</definition>
        <argsstring>(const riscv_cfft_radix4_instance_f32 *S, float32_t *pSrc)</argsstring>
        <name>riscv_cfft_radix4_f32</name>
        <param>
          <type>const <ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point Radix-4 CFFT/CIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superseded by <ref refid="group__ComplexFFT_1ga2e7afb704493463708fb1404c7a5bb5a" kindref="member">riscv_cfft_f32</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Radix-4 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2189" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_radix4_f32.c" bodystart="69" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga264c98d1748ec1c5cfd561194df73059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_q15</definition>
        <argsstring>(const riscv_cfft_instance_q15 *S, q15_t *p1, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_q15</name>
        <param>
          <type>const <ref refid="structriscv__cfft__instance__q15" kindref="compound">riscv_cfft_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Processing function for Q15 complex FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 CFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2204" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_q15.c" bodystart="81" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga5ff7e02a685c0cf6b0a93642488b4000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_q31</definition>
        <argsstring>(const riscv_cfft_instance_q31 *S, q31_t *p1, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_q31</name>
        <param>
          <type>const <ref refid="structriscv__cfft__instance__q31" kindref="compound">riscv_cfft_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 complex FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the fixed-point CFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2221" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_q31.c" bodystart="81" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__ComplexFFT_1ga2e7afb704493463708fb1404c7a5bb5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cfft_f32</definition>
        <argsstring>(const riscv_cfft_instance_f32 *S, float32_t *p1, uint8_t ifftFlag, uint8_t bitReverseFlag)</argsstring>
        <name>riscv_cfft_f32</name>
        <param>
          <type>const <ref refid="structriscv__cfft__instance__f32" kindref="compound">riscv_cfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point complex FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point CFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex data buffer of size <computeroutput>2*fftLen</computeroutput>. Processing occurs in-place </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2238" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_cfft_f32.c" bodystart="571" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1gad750a06797c4caf68f66d260eb0e2c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_init_q15</definition>
        <argsstring>(riscv_rfft_instance_q15 *S, uint32_t fftLenReal, uint32_t ifftFlagR, uint32_t bitReverseFlag)</argsstring>
        <name>riscv_rfft_init_q15</name>
        <param>
          <type><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fftLenReal</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ifftFlagR</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 RFFT/RIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLenReal</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlagR</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLenReal</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>fftLenReal</computeroutput> specifies length of RFFT/RIFFT Process. Supported FFT Lengths are 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>ifftFlagR</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlagR to calculate RIFFT, otherwise RFFT is calculated. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>This function also initializes Twiddle factor table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2258" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_init_q15.c" bodystart="66" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1gac6c836bb35dcbdd2a96d38ae9bfadd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rfft_q15</definition>
        <argsstring>(const riscv_rfft_instance_q15 *S, q15_t *pSrc, q15_t *pDst)</argsstring>
        <name>riscv_rfft_q15</name>
        <param>
          <type>const <ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 RFFT/RIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Input an output formats</title><para>Internally input is downscaled by 2 for every stage to avoid saturations inside CFFT/CIFFT process. Hence the output format is different for different RFFT sizes. The input and output formats for different RFFT sizes and number of bits to upscale are mentioned in the tables below for RFFT and RIFFT: </para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="RFFTQ15.png">Input and Output Formats for Q15 RFFT</image>
</para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="RIFFTQ15.png">Input and Output Formats for Q15 RIFFT</image>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2264" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_q15.c" bodystart="74" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga9580b4195023f20ddbad0ac8d7719154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_init_q31</definition>
        <argsstring>(riscv_rfft_instance_q31 *S, uint32_t fftLenReal, uint32_t ifftFlagR, uint32_t bitReverseFlag)</argsstring>
        <name>riscv_rfft_init_q31</name>
        <param>
          <type><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fftLenReal</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ifftFlagR</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 RFFT/RIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLenReal</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlagR</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLenReal</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The parameter <computeroutput>fftLenReal</computeroutput> specifies length of RFFT/RIFFT Process. Supported FFT Lengths are 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>ifftFlagR</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlagR to calculate RIFFT, otherwise RFFT is calculated. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>This function also initializes Twiddle factor table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2283" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_init_q31.c" bodystart="68" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga1128bf1b0b16f271b593a1d94bb9c4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rfft_q31</definition>
        <argsstring>(const riscv_rfft_instance_q31 *S, q31_t *pSrc, q31_t *pDst)</argsstring>
        <name>riscv_rfft_q31</name>
        <param>
          <type>const <ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 RFFT/RIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Input an output formats</title><para>Internally input is downscaled by 2 for every stage to avoid saturations inside CFFT/CIFFT process. Hence the output format is different for different RFFT sizes. The input and output formats for different RFFT sizes and number of bits to upscale are mentioned in the tables below for RFFT and RIFFT: </para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="RFFTQ31.png">Input and Output Formats for Q31 RFFT</image>
</para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="RIFFTQ31.png">Input and Output Formats for Q31 RIFFT</image>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2289" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_q31.c" bodystart="74" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga84650b5ce6836a7cd0f0fc9da41fb3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_init_f32</definition>
        <argsstring>(riscv_rfft_instance_f32 *S, riscv_cfft_radix4_instance_f32 *S_CFFT, uint32_t fftLenReal, uint32_t ifftFlagR, uint32_t bitReverseFlag)</argsstring>
        <name>riscv_rfft_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref> *</type>
          <declname>S_CFFT</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>fftLenReal</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ifftFlagR</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bitReverseFlag</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point RFFT/RIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superceded by <ref refid="group__RealFFT_1gaa09af308fb200adedfaebdd7ca4f57cf" kindref="member">riscv_rfft_fast_init_f32</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLenReal</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the FFT. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlagR</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that selects transform direction<itemizedlist>
<listitem><para>value = 0: forward transform</para></listitem><listitem><para>value = 1: inverse transform </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitReverseFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that enables / disables bit reversal of output<itemizedlist>
<listitem><para>value = 0: disables bit reversal of output</para></listitem><listitem><para>value = 1: enables bit reversal of output </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLenReal</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
</para></xrefdescription></xrefsect></para><para><simplesect kind="par"><title>Description</title><para>The parameter <computeroutput>fftLenReal</computeroutput>specifies length of RFFT/RIFFT Process. Supported FFT Lengths are 128, 512, 2048. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>ifftFlagR</computeroutput> controls whether a forward or inverse transform is computed. Set(=1) ifftFlagR to calculate RIFFT, otherwise RFFT is calculated. </para></simplesect>
<simplesect kind="par"><title></title><para>The parameter <computeroutput>bitReverseFlag</computeroutput> controls whether output is in normal order or bit reversed order. Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para>This function also initializes Twiddle factor table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2309" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_init_f32.c" bodystart="68" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga15270da93ab349377512694e2704a324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rfft_f32</definition>
        <argsstring>(const riscv_rfft_instance_f32 *S, float32_t *pSrc, float32_t *pDst)</argsstring>
        <name>riscv_rfft_f32</name>
        <param>
          <type>const <ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point RFFT/RIFFT. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Do not use this function. It has been superceded by <ref refid="group__RealFFT_1ga7826c95c1a0f791c1b6e348b48d94658" kindref="member">riscv_rfft_fast_f32</ref> and will be removed in the future. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2316" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_f32.c" bodystart="89" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1gaa09af308fb200adedfaebdd7ca4f57cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S, uint16_t fftLen)</argsstring>
        <name>riscv_rfft_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>fftLen</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fftLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the Real Sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>fftLen</computeroutput> is not a supported length</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Description</title><para>The parameter <computeroutput>fftLen</computeroutput> specifies the length of RFFT/CIFFT process. Supported FFT Lengths are 32, 64, 128, 256, 512, 1024, 2048, 4096. </para></simplesect>
<simplesect kind="par"><title></title><para>This Function also initializes Twiddle factor table pointer and Bit reversal table pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2331" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="285" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1gafb139a61734e7cc86971714fa26a547c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_32_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_32_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 32pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2335" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="52" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1gad58e01e3ab5a0aa7fbb5947e267202f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_64_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_64_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 64pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2337" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="81" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga0c8d9759ed529cd4224aba76c683e0f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_128_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_128_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 128pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2339" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="110" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga49b1cb13f35ce303843f300933784357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_256_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_256_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 256pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2341" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="139" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga4568a1375a971e1f2f7797478e60925f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_512_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_512_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 512pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2343" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="168" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga081703eafa8b29aba22399ced5080605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_1024_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_1024_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 1024pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2345" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="196" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1gac0d553058b5061e85fd4ef4c4ad6060e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_2048_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_2048_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 2048pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2347" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="223" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga58ccd3e5aacb1136b8539e81195cbea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_rfft_4096_fast_init_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S)</argsstring>
        <name>riscv_rfft_4096_fast_init_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
<para>Initialization function for the 4096pt floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : an error is detected </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2349" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_init_f32.c" bodystart="251" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="group__RealFFT_1ga7826c95c1a0f791c1b6e348b48d94658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rfft_fast_f32</definition>
        <argsstring>(riscv_rfft_fast_instance_f32 *S, float32_t *p, float32_t *pOut, uint8_t ifftFlag)</argsstring>
        <name>riscv_rfft_fast_f32</name>
        <param>
          <type><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ifftFlag</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point real FFT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an <ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ifftFlag</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>value = 0: RFFT</para></listitem><listitem><para>value = 1: RIFFT </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2352" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_rfft_fast_f32.c" bodystart="291" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__DCT4__IDCT4_1gac8e0136f9dec411d05bf7c684dfc0395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_dct4_init_f32</definition>
        <argsstring>(riscv_dct4_instance_f32 *S, riscv_rfft_instance_f32 *S_RFFT, riscv_cfft_radix4_instance_f32 *S_CFFT, uint16_t N, uint16_t Nby2, float32_t normalize)</argsstring>
        <name>riscv_dct4_init_f32</name>
        <param>
          <type><ref refid="structriscv__dct4__instance__f32" kindref="compound">riscv_dct4_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref> *</type>
          <declname>S_RFFT</declname>
        </param>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref> *</type>
          <declname>S_CFFT</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Nby2</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>normalize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point DCT4/IDCT4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of floating-point DCT4/IDCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_RFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of floating-point RFFT/RIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of floating-point CFFT/CIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Nby2</parametername>
</parameternamelist>
<parameterdescription>
<para>half of the length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>normalizing factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>riscv_status function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_ARGUMENT_ERROR if <computeroutput>fftLenReal</computeroutput> is not a supported transform length.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of floating-point DCT4/IDCT4 structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_RFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of floating-point RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of floating-point CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DCT4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Nby2</parametername>
</parameternamelist>
<parameterdescription>
<para>half of the length of the DCT4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>normalizing factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>N</computeroutput> is not a supported transform length</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Normalizing factor</title><para>The normalizing factor is <computeroutput>sqrt(2/N)</computeroutput>, which depends on the size of transform <computeroutput>N</computeroutput>. Floating-point normalizing factors are mentioned in the table below for different DCT sizes:</para></simplesect>
<image type="html" name="dct4NormalizingF32Table.png"></image>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2382" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_dct4_init_f32.c" bodystart="62" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__DCT4__IDCT4_1ga50ce68671108e95984121f7eb9e57c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dct4_f32</definition>
        <argsstring>(const riscv_dct4_instance_f32 *S, float32_t *pState, float32_t *pInlineBuffer)</argsstring>
        <name>riscv_dct4_f32</name>
        <param>
          <type>const <ref refid="structriscv__dct4__instance__f32" kindref="compound">riscv_dct4_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pInlineBuffer</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point DCT4/IDCT4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point DCT4/IDCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pInlineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the in-place input and output buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point DCT4/IDCT4 structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pInlineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the in-place input and output buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2397" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_dct4_f32.c" bodystart="128" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="group__DCT4__IDCT4_1ga5561b5f47987be3c7e4837c4c3292500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_dct4_init_q31</definition>
        <argsstring>(riscv_dct4_instance_q31 *S, riscv_rfft_instance_q31 *S_RFFT, riscv_cfft_radix4_instance_q31 *S_CFFT, uint16_t N, uint16_t Nby2, q31_t normalize)</argsstring>
        <name>riscv_dct4_init_q31</name>
        <param>
          <type><ref refid="structriscv__dct4__instance__q31" kindref="compound">riscv_dct4_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref> *</type>
          <declname>S_RFFT</declname>
        </param>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref> *</type>
          <declname>S_CFFT</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Nby2</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>normalize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 DCT4/IDCT4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q31 DCT4/IDCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_RFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q31 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q31 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Nby2</parametername>
</parameternamelist>
<parameterdescription>
<para>half of the length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>normalizing factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>riscv_status function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_ARGUMENT_ERROR if <computeroutput>N</computeroutput> is not a supported transform length.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q31 DCT4/IDCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_RFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q31 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q31 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Nby2</parametername>
</parameternamelist>
<parameterdescription>
<para>half of the length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>normalizing factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>N</computeroutput> is not a supported transform length</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Normalizing factor:</title><para>The normalizing factor is <computeroutput>sqrt(2/N)</computeroutput>, which depends on the size of transform <computeroutput>N</computeroutput>. Normalizing factors in 1.31 format are mentioned in the table below for different DCT sizes:</para></simplesect>
<image type="html" name="dct4NormalizingQ31Table.png"></image>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2428" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_dct4_init_q31.c" bodystart="62" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__DCT4__IDCT4_1ga7e8a6565ae2b938959d5d844610afe82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dct4_q31</definition>
        <argsstring>(const riscv_dct4_instance_q31 *S, q31_t *pState, q31_t *pInlineBuffer)</argsstring>
        <name>riscv_dct4_q31</name>
        <param>
          <type>const <ref refid="structriscv__dct4__instance__q31" kindref="compound">riscv_dct4_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pInlineBuffer</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 DCT4/IDCT4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 DCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pInlineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the in-place input and output buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 DCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pInlineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the in-place input and output buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Input an output formats</title><para>Input samples need to be downscaled by 1 bit to avoid saturations in the Q31 DCT process, as the conversion from DCT2 to DCT4 involves one subtraction. Internally inputs are downscaled in the RFFT process function to avoid overflows. Number of bits downscaled, depends on the size of the transform. The input and output formats for different DCT sizes and number of bits to upscale are mentioned in the table below:</para></simplesect>
<image type="html" name="dct4FormatsQ31Table.png"></image>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2443" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_dct4_q31.c" bodystart="55" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="group__DCT4__IDCT4_1gadb08ffdc26604e45aca6b713728bf167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_dct4_init_q15</definition>
        <argsstring>(riscv_dct4_instance_q15 *S, riscv_rfft_instance_q15 *S_RFFT, riscv_cfft_radix4_instance_q15 *S_CFFT, uint16_t N, uint16_t Nby2, q15_t normalize)</argsstring>
        <name>riscv_dct4_init_q15</name>
        <param>
          <type><ref refid="structriscv__dct4__instance__q15" kindref="compound">riscv_dct4_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref> *</type>
          <declname>S_RFFT</declname>
        </param>
        <param>
          <type><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref> *</type>
          <declname>S_CFFT</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Nby2</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>normalize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 DCT4/IDCT4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 DCT4/IDCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_RFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 RFFT/RIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 CFFT/CIFFT structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Nby2</parametername>
</parameternamelist>
<parameterdescription>
<para>half of the length of the DCT4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>normalizing factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>riscv_status function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_ARGUMENT_ERROR if <computeroutput>N</computeroutput> is not a supported transform length.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 DCT4/IDCT4 structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_RFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 RFFT/RIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S_CFFT</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of Q15 CFFT/CIFFT structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the DCT4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Nby2</parametername>
</parameternamelist>
<parameterdescription>
<para>half of the length of the DCT4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>normalizing factor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : <computeroutput>N</computeroutput> is not a supported transform length</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Normalizing factor</title><para>The normalizing factor is <computeroutput>sqrt(2/N)</computeroutput>, which depends on the size of transform <computeroutput>N</computeroutput>. Normalizing factors in 1.15 format are mentioned in the table below for different DCT sizes:</para></simplesect>
<image type="html" name="dct4NormalizingQ15Table.png"></image>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2474" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_dct4_init_q15.c" bodystart="61" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__DCT4__IDCT4_1gad26cd42b92834f519f43eca88ed88f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dct4_q15</definition>
        <argsstring>(const riscv_dct4_instance_q15 *S, q15_t *pState, q15_t *pInlineBuffer)</argsstring>
        <name>riscv_dct4_q15</name>
        <param>
          <type>const <ref refid="structriscv__dct4__instance__q15" kindref="compound">riscv_dct4_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pInlineBuffer</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 DCT4/IDCT4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 DCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pInlineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the in-place input and output buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 DCT4 structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pInlineBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the in-place input and output buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Input an output formats</title><para>Internally inputs are downscaled in the RFFT process function to avoid overflows. Number of bits downscaled, depends on the size of the transform. The input and output formats for different DCT sizes and number of bits to upscale are mentioned in the table below:</para></simplesect>
<image type="html" name="dct4FormatsQ15Table.png"></image>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2489" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/TransformFunctions/riscv_dct4_q15.c" bodystart="52" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAdd_1ga11b757065b1c8aa1cef4a59594e4ecf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_add_f32</definition>
        <argsstring>(const float32_t *pSrcA, const float32_t *pSrcB, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_add_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Floating-point vector addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2502" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_add_f32.c" bodystart="62" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAdd_1gad89f108e3eb726cf05ffa61f5aed28c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_add_q7</definition>
        <argsstring>(const q7_t *pSrcA, const q7_t *pSrcB, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_add_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q7 vector addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2516" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_add_q7.c" bodystart="54" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAdd_1gac3bc9d2b997e9b8cd6a0ed84e7bcc530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_add_q15</definition>
        <argsstring>(const q15_t *pSrcA, const q15_t *pSrcB, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_add_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q15 vector addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2530" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_add_q15.c" bodystart="54" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAdd_1ga39ad2da3e6383a752fd1ba8c32f93e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_add_q31</definition>
        <argsstring>(const q31_t *pSrcA, const q31_t *pSrcB, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_add_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q31 vector addition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2544" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_add_q31.c" bodystart="54" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicSub_1ga2e1928fe086fbaea97c86fc3028d6c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_sub_f32</definition>
        <argsstring>(const float32_t *pSrcA, const float32_t *pSrcB, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_sub_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Floating-point vector subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2558" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_sub_f32.c" bodystart="62" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicSub_1ga2bb3ef72bd6eac9d8cc1b3c5d6331272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_sub_q7</definition>
        <argsstring>(const q7_t *pSrcA, const q7_t *pSrcB, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_sub_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q7 vector subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] will be saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2572" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_sub_q7.c" bodystart="54" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicSub_1ga223db4bffe28ecdfbe749b8293081d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_sub_q15</definition>
        <argsstring>(const q15_t *pSrcA, const q15_t *pSrcB, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_sub_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q15 vector subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2586" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_sub_q15.c" bodystart="54" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicSub_1ga30d054121f997f7841f01c03ecb31ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_sub_q31</definition>
        <argsstring>(const q31_t *pSrcA, const q31_t *pSrcB, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_sub_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q31 vector subtraction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2600" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_sub_q31.c" bodystart="54" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicScale_1ga7ca2deeac250c6fb6c6bb2796bc15ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_scale_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t scale, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_scale_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Multiplies a floating-point vector by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scale factor to be applied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scale factor to be applied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2614" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_scale_f32.c" bodystart="77" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicScale_1ga41758c89febae083e09638194f0a9aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_scale_q7</definition>
        <argsstring>(const q7_t *pSrc, q7_t scaleFract, int8_t shift, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_scale_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t</type>
          <declname>scaleFract</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Multiplies a Q7 vector by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The input data <computeroutput>*pSrc</computeroutput> and <computeroutput>scaleFract</computeroutput> are in 1.7 format. These are multiplied to yield a 2.14 intermediate result and this is shifted with saturation to 1.7 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2629" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_scale_q7.c" bodystart="55" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicScale_1gaf690da22beaf9f35c55e057bcbd46ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_scale_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t scaleFract, int8_t shift, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_scale_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>scaleFract</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Multiplies a Q15 vector by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The input data <computeroutput>*pSrc</computeroutput> and <computeroutput>scaleFract</computeroutput> are in 1.15 format. These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2645" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_scale_q15.c" bodystart="55" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicScale_1gae8dab424d4d97e475a3d14336d177a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_scale_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t scaleFract, int8_t shift, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_scale_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>scaleFract</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Multiplies a Q31 vector by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scaleFract</parametername>
</parameternamelist>
<parameterdescription>
<para>fractional portion of the scale value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift the result by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The input data <computeroutput>*pSrc</computeroutput> and <computeroutput>scaleFract</computeroutput> are in 1.31 format. These are multiplied to yield a 2.62 intermediate result and this is shifted with saturation to 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2661" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_scale_q31.c" bodystart="55" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAbs_1ga8abfd42f4e7e10ea466dfdb6d4aa0419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_abs_q7</definition>
        <argsstring>(const q7_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_abs_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q7 vector absolute value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Conditions for optimum performance</title><para>Input and output buffers should be aligned by 32-bit </para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q7 value -1 (0x80) will be saturated to the maximum allowable positive value 0x7F. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2675" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_abs_q7.c" bodystart="55" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAbs_1ga4a0cc36e5ca532df6ec097699347769d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_abs_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_abs_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Floating-point vector absolute value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2687" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_abs_f32.c" bodystart="64" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAbs_1ga5a71332eb36df3411daf671a72cf8da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_abs_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_abs_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q15 vector absolute value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q15 value -1 (0x8000) will be saturated to the maximum allowable positive value 0x7FFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2699" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_abs_q15.c" bodystart="53" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicAbs_1ga372637ba716226615548fb05943f6f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_abs_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_abs_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q31 vector absolute value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q31 value -1 (0x80000000) will be saturated to the maximum allowable positive value 0x7FFFFFFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2711" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_abs_q31.c" bodystart="53" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProd_1gade83dc52739721f1b3b28f1485a1d73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dot_prod_f32</definition>
        <argsstring>(const float32_t *pSrcA, const float32_t *pSrcB, uint32_t blockSize, float32_t *result)</argsstring>
        <name>riscv_dot_prod_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Dot product of floating-point vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2724" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_dot_prod_f32.c" bodystart="63" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProd_1ga94b781f333bbccd4c5901da6fefb6458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dot_prod_q7</definition>
        <argsstring>(const q7_t *pSrcA, const q7_t *pSrcB, uint32_t blockSize, q31_t *result)</argsstring>
        <name>riscv_dot_prod_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Dot product of Q7 vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The intermediate multiplications are in 1.7 x 1.7 = 2.14 format and these results are added to an accumulator in 18.14 format. Nonsaturating additions are used and there is no danger of wrap around as long as the vectors are less than 2^18 elements long. The return result is in 18.14 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2738" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_dot_prod_q7.c" bodystart="57" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProd_1ga96cb833c8f4589f8f2dd04319c7fc176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dot_prod_q15</definition>
        <argsstring>(const q15_t *pSrcA, const q15_t *pSrcB, uint32_t blockSize, q63_t *result)</argsstring>
        <name>riscv_dot_prod_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Dot product of Q15 vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The intermediate multiplications are in 1.15 x 1.15 = 2.30 format and these results are added to a 64-bit accumulator in 34.30 format. Nonsaturating additions are used and given that there are 33 guard bits in the accumulator there is no risk of overflow. The return result is in 34.30 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2752" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_dot_prod_q15.c" bodystart="57" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicDotProd_1ga9684c131effb1a08bc4e562ec3439513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_dot_prod_q31</definition>
        <argsstring>(const q31_t *pSrcA, const q31_t *pSrcB, uint32_t blockSize, q63_t *result)</argsstring>
        <name>riscv_dot_prod_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Dot product of Q31 vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>output result returned here. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The intermediate multiplications are in 1.31 x 1.31 = 2.62 format and these are truncated to 2.48 format by discarding the lower 14 bits. The 2.48 result is then added without saturation to a 64-bit accumulator in 16.48 format. There are 15 guard bits in the accumulator and there is no risk of overflow as long as the length of the vectors is less than 2^16 elements. The return result is in 16.48 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2766" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_dot_prod_q31.c" bodystart="58" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicShift_1gacb31cecc3cb6800f583a03898ad4f9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_shift_q7</definition>
        <argsstring>(const q7_t *pSrc, int8_t shiftBits, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_shift_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>shiftBits</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Shifts the elements of a Q7 vector a specified number of bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shiftBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift. A positive value shifts left; a negative value shifts right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shiftBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift. A positive value shifts left; a negative value shifts right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>onditions for optimum performance</title><para>Input and output buffers should be aligned by 32-bit </para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2780" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_shift_q7.c" bodystart="56" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicShift_1ga56c338a145652565944ab76e56f12355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_shift_q15</definition>
        <argsstring>(const q15_t *pSrc, int8_t shiftBits, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_shift_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>shiftBits</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Shifts the elements of a Q15 vector a specified number of bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shiftBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift. A positive value shifts left; a negative value shifts right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shiftBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift. A positive value shifts left; a negative value shifts right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2794" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_shift_q15.c" bodystart="54" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicShift_1ga685be7695f2fef9bca1fec96f3ca8c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_shift_q31</definition>
        <argsstring>(const q31_t *pSrc, int8_t shiftBits, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_shift_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>shiftBits</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Shifts the elements of a Q31 vector a specified number of bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shiftBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift. A positive value shifts left; a negative value shifts right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shiftBits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits to shift. A positive value shifts left; a negative value shifts right. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2808" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_shift_q31.c" bodystart="71" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicOffset_1gad72716bfc95d745db84d40b018dc4121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_offset_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t offset, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_offset_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Adds a constant offset to a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2822" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_offset_f32.c" bodystart="64" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicOffset_1ga8a98347d15b44943a193e69fe629ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_offset_q7</definition>
        <argsstring>(const q7_t *pSrc, q7_t offset, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_offset_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Adds a constant offset to a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2836" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_offset_q7.c" bodystart="54" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicOffset_1gac5b374a633b8aa139db81238318a6a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_offset_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t offset, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_offset_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Adds a constant offset to a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2850" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_offset_q15.c" bodystart="54" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicOffset_1gaaeb86298dd16090e6e883377c36547a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_offset_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t offset, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_offset_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Adds a constant offset to a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>is the offset to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2864" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_offset_q31.c" bodystart="54" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicNegate_1ga974fe2ecaa88bb5a48fca3060dc9f8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_negate_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_negate_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Negates the elements of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2877" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_negate_f32.c" bodystart="63" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicNegate_1gaca44221f6e59394b7142348be1638074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_negate_q7</definition>
        <argsstring>(const q7_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_negate_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Negates the elements of a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q7 value -1 (0x80) is saturated to the maximum allowable positive value 0x7F. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2889" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_negate_q7.c" bodystart="53" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicNegate_1ga878b418d434279b597e3866c74287793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_negate_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_negate_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Negates the elements of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Conditions for optimum performance</title><para>Input and output buffers should be aligned by 32-bit </para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q15 value -1 (0x8000) is saturated to the maximum allowable positive value 0x7FFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2901" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_negate_q15.c" bodystart="55" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__BasicNegate_1gaa689f3dc9d8c9124ef6aa91c35fa29c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_negate_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_negate_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Negates the elements of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in the vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q31 value -1 (0x80000000) is saturated to the maximum allowable positive value 0x7FFFFFFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2913" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/BasicMathFunctions/riscv_negate_q31.c" bodystart="53" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__copy_1ga2f4fb0541b4d514df044e543c6abfeb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_copy_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_copy_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Copies the elements of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2925" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_copy_f32.c" bodystart="103" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__copy_1ga509f59f22d81b17cbb11be2d6063d41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_copy_q7</definition>
        <argsstring>(const q7_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_copy_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Copies the elements of a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2937" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_copy_q7.c" bodystart="49" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__copy_1ga93d1502bf667beae19ce3e43004dbbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_copy_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_copy_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Copies the elements of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2949" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_copy_q15.c" bodystart="49" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__copy_1ga1bce540573749f4f157f994750f4b7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_copy_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_copy_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Copies the elements of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2961" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_copy_q31.c" bodystart="49" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__Fill_1ga30d123e67c9f6d27f74dae20a4630241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fill_f32</definition>
        <argsstring>(float32_t value, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fill_f32</name>
        <param>
          <type>float32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Fills a constant value into a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2973" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_fill_f32.c" bodystart="102" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__Fill_1gac6158a496abf28d50978c2f6e8121e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fill_q7</definition>
        <argsstring>(q7_t value, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fill_q7</name>
        <param>
          <type>q7_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Fills a constant value into a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2985" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_fill_q7.c" bodystart="49" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__Fill_1gad52d58e9ceff23247782b07e03bee9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fill_q15</definition>
        <argsstring>(q15_t value, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fill_q15</name>
        <param>
          <type>q15_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Fills a constant value into a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="2997" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_fill_q15.c" bodystart="49" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__Fill_1gaae3243b4d552b032970c72360df35eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fill_q31</definition>
        <argsstring>(q31_t value, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fill_q31</name>
        <param>
          <type>q31_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Fills a constant value into a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>input value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3009" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_fill_q31.c" bodystart="49" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga255e63f21abd45fd7c662ddf3b88749d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_f32</definition>
        <argsstring>(const float32_t *pSrcA, uint32_t srcALen, const float32_t *pSrcB, uint32_t srcBLen, float32_t *pDst)</argsstring>
        <name>riscv_conv_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Convolution of floating-point sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3023" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_f32.c" bodystart="99" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga01914598d6bd01a7861ce6dade56f4f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_opt_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_conv_opt_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Convolution of Q15 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both inputs are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1ga13e44a44eeaffe2ad3b87e8553b3cf40" kindref="member">riscv_conv_fast_q15()</ref> for a faster but less precise version of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3041" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_opt_q15.c" bodystart="62" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1gaf2a77c8c94352f24489f454742be5a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst)</argsstring>
        <name>riscv_conv_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Convolution of Q15 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both inputs are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1ga13e44a44eeaffe2ad3b87e8553b3cf40" kindref="member">riscv_conv_fast_q15()</ref> for a faster but less precise version of this function. </para><simplesectsep/><para>Refer to <ref refid="group__Conv_1ga01914598d6bd01a7861ce6dade56f4f0" kindref="member">riscv_conv_opt_q15()</ref> for a faster implementation of this function using scratch buffers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3059" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_q15.c" bodystart="63" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga13e44a44eeaffe2ad3b87e8553b3cf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_fast_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst)</argsstring>
        <name>riscv_conv_fast_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1.</para></parameterdescription>
</parameteritem>
</parameterlist>
Convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. Scale down the inputs by log2(min(srcALen, srcBLen)) (log2 is read as log to the base 2) times to avoid overflows, as maximum of min(srcALen, srcBLen) number of additions are carried internally. The 2.30 accumulator is right shifted by 15 bits and then saturated to 1.15 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1gaf2a77c8c94352f24489f454742be5a76" kindref="member">riscv_conv_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to avoid wrap around distortion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3075" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_fast_q15.c" bodystart="64" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga0f3521c46571eed092375bbd6a2d4a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_fast_opt_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_conv_fast_opt_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen).</para></parameterdescription>
</parameteritem>
</parameterlist>
Convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. Scale down the inputs by log2(min(srcALen, srcBLen)) (log2 is read as log to the base 2) times to avoid overflows, as maximum of min(srcALen, srcBLen) number of additions are carried internally. The 2.30 accumulator is right shifted by 15 bits and then saturated to 1.15 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1gaf2a77c8c94352f24489f454742be5a76" kindref="member">riscv_conv_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to avoid wrap around distortion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3093" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_fast_opt_q15.c" bodystart="66" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga296cde9c216b5a64dab8158540efc8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_q31</definition>
        <argsstring>(const q31_t *pSrcA, uint32_t srcALen, const q31_t *pSrcB, uint32_t srcBLen, q31_t *pDst)</argsstring>
        <name>riscv_conv_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Convolution of Q31 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. Scale down the inputs by log2(min(srcALen, srcBLen)) (log2 is read as log to the base 2) times to avoid overflows, as maximum of min(srcALen, srcBLen) number of additions are carried internally. The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1gaa7de045f7b07e33ce0b5d9dc00371644" kindref="member">riscv_conv_fast_q31()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3111" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_q31.c" bodystart="64" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1gaa7de045f7b07e33ce0b5d9dc00371644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_fast_q31</definition>
        <argsstring>(const q31_t *pSrcA, uint32_t srcALen, const q31_t *pSrcB, uint32_t srcBLen, q31_t *pDst)</argsstring>
        <name>riscv_conv_fast_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Convolution of Q31 sequences (fast version) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1.</para></parameterdescription>
</parameteritem>
</parameterlist>
Convolution of Q31 sequences (fast version) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This function is optimized for speed at the expense of fixed-point precision and overflow protection. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are accumulated in a 32-bit register in 2.30 format. Finally, the accumulator is saturated and converted to a 1.31 result. </para></simplesect>
<simplesect kind="par"><title></title><para>The fast version has the same overflow behavior as the standard version but provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signals must be scaled down. Scale down the inputs by log2(min(srcALen, srcBLen)) (log2 is read as log to the base 2) times to avoid overflows, as maximum of min(srcALen, srcBLen) number of additions are carried internally. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1ga296cde9c216b5a64dab8158540efc8fb" kindref="member">riscv_conv_q31()</ref> for a slower implementation of this function which uses 64-bit accumulation to provide higher precision. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3127" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_fast_q31.c" bodystart="64" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga1c5777851e3f6ea412fc04487548265e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_opt_q7</definition>
        <argsstring>(const q7_t *pSrcA, uint32_t srcALen, const q7_t *pSrcB, uint32_t srcBLen, q7_t *pDst, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_conv_opt_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Convolution of Q7 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. Both the inputs are represented in 1.7 format and multiplications yield a 2.14 result. The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format. This approach provides 17 guard bits and there is no risk of overflow as long as <computeroutput>max(srcALen, srcBLen)&lt;131072</computeroutput>. The 18.14 result is then truncated to 18.7 format by discarding the low 7 bits and then saturated to 1.7 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3145" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_opt_q7.c" bodystart="60" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="group__Conv_1ga9eee8380e22313ef53f54ca713bee4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_conv_q7</definition>
        <argsstring>(const q7_t *pSrcA, uint32_t srcALen, const q7_t *pSrcB, uint32_t srcBLen, q7_t *pDst)</argsstring>
        <name>riscv_conv_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Convolution of Q7 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length srcALen+srcBLen-1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length srcALen+srcBLen-1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. Both the inputs are represented in 1.7 format and multiplications yield a 2.14 result. The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format. This approach provides 17 guard bits and there is no risk of overflow as long as <computeroutput>max(srcALen, srcBLen)&lt;131072</computeroutput>. The 18.14 result is then truncated to 18.7 format by discarding the low 7 bits and then saturated to 1.7 format. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Conv_1ga1c5777851e3f6ea412fc04487548265e" kindref="member">riscv_conv_opt_q7()</ref> for a faster implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3163" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_q7.c" bodystart="60" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga15780978d840ca15ee86a2a67dcc27cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_f32</definition>
        <argsstring>(const float32_t *pSrcA, uint32_t srcALen, const float32_t *pSrcB, uint32_t srcBLen, float32_t *pDst, uint32_t firstIndex, uint32_t numPoints)</argsstring>
        <name>riscv_conv_partial_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
<para>Partial convolution of floating-point sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2] </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3182" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_f32.c" bodystart="81" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga8a2f1aadcf0c8cee85d1fd964918e4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_opt_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, uint32_t firstIndex, uint32_t numPoints, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_conv_partial_opt_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q15 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2]</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1ga623de40ec37e2c48bca3ff688974fc4d" kindref="member">riscv_conv_partial_fast_q15()</ref> for a faster but less precise version of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3205" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_opt_q15.c" bodystart="60" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga12699a743519d30a39af236c42d680af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, uint32_t firstIndex, uint32_t numPoints)</argsstring>
        <name>riscv_conv_partial_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q15 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2]</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1ga623de40ec37e2c48bca3ff688974fc4d" kindref="member">riscv_conv_partial_fast_q15()</ref> for a faster but less precise version of this function. </para><simplesectsep/><para>Refer to <ref refid="group__PartialConv_1ga8a2f1aadcf0c8cee85d1fd964918e4d0" kindref="member">riscv_conv_partial_opt_q15()</ref> for a faster implementation of this function using scratch buffers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3228" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_q15.c" bodystart="60" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga623de40ec37e2c48bca3ff688974fc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_fast_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, uint32_t firstIndex, uint32_t numPoints)</argsstring>
        <name>riscv_conv_partial_fast_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
Partial convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2] </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1ga12699a743519d30a39af236c42d680af" kindref="member">riscv_conv_partial_q15()</ref> for a slower implementation of this function which uses a 64-bit accumulator to avoid wrap around distortion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3249" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_fast_q15.c" bodystart="57" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga01d75df81efc8a667cafa9e95c1275ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_fast_opt_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, uint32_t firstIndex, uint32_t numPoints, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_conv_partial_fast_opt_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
Partial convolution of Q15 sequences (fast version) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size min(srcALen, srcBLen) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2]</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1ga12699a743519d30a39af236c42d680af" kindref="member">riscv_conv_partial_q15()</ref> for a slower implementation of this function which uses a 64-bit accumulator to avoid wrap around distortion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3272" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_fast_opt_q15.c" bodystart="60" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga6ab09c40110ed2bdb8c9fdcc03c2fe85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_q31</definition>
        <argsstring>(const q31_t *pSrcA, uint32_t srcALen, const q31_t *pSrcB, uint32_t srcBLen, q31_t *pDst, uint32_t firstIndex, uint32_t numPoints)</argsstring>
        <name>riscv_conv_partial_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q31 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2]</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1ga9f7b60498fa6b81cd8ac3db5b9cb527a" kindref="member">riscv_conv_partial_fast_q31()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3295" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_q31.c" bodystart="58" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1ga9f7b60498fa6b81cd8ac3db5b9cb527a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_fast_q31</definition>
        <argsstring>(const q31_t *pSrcA, uint32_t srcALen, const q31_t *pSrcB, uint32_t srcBLen, q31_t *pDst, uint32_t firstIndex, uint32_t numPoints)</argsstring>
        <name>riscv_conv_partial_fast_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q31 sequences (fast version) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
Partial convolution of Q31 sequences (fast version) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2]</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1ga6ab09c40110ed2bdb8c9fdcc03c2fe85" kindref="member">riscv_conv_partial_q31()</ref> for a slower implementation of this function which uses a 64-bit accumulator to provide higher precision. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3316" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_fast_q31.c" bodystart="58" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1gad5a1ab976466bca8e44b627770b5c888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_opt_q7</definition>
        <argsstring>(const q7_t *pSrcA, uint32_t srcALen, const q7_t *pSrcB, uint32_t srcBLen, q7_t *pDst, uint32_t firstIndex, uint32_t numPoints, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_conv_partial_opt_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q7 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2] </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3339" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_opt_q7.c" bodystart="57" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__PartialConv_1gaba5b790326c5f36f9c3d9b3a8f8ce178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_conv_partial_q7</definition>
        <argsstring>(const q7_t *pSrcA, uint32_t srcALen, const q7_t *pSrcB, uint32_t srcBLen, q7_t *pDst, uint32_t firstIndex, uint32_t numPoints)</argsstring>
        <name>riscv_conv_partial_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>firstIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numPoints</declname>
        </param>
        <briefdescription>
<para>Partial convolution of Q7 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns either RISCV_MATH_SUCCESS if the function completed correctly or RISCV_MATH_ARGUMENT_ERROR if the requested subset is not in the range [0 srcALen+srcBLen-2].</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">firstIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first output sample to start with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of output points to be computed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : requested subset is not in the range [0 srcALen+srcBLen-2]</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__PartialConv_1gad5a1ab976466bca8e44b627770b5c888" kindref="member">riscv_conv_partial_opt_q7()</ref> for a faster implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3362" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_conv_partial_q7.c" bodystart="58" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1gaac61160b5f8e8f0073baea776b6b5bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_decimate_f32</definition>
        <argsstring>(const riscv_fir_decimate_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_f32</name>
        <param>
          <type>const <ref refid="structriscv__fir__decimate__instance__f32" kindref="compound">riscv_fir_decimate_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for floating-point FIR decimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3413" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_f32.c" bodystart="375" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1ga387bc4decac5cee2ba073d1ec98d0a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_decimate_init_f32</definition>
        <argsstring>(riscv_fir_decimate_instance_f32 *S, uint16_t numTaps, uint8_t M, const float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_init_f32</name>
        <param>
          <type><ref refid="structriscv__fir__decimate__instance__f32" kindref="compound">riscv_fir_decimate_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point FIR decimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_LENGTH_ERROR : <computeroutput>blockSize</computeroutput> is not a multiple of <computeroutput>M</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_LENGTH_ERROR : <computeroutput>blockSize</computeroutput> is not a multiple of <computeroutput>M</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize-1</computeroutput> words where <computeroutput>blockSize</computeroutput> is the number of input samples passed to <computeroutput><ref refid="group__FIR__decimate_1gaac61160b5f8e8f0073baea776b6b5bcc" kindref="member">riscv_fir_decimate_f32()</ref></computeroutput>. <computeroutput>M</computeroutput> is the decimation factor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3432" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_init_f32.c" bodystart="64" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1ga3709b4b84a0ff9ab322c5a57a854fd43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_decimate_q15</definition>
        <argsstring>(const riscv_fir_decimate_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_q15</name>
        <param>
          <type>const <ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 FIR decimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR decimator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR__decimate_1gad331172604a59db5d2039f5af4bbb04f" kindref="member">riscv_fir_decimate_fast_q15()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3448" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_q15.c" bodystart="309" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1gad331172604a59db5d2039f5af4bbb04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_decimate_fast_q15</definition>
        <argsstring>(const riscv_fir_decimate_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_fast_q15</name>
        <param>
          <type>const <ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 FIR decimator (fast variant) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR decimator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the Q15 FIR decimator (fast variant) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around and distorts the result. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits (log2 is read as log to the base 2). The 2.30 accumulator is then truncated to 2.15 format and saturated to yield the 1.15 result. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR__decimate_1ga3709b4b84a0ff9ab322c5a57a854fd43" kindref="member">riscv_fir_decimate_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to avoid wrap around distortion. Both the slow and the fast versions use the same instance structure. Use function <ref refid="group__FIR__decimate_1ga5b5acaad9aa70b15151ab009065702e8" kindref="member">riscv_fir_decimate_init_q15()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3462" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_fast_q15.c" bodystart="309" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1ga5b5acaad9aa70b15151ab009065702e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_decimate_init_q15</definition>
        <argsstring>(riscv_fir_decimate_instance_q15 *S, uint16_t numTaps, uint8_t M, const q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_init_q15</name>
        <param>
          <type><ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 FIR decimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR decimator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_LENGTH_ERROR if <computeroutput>blockSize</computeroutput> is not a multiple of <computeroutput>M</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_LENGTH_ERROR : <computeroutput>blockSize</computeroutput> is not a multiple of <computeroutput>M</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize-1</computeroutput> words where <computeroutput>blockSize</computeroutput> is the number of input samples to the call <computeroutput><ref refid="group__FIR__decimate_1ga3709b4b84a0ff9ab322c5a57a854fd43" kindref="member">riscv_fir_decimate_q15()</ref></computeroutput>. <computeroutput>M</computeroutput> is the decimation factor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3480" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_init_q15.c" bodystart="65" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1ga6ab85c0ce039addff95d8b8e5634740b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_decimate_q31</definition>
        <argsstring>(const riscv_fir_decimate_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_q31</name>
        <param>
          <type>const <ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 FIR decimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR decimator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits (where log2 is read as log to the base 2). After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format and then saturated to 1.31 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR__decimate_1ga0730ba173fa51e549f090f41a195ddbb" kindref="member">riscv_fir_decimate_fast_q31()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3496" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_q31.c" bodystart="60" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1ga0730ba173fa51e549f090f41a195ddbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_decimate_fast_q31</definition>
        <argsstring>(const riscv_fir_decimate_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_fast_q31</name>
        <param>
          <type>const <ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 FIR decimator (fast variant) for RISC-V3 and RISC-V4. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR decimator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the Q31 FIR decimator (fast variant) for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This function is optimized for speed at the expense of fixed-point precision and overflow protection. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are added to a 2.30 accumulator. Finally, the accumulator is saturated and converted to a 1.31 result. The fast version has the same overflow behavior as the standard version and provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits (where log2 is read as log to the base 2).</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__FIR__decimate_1ga6ab85c0ce039addff95d8b8e5634740b" kindref="member">riscv_fir_decimate_q31()</ref> for a slower implementation of this function which uses a 64-bit accumulator to provide higher precision. Both the slow and the fast versions use the same instance structure. Use function <ref refid="group__FIR__decimate_1ga2774269fef95061532bd039708a5bae6" kindref="member">riscv_fir_decimate_init_q31()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3509" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_fast_q31.c" bodystart="63" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__decimate_1ga2774269fef95061532bd039708a5bae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_decimate_init_q31</definition>
        <argsstring>(riscv_fir_decimate_instance_q31 *S, uint16_t numTaps, uint8_t M, const q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_decimate_init_q31</name>
        <param>
          <type><ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 FIR decimator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR decimator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_LENGTH_ERROR if <computeroutput>blockSize</computeroutput> is not a multiple of <computeroutput>M</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR decimator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>decimation factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_LENGTH_ERROR : <computeroutput>blockSize</computeroutput> is not a multiple of <computeroutput>M</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>numTaps+blockSize-1</computeroutput> words where <computeroutput>blockSize</computeroutput> is the number of input samples passed to <computeroutput><ref refid="group__FIR__decimate_1ga6ab85c0ce039addff95d8b8e5634740b" kindref="member">riscv_fir_decimate_q31()</ref></computeroutput>. <computeroutput>M</computeroutput> is the decimation factor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3527" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_decimate_init_q31.c" bodystart="64" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Interpolate_1ga8fff424b316684f02ac5aae58b1f315b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_interpolate_q15</definition>
        <argsstring>(const riscv_fir_interpolate_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_interpolate_q15</name>
        <param>
          <type>const <ref refid="structriscv__fir__interpolate__instance__q15" kindref="compound">riscv_fir_interpolate_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 FIR interpolator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR interpolator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR interpolator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3577" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_interpolate_q15.c" bodystart="58" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Interpolate_1ga139d8f20abd891307d7612c4a644ba5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_interpolate_init_q15</definition>
        <argsstring>(riscv_fir_interpolate_instance_q15 *S, uint8_t L, uint16_t numTaps, const q15_t *pCoeffs, q15_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_interpolate_init_q15</name>
        <param>
          <type><ref refid="structriscv__fir__interpolate__instance__q15" kindref="compound">riscv_fir_interpolate_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 FIR interpolator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR interpolator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">L</parametername>
</parameternamelist>
<parameterdescription>
<para>upsample factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_LENGTH_ERROR if the filter length <computeroutput>numTaps</computeroutput> is not a multiple of the interpolation factor <computeroutput>L</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR interpolator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">L</parametername>
</parameternamelist>
<parameterdescription>
<para>upsample factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : filter length <computeroutput>numTaps</computeroutput> is not a multiple of the interpolation factor <computeroutput>L</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[numTaps-2], ..., b[1], b[0]}
</preformatted> The length of the filter <computeroutput>numTaps</computeroutput> must be a multiple of the interpolation factor <computeroutput>L</computeroutput>. </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>(numTaps/L)+blockSize-1</computeroutput> words where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR__Interpolate_1ga8fff424b316684f02ac5aae58b1f315b" kindref="member">riscv_fir_interpolate_q15()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3595" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_interpolate_init_q15.c" bodystart="66" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Interpolate_1gab38e9dfb79024f09e685bb63f422014b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_interpolate_q31</definition>
        <argsstring>(const riscv_fir_interpolate_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_interpolate_q31</name>
        <param>
          <type>const <ref refid="structriscv__fir__interpolate__instance__q31" kindref="compound">riscv_fir_interpolate_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 FIR interpolator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR interpolator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR interpolator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by <computeroutput>1/(numTaps/L)</computeroutput>. since <computeroutput>numTaps/L</computeroutput> additions occur per output sample. After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format and then saturated to 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3611" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_interpolate_q31.c" bodystart="58" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Interpolate_1gaa0eab8390463d568ab715ad7bd2c2b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_interpolate_init_q31</definition>
        <argsstring>(riscv_fir_interpolate_instance_q31 *S, uint8_t L, uint16_t numTaps, const q31_t *pCoeffs, q31_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_interpolate_init_q31</name>
        <param>
          <type><ref refid="structriscv__fir__interpolate__instance__q31" kindref="compound">riscv_fir_interpolate_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 FIR interpolator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR interpolator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">L</parametername>
</parameternamelist>
<parameterdescription>
<para>upsample factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_LENGTH_ERROR if the filter length <computeroutput>numTaps</computeroutput> is not a multiple of the interpolation factor <computeroutput>L</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR interpolator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">L</parametername>
</parameternamelist>
<parameterdescription>
<para>upsample factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : filter length <computeroutput>numTaps</computeroutput> is not a multiple of the interpolation factor <computeroutput>L</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[numTaps-2], ..., b[1], b[0]}
</preformatted> The length of the filter <computeroutput>numTaps</computeroutput> must be a multiple of the interpolation factor <computeroutput>L</computeroutput>. </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>(numTaps/L)+blockSize-1</computeroutput> words where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR__Interpolate_1gab38e9dfb79024f09e685bb63f422014b" kindref="member">riscv_fir_interpolate_q31()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3629" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_interpolate_init_q31.c" bodystart="65" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Interpolate_1ga069caef71ac2cb05f23b2e80b6ad905f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_interpolate_f32</definition>
        <argsstring>(const riscv_fir_interpolate_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_interpolate_f32</name>
        <param>
          <type>const <ref refid="structriscv__fir__interpolate__instance__f32" kindref="compound">riscv_fir_interpolate_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point FIR interpolator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR interpolator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the floating-point FIR interpolator.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR interpolator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3645" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_interpolate_f32.c" bodystart="488" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Interpolate_1ga14893a7638b8a8f6383bf5a589ba6d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_fir_interpolate_init_f32</definition>
        <argsstring>(riscv_fir_interpolate_instance_f32 *S, uint8_t L, uint16_t numTaps, const float32_t *pCoeffs, float32_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_fir_interpolate_init_f32</name>
        <param>
          <type><ref refid="structriscv__fir__interpolate__instance__f32" kindref="compound">riscv_fir_interpolate_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point FIR interpolator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR interpolator structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">L</parametername>
</parameternamelist>
<parameterdescription>
<para>upsample factor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SUCCESS if initialization is successful or RISCV_MATH_LENGTH_ERROR if the filter length <computeroutput>numTaps</computeroutput> is not a multiple of the interpolation factor <computeroutput>L</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR interpolator structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">L</parametername>
</parameternamelist>
<parameterdescription>
<para>upsample factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : filter length <computeroutput>numTaps</computeroutput> is not a multiple of the interpolation factor <computeroutput>L</computeroutput></para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
    {b[numTaps-1], b[numTaps-2], b[numTaps-2], ..., b[1], b[0]}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>The length of the filter <computeroutput>numTaps</computeroutput> must be a multiple of the interpolation factor <computeroutput>L</computeroutput>. </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to the array of state variables. <computeroutput>pState</computeroutput> is of length <computeroutput>(numTaps/L)+blockSize-1</computeroutput> words where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__FIR__Interpolate_1ga069caef71ac2cb05f23b2e80b6ad905f" kindref="member">riscv_fir_interpolate_f32()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3663" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_interpolate_init_f32.c" bodystart="66" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1__32x64_1gacdf7b9d2877e249a4bc4bf40a7dc0b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cas_df1_32x64_q31</definition>
        <argsstring>(const riscv_biquad_cas_df1_32x64_ins_q31 *S, q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cas_df1_32x64_q31</name>
        <param>
          <type>const <ref refid="structriscv__biquad__cas__df1__32x64__ins__q31" kindref="compound">riscv_biquad_cas_df1_32x64_ins_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 Biquad cascade 32x64 filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the high precision Q31 Biquad cascade filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the high precision Q31 Biquad cascade filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by 2 bits and lie in the range [-0.25 +0.25). After all 5 multiply-accumulates are performed, the 2.62 accumulator is shifted by <computeroutput>postShift</computeroutput> bits and the result truncated to 1.31 format by discarding the low 32 bits. </para></simplesect>
<simplesect kind="par"><title></title><para>Two related functions are provided in the NMSIS DSP library.<itemizedlist>
<listitem><para><ref refid="group__BiquadCascadeDF1_1ga9db8b6490e760bcbb86366385ffd7a5b" kindref="member">riscv_biquad_cascade_df1_q31()</ref> implements a Biquad cascade with 32-bit coefficients and state variables with a Q63 accumulator.</para></listitem><listitem><para><ref refid="group__BiquadCascadeDF1_1gaed838e1892c406620fbb0e131e273d8d" kindref="member">riscv_biquad_cascade_df1_fast_q31()</ref> implements a Biquad cascade with 32-bit coefficients and state variables with a Q31 accumulator. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3690" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_32x64_q31.c" bodystart="176" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1__32x64_1ga072fc75723bc392c567554410e99bdb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cas_df1_32x64_init_q31</definition>
        <argsstring>(riscv_biquad_cas_df1_32x64_ins_q31 *S, uint8_t numStages, const q31_t *pCoeffs, q63_t *pState, uint8_t postShift)</argsstring>
        <name>riscv_biquad_cas_df1_32x64_init_q31</name>
        <param>
          <type><ref refid="structriscv__biquad__cas__df1__32x64__ins__q31" kindref="compound">riscv_biquad_cas_df1_32x64_ins_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 Biquad cascade 32x64 filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the high precision Q31 Biquad cascade filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift to be applied to the output. Varies according to the coefficients format</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the high precision Q31 Biquad cascade filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied after the accumulator. Varies according to the coefficients format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted> where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> points to state variables array and size of each state variable is 1.63 format. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the state array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3704" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_32x64_init_q31.c" bodystart="70" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF2T_1ga6d3b20d95a90c0356db77883cbf50748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df2T_f32</definition>
        <argsstring>(const riscv_biquad_cascade_df2T_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df2T_f32</name>
        <param>
          <type>const <ref refid="structriscv__biquad__cascade__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_df2T_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point transposed direct form II Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3750" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df2T_f32.c" bodystart="220" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF2T_1ga675ebfa94a2e109efb85ee35f37e88b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_stereo_df2T_f32</definition>
        <argsstring>(const riscv_biquad_cascade_stereo_df2T_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_stereo_df2T_f32</name>
        <param>
          <type>const <ref refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_stereo_df2T_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point transposed direct form II Biquad cascade filter. 2 channels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the floating-point transposed direct form II Biquad cascade filter. 2 channels.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3764" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_stereo_df2T_f32.c" bodystart="51" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF2T_1ga921f6e70d38c613025d187ec1419138c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df2T_f64</definition>
        <argsstring>(const riscv_biquad_cascade_df2T_instance_f64 *S, float64_t *pSrc, float64_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df2T_f64</name>
        <param>
          <type>const <ref refid="structriscv__biquad__cascade__df2T__instance__f64" kindref="compound">riscv_biquad_cascade_df2T_instance_f64</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point transposed direct form II Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3778" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df2T_f64.c" bodystart="138" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF2T_1ga64bded2f72748bde1621e6b27739cfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df2T_init_f32</definition>
        <argsstring>(riscv_biquad_cascade_df2T_instance_f32 *S, uint8_t numStages, const float32_t *pCoeffs, float32_t *pState)</argsstring>
        <name>riscv_biquad_cascade_df2T_init_f32</name>
        <param>
          <type><ref refid="structriscv__biquad__cascade__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_df2T_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point transposed direct form II Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order in the not Neon version. <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted></para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values.</para></simplesect>
For Neon version, this array is bigger. If numstages = 4x + y, then the array has size: 32*x + 5*y and it must be initialized using the function riscv_biquad_cascade_df2T_compute_coefs_f32 which is taking the standard array coefficient as parameters.</para><para>But, an array of 8*numstages is a good approximation.</para><para>Then, the initialization can be done with: <preformatted>
                 riscv_biquad_cascade_df2T_init_f32(&amp;SNeon, nbCascade, neonCoefs, stateNeon);
                 riscv_biquad_cascade_df2T_compute_coefs_f32(&amp;SNeon,nbCascade,coefs);
</preformatted></para><para><simplesect kind="par"><title>In this example, neonCoefs is a bigger array of size 8 * numStages.</title><para>coefs is the standard array:</para></simplesect>
<preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted></para><para><simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> is a pointer to state array. Each Biquad stage has 2 state variables <computeroutput>d1,</computeroutput> and <computeroutput>d2</computeroutput>. The 2 state variables for stage 1 are first, then the 2 state variables for stage 2, and so on. The state array has a total length of <computeroutput>2*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3798" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df2T_init_f32.c" bodystart="191" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF2T_1ga6cf2c21b7a0772f81ecaa9f91a99f59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_stereo_df2T_init_f32</definition>
        <argsstring>(riscv_biquad_cascade_stereo_df2T_instance_f32 *S, uint8_t numStages, const float32_t *pCoeffs, float32_t *pState)</argsstring>
        <name>riscv_biquad_cascade_stereo_df2T_init_f32</name>
        <param>
          <type><ref refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_stereo_df2T_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point transposed direct form II Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> is a pointer to state array. Each Biquad stage has 2 state variables <computeroutput>d1,</computeroutput> and <computeroutput>d2</computeroutput> for each channel. The 2 state variables for stage 1 are first, then the 2 state variables for stage 2, and so on. The state array has a total length of <computeroutput>2*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3812" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_stereo_df2T_init_f32.c" bodystart="66" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF2T_1gabe93776356e0ca410f09b3da01e96566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df2T_init_f64</definition>
        <argsstring>(riscv_biquad_cascade_df2T_instance_f64 *S, uint8_t numStages, float64_t *pCoeffs, float64_t *pState)</argsstring>
        <name>riscv_biquad_cascade_df2T_init_f64</name>
        <param>
          <type><ref refid="structriscv__biquad__cascade__df2T__instance__f64" kindref="compound">riscv_biquad_cascade_df2T_instance_f64</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float64_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point transposed direct form II Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the filter data structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> is a pointer to state array. Each Biquad stage has 2 state variables <computeroutput>d1,</computeroutput> and <computeroutput>d2</computeroutput>. The 2 state variables for stage 1 are first, then the 2 state variables for stage 2, and so on. The state array has a total length of <computeroutput>2*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3826" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df2T_init_f64.c" bodystart="66" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Lattice_1ga0aa9f96904832a16f496f42fe87a054a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_lattice_init_q15</definition>
        <argsstring>(riscv_fir_lattice_instance_q15 *S, uint16_t numStages, const q15_t *pCoeffs, q15_t *pState)</argsstring>
        <name>riscv_fir_lattice_init_q15</name>
        <param>
          <type><ref refid="structriscv__fir__lattice__instance__q15" kindref="compound">riscv_fir_lattice_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 FIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter stages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. The array is of length numStages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter stages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3871" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_lattice_init_q15.c" bodystart="50" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Lattice_1ga577c755d5ad2f887455f465d5d0b8f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_lattice_q15</definition>
        <argsstring>(const riscv_fir_lattice_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_lattice_q15</name>
        <param>
          <type>const <ref refid="structriscv__fir__lattice__instance__q15" kindref="compound">riscv_fir_lattice_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 FIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
Processing function for the Q15 FIR lattice filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 FIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3885" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_lattice_q15.c" bodystart="50" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Lattice_1ga1b195a9ff98c1d5f8668e49c559740fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_lattice_init_q31</definition>
        <argsstring>(riscv_fir_lattice_instance_q31 *S, uint16_t numStages, const q31_t *pCoeffs, q31_t *pState)</argsstring>
        <name>riscv_fir_lattice_init_q31</name>
        <param>
          <type><ref refid="structriscv__fir__lattice__instance__q31" kindref="compound">riscv_fir_lattice_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 FIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter stages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. The array is of length numStages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter stages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3899" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_lattice_init_q31.c" bodystart="50" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Lattice_1ga8cd880ce0b660988f86fbeb479edafe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_lattice_q31</definition>
        <argsstring>(const riscv_fir_lattice_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_lattice_q31</name>
        <param>
          <type>const <ref refid="structriscv__fir__lattice__instance__q31" kindref="compound">riscv_fir_lattice_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 FIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 FIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>In order to avoid overflows the input signal must be scaled down by 2*log2(numStages) bits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3913" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_lattice_q31.c" bodystart="53" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Lattice_1ga0e52d2c841a9fcacb5cfc2cdac417795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_lattice_init_f32</definition>
        <argsstring>(riscv_fir_lattice_instance_f32 *S, uint16_t numStages, const float32_t *pCoeffs, float32_t *pState)</argsstring>
        <name>riscv_fir_lattice_init_f32</name>
        <param>
          <type><ref refid="structriscv__fir__lattice__instance__f32" kindref="compound">riscv_fir_lattice_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point FIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter stages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. The array is of length numStages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter stages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3927" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_lattice_init_f32.c" bodystart="50" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Lattice_1ga71be4bcdf299f23f9cc561aaf72b6a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_lattice_f32</definition>
        <argsstring>(const riscv_fir_lattice_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_fir_lattice_f32</name>
        <param>
          <type>const <ref refid="structriscv__fir__lattice__instance__f32" kindref="compound">riscv_fir_lattice_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point FIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point FIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3941" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_lattice_f32.c" bodystart="122" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga21cbd80b4efa75ebedacf255f3ae9864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_f32</definition>
        <argsstring>(const riscv_iir_lattice_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_f32</name>
        <param>
          <type>const <ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point IIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="3989" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_f32.c" bodystart="122" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga0086fda79e52d27e5dbf1aa5e4e5a568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_init_f32</definition>
        <argsstring>(riscv_iir_lattice_instance_f32 *S, uint16_t numStages, float32_t *pkCoeffs, float32_t *pvCoeffs, float32_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_init_f32</name>
        <param>
          <type><ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pkCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pvCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point IIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the reflection coefficient buffer. The array is of length numStages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the ladder coefficient buffer. The array is of length numStages+1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages+blockSize-1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4005" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_f32.c" bodystart="52" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga05b9e1ecf4b9bd838ccab74d9c8d5265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_q31</definition>
        <argsstring>(const riscv_iir_lattice_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_q31</name>
        <param>
          <type>const <ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 IIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by 2*log2(numStages) bits. After all multiply-accumulates are performed, the 2.62 accumulator is saturated to 1.32 format and then truncated to 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4021" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_q31.c" bodystart="57" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga2d089c8a0b6a3b543169569bc6f12f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_init_q31</definition>
        <argsstring>(riscv_iir_lattice_instance_q31 *S, uint16_t numStages, q31_t *pkCoeffs, q31_t *pvCoeffs, q31_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_init_q31</name>
        <param>
          <type><ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pkCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pvCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 IIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the reflection coefficient buffer. The array is of length numStages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the ladder coefficient buffer. The array is of length numStages+1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. The array is of length numStages+blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4037" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_q31.c" bodystart="52" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga07f17a4cacfb0eaf8e41bc6e705c0a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_q15</definition>
        <argsstring>(const riscv_iir_lattice_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_q15</name>
        <param>
          <type>const <ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 IIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4053" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_q15.c" bodystart="58" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga2597e0a4aaf0b8ff9a83b1bb1b8bd801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_init_q15</definition>
        <argsstring>(riscv_iir_lattice_instance_q15 *S, uint16_t numStages, q15_t *pkCoeffs, q15_t *pvCoeffs, q15_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_init_q15</name>
        <param>
          <type><ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pkCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pvCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the fixed-point Q15 IIR lattice structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4069" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_q15.c" bodystart="52" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS_1ga4821915faf731f785e8b9a2c787d7d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_f32</definition>
        <argsstring>(const riscv_lms_instance_f32 *S, const float32_t *pSrc, float32_t *pRef, float32_t *pOut, float32_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_f32</name>
        <param>
          <type>const <ref refid="structriscv__lms__instance__f32" kindref="compound">riscv_lms_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for floating-point LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4099" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_f32.c" bodystart="339" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS_1ga26efc85da2087e64bb20858ff58fce82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_init_f32</definition>
        <argsstring>(riscv_lms_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)</argsstring>
        <name>riscv_lms_init_f32</name>
        <param>
          <type><ref refid="structriscv__lms__instance__f32" kindref="compound">riscv_lms_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for floating-point LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to an array of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS_1ga4821915faf731f785e8b9a2c787d7d5a" kindref="member">riscv_lms_f32()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4117" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_init_f32.c" bodystart="56" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS_1gabbc1cc876630ed6cb1d7f9abafe563ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_init_q15</definition>
        <argsstring>(riscv_lms_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint32_t postShift)</argsstring>
        <name>riscv_lms_init_q15</name>
        <param>
          <type><ref refid="structriscv__lms__instance__q15" kindref="compound">riscv_lms_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to the array of state variables and size of array is <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS_1ga139f4b315354ce502f5b0bf66707c624" kindref="member">riscv_lms_q15()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4149" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_init_q15.c" bodystart="63" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS_1ga139f4b315354ce502f5b0bf66707c624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_q15</definition>
        <argsstring>(const riscv_lms_instance_q15 *S, const q15_t *pSrc, q15_t *pRef, q15_t *pOut, q15_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_q15</name>
        <param>
          <type>const <ref refid="structriscv__lms__instance__q15" kindref="compound">riscv_lms_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for Q15 LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
<simplesect kind="par"><title></title><para>In this filter, filter coefficients are updated for each sample and the updation of filter cofficients are saturted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4168" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_q15.c" bodystart="63" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS_1ga860b11ef001dfbfbd56f8fa353cb7ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_q31</definition>
        <argsstring>(const riscv_lms_instance_q31 *S, const q31_t *pSrc, q31_t *pRef, q31_t *pOut, q31_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_q31</name>
        <param>
          <type>const <ref refid="structriscv__lms__instance__q31" kindref="compound">riscv_lms_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for Q31 LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clips. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits. The reference signal should not be scaled down. After all multiply-accumulates are performed, the 2.62 accumulator is shifted and saturated to 1.31 format to yield the final result. The output signal and error signal are in 1.31 format. </para></simplesect>
<simplesect kind="par"><title></title><para>In this filter, filter coefficients are updated for each sample and the updation of filter cofficients are saturted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4199" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_q31.c" bodystart="67" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS_1ga7f855feb11ee18ee8f345968acb79cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_init_q31</definition>
        <argsstring>(riscv_lms_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint32_t postShift)</argsstring>
        <name>riscv_lms_init_q31</name>
        <param>
          <type><ref refid="structriscv__lms__instance__q31" kindref="compound">riscv_lms_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for Q31 LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to an array of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS_1ga860b11ef001dfbfbd56f8fa353cb7ecd" kindref="member">riscv_lms_q31()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4218" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_init_q31.c" bodystart="63" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga430d4faa1d3bc35f11c7161d32829b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_f32</definition>
        <argsstring>(riscv_lms_norm_instance_f32 *S, const float32_t *pSrc, float32_t *pRef, float32_t *pOut, float32_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_f32</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for floating-point normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point normalized LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4251" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_f32.c" bodystart="350" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga39ba5def59568ef5db5a2da0f6632d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_init_f32</definition>
        <argsstring>(riscv_lms_norm_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_init_f32</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for floating-point normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to an array of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS__NORM_1ga430d4faa1d3bc35f11c7161d32829b54" kindref="member">riscv_lms_norm_f32()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4269" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_f32.c" bodystart="61" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1gad65f37ceb84e37e316875bcdad4e9be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_q31</definition>
        <argsstring>(riscv_lms_norm_instance_q31 *S, const q31_t *pSrc, q31_t *pRef, q31_t *pOut, q31_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_q31</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for Q31 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 normalized LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits. The reference signal should not be scaled down. After all multiply-accumulates are performed, the 2.62 accumulator is shifted and saturated to 1.31 format to yield the final result. The output signal and error signal are in 1.31 format. </para></simplesect>
<simplesect kind="par"><title></title><para>In this filter, filter coefficients are updated for each sample and the updation of filter cofficients are saturted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4303" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_q31.c" bodystart="66" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga8545ba6c1d850ed23d265dc098c6b092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_init_q31</definition>
        <argsstring>(riscv_lms_norm_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint8_t postShift)</argsstring>
        <name>riscv_lms_norm_init_q31</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for Q31 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to an array of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS__NORM_1gad65f37ceb84e37e316875bcdad4e9be1" kindref="member">riscv_lms_norm_q31()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4322" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_q31.c" bodystart="59" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1gaedc80687fb3a431b2f7616caebbc740c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_q15</definition>
        <argsstring>(riscv_lms_norm_instance_q15 *S, const q15_t *pSrc, q15_t *pRef, q15_t *pOut, q15_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_q15</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for Q15 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 normalized LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
<simplesect kind="par"><title></title><para>In this filter, filter coefficients are updated for each sample and the updation of filter cofficients are saturted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4357" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_q15.c" bodystart="66" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga30c00d2a58bd561f823b89b44ae71556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_init_q15</definition>
        <argsstring>(riscv_lms_norm_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint8_t postShift)</argsstring>
        <name>riscv_lms_norm_init_q15</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for Q15 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to the array of state variables and size of array is <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS__NORM_1gaedc80687fb3a431b2f7616caebbc740c" kindref="member">riscv_lms_norm_q15()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4376" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_q15.c" bodystart="60" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga7b6d1e9597930342fc81f65b7d9efe81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_f32</definition>
        <argsstring>(const float32_t *pSrcA, uint32_t srcALen, const float32_t *pSrcB, uint32_t srcBLen, float32_t *pDst)</argsstring>
        <name>riscv_correlate_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Correlation of floating-point sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4394" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_f32.c" bodystart="97" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga69033fc00b83b9f6a2096b97c2bbbda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_opt_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, q15_t *pScratch)</argsstring>
        <name>riscv_correlate_opt_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch</declname>
        </param>
        <briefdescription>
<para>Correlation of Q15 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both inputs are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1ga9990fa4b09c6557e7bba6e27146cda34" kindref="member">riscv_correlate_fast_q15()</ref> for a faster but less precise version of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4411" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_opt_q15.c" bodystart="62" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga741c3c19b23c10ae372d8cce02699983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst)</argsstring>
        <name>riscv_correlate_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Correlation of Q15 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both inputs are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1ga9990fa4b09c6557e7bba6e27146cda34" kindref="member">riscv_correlate_fast_q15()</ref> for a faster but less precise version of this function. </para><simplesectsep/><para>Refer to <ref refid="group__Corr_1ga69033fc00b83b9f6a2096b97c2bbbda8" kindref="member">riscv_correlate_opt_q15()</ref> for a faster implementation of this function using scratch buffers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4428" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_q15.c" bodystart="63" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga9990fa4b09c6557e7bba6e27146cda34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_fast_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst)</argsstring>
        <name>riscv_correlate_fast_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Correlation of Q15 sequences (fast version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. Scale down one of the inputs by 1/min(srcALen, srcBLen) to avoid overflow since a maximum of min(srcALen, srcBLen) number of additions is carried internally. The 2.30 accumulator is right shifted by 15 bits and then saturated to 1.15 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1ga741c3c19b23c10ae372d8cce02699983" kindref="member">riscv_correlate_q15()</ref> for a slower implementation of this function which uses a 64-bit accumulator to avoid wrap around distortion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4445" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_fast_q15.c" bodystart="64" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga40c8805aeeab37a95f266f69d3e033e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_fast_opt_q15</definition>
        <argsstring>(const q15_t *pSrcA, uint32_t srcALen, const q15_t *pSrcB, uint32_t srcBLen, q15_t *pDst, q15_t *pScratch)</argsstring>
        <name>riscv_correlate_fast_opt_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch</declname>
        </param>
        <briefdescription>
<para>Correlation of Q15 sequences (fast version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. Scale down one of the inputs by 1/min(srcALen, srcBLen) to avoid overflow since a maximum of min(srcALen, srcBLen) number of additions is carried internally. The 2.30 accumulator is right shifted by 15 bits and then saturated to 1.15 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1ga741c3c19b23c10ae372d8cce02699983" kindref="member">riscv_correlate_q15()</ref> for a slower implementation of this function which uses a 64-bit accumulator to avoid wrap around distortion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4461" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_fast_opt_q15.c" bodystart="65" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga6a1248f762ddd111a31594d2c0629456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_q31</definition>
        <argsstring>(const q31_t *pSrcA, uint32_t srcALen, const q31_t *pSrcB, uint32_t srcBLen, q31_t *pDst)</argsstring>
        <name>riscv_correlate_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Correlation of Q31 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. Scale down one of the inputs by 1/min(srcALen, srcBLen)to avoid overflows since a maximum of min(srcALen, srcBLen) number of additions is carried internally. The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final result.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1gacb282922c8c03f6816b1094bf0177937" kindref="member">riscv_correlate_fast_q31()</ref> for a faster but less precise implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4478" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_q31.c" bodystart="64" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1gacb282922c8c03f6816b1094bf0177937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_fast_q31</definition>
        <argsstring>(const q31_t *pSrcA, uint32_t srcALen, const q31_t *pSrcB, uint32_t srcBLen, q31_t *pDst)</argsstring>
        <name>riscv_correlate_fast_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Correlation of Q31 sequences (fast version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This function is optimized for speed at the expense of fixed-point precision and overflow protection. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are accumulated in a 32-bit register in 2.30 format. Finally, the accumulator is saturated and converted to a 1.31 result. </para></simplesect>
<simplesect kind="par"><title></title><para>The fast version has the same overflow behavior as the standard version but provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signals must be scaled down. The input signals should be scaled down to avoid intermediate overflows. Scale down one of the inputs by 1/min(srcALen, srcBLen)to avoid overflows since a maximum of min(srcALen, srcBLen) number of additions is carried internally.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1ga6a1248f762ddd111a31594d2c0629456" kindref="member">riscv_correlate_q31()</ref> for a slower implementation of this function which uses 64-bit accumulation to provide higher precision. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4494" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_fast_q31.c" bodystart="66" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1gaf7a8d420a60c09dc6d11027b62e87ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_opt_q7</definition>
        <argsstring>(const q7_t *pSrcA, uint32_t srcALen, const q7_t *pSrcB, uint32_t srcBLen, q7_t *pDst, q15_t *pScratch1, q15_t *pScratch2)</argsstring>
        <name>riscv_correlate_opt_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch1</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch2</declname>
        </param>
        <briefdescription>
<para>Correlation of Q7 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch1</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer(of type q15_t) of size max(srcALen, srcBLen) + 2*min(srcALen, srcBLen) - 2. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch2</parametername>
</parameternamelist>
<parameterdescription>
<para>points to scratch buffer (of type q15_t) of size min(srcALen, srcBLen). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. Both the inputs are represented in 1.7 format and multiplications yield a 2.14 result. The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format. This approach provides 17 guard bits and there is no risk of overflow as long as <computeroutput>max(srcALen, srcBLen)&lt;131072</computeroutput>. The 18.14 result is then truncated to 18.7 format by discarding the low 7 bits and then saturated to 1.7 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4512" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_opt_q7.c" bodystart="60" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__Corr_1ga21b0c52b032ee9034adbb14d20b3f376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_correlate_q7</definition>
        <argsstring>(const q7_t *pSrcA, uint32_t srcALen, const q7_t *pSrcB, uint32_t srcBLen, q7_t *pDst)</argsstring>
        <name>riscv_correlate_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcALen</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcBLen</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Correlation of Q7 sequences. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data Length 2 * max(srcALen, srcBLen) - 1.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcALen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the first input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBLen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the second input sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written. Length 2 * max(srcALen, srcBLen) - 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. Both the inputs are represented in 1.7 format and multiplications yield a 2.14 result. The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format. This approach provides 17 guard bits and there is no risk of overflow as long as <computeroutput>max(srcALen, srcBLen)&lt;131072</computeroutput>. The 18.14 result is then truncated to 18.7 format by discarding the low 7 bits and saturated to 1.7 format.</para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__Corr_1gaf7a8d420a60c09dc6d11027b62e87ab2" kindref="member">riscv_correlate_opt_q7()</ref> for a faster implementation of this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4530" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_correlate_q7.c" bodystart="61" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1ga9d163e84a2e324e7c085b1b72a61986e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_f32</definition>
        <argsstring>(riscv_fir_sparse_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, float32_t *pScratchIn, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_f32</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__f32" kindref="compound">riscv_fir_sparse_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pScratchIn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4599" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_f32.c" bodystart="111" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1gac71f6aa7bb818120207635afe90f3d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_init_f32</definition>
        <argsstring>(riscv_fir_sparse_instance_f32 *S, uint16_t numTaps, const float32_t *pCoeffs, float32_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_init_f32</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__f32" kindref="compound">riscv_fir_sparse_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>pTapDelay</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxDelay</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> holds the filter coefficients and has length <computeroutput>numTaps</computeroutput>. <computeroutput>pState</computeroutput> holds the filter&apos;s state variables and must be of length <computeroutput>maxDelay + blockSize</computeroutput>, where <computeroutput>maxDelay</computeroutput> is the maximum number of delay line values. <computeroutput>blockSize</computeroutput> is the number of samples processed by the <computeroutput><ref refid="group__FIR__Sparse_1ga9d163e84a2e324e7c085b1b72a61986e" kindref="member">riscv_fir_sparse_f32()</ref></computeroutput> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4617" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_init_f32.c" bodystart="61" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1gae092c99cb8f32e649a02948cc4a7de3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_q31</definition>
        <argsstring>(riscv_fir_sparse_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, q31_t *pScratchIn, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_q31</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__q31" kindref="compound">riscv_fir_sparse_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pScratchIn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 32-bit accumulator. The 1.31 x 1.31 multiplications are truncated to 2.30 format. This leads to loss of precision on the intermediate multiplications and provides only a single guard bit. If the accumulator result overflows, it wraps around rather than saturate. In order to avoid overflows the input signal or coefficients must be scaled down by log2(numTaps) bits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4635" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_q31.c" bodystart="58" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1ga23c217312f6473b3c6a765dd1bc27d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_init_q31</definition>
        <argsstring>(riscv_fir_sparse_instance_q31 *S, uint16_t numTaps, const q31_t *pCoeffs, q31_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_init_q31</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__q31" kindref="compound">riscv_fir_sparse_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>pTapDelay</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxDelay</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> holds the filter coefficients and has length <computeroutput>numTaps</computeroutput>. <computeroutput>pState</computeroutput> holds the filter&apos;s state variables and must be of length <computeroutput>maxDelay + blockSize</computeroutput>, where <computeroutput>maxDelay</computeroutput> is the maximum number of delay line values. <computeroutput>blockSize</computeroutput> is the number of words processed by <computeroutput><ref refid="group__FIR__Sparse_1gae092c99cb8f32e649a02948cc4a7de3a" kindref="member">riscv_fir_sparse_q31()</ref></computeroutput> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4653" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_init_q31.c" bodystart="60" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1gad748c3c718c09152822c40c5c486668a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_q15</definition>
        <argsstring>(riscv_fir_sparse_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, q15_t *pScratchIn, q31_t *pScratchOut, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_q15</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__q15" kindref="compound">riscv_fir_sparse_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratchIn</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pScratchOut</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 32-bit accumulator. The 1.15 x 1.15 multiplications yield a 2.30 result and these are added to a 2.30 accumulator. Thus the full precision of the multiplications is maintained but there is only a single guard bit in the accumulator. If the accumulator result overflows it will wrap around rather than saturate. After all multiply-accumulates are performed, the 2.30 accumulator is truncated to 2.15 format and then saturated to 1.15 format. In order to avoid overflows the input signal or coefficients must be scaled down by log2(numTaps) bits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4672" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_q15.c" bodystart="60" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1gadee655d8508fa59823215e746ef467ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_init_q15</definition>
        <argsstring>(riscv_fir_sparse_instance_q15 *S, uint16_t numTaps, const q15_t *pCoeffs, q15_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_init_q15</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__q15" kindref="compound">riscv_fir_sparse_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>pTapDelay</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxDelay</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> holds the filter coefficients and has length <computeroutput>numTaps</computeroutput>. <computeroutput>pState</computeroutput> holds the filter&apos;s state variables and must be of length <computeroutput>maxDelay + blockSize</computeroutput>, where <computeroutput>maxDelay</computeroutput> is the maximum number of delay line values. <computeroutput>blockSize</computeroutput> is the number of words processed by <computeroutput><ref refid="group__FIR__Sparse_1gad748c3c718c09152822c40c5c486668a" kindref="member">riscv_fir_sparse_q15()</ref></computeroutput> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4691" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_init_q15.c" bodystart="61" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1ga93670e55f4a3d6c0a16ee726084a6a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_q7</definition>
        <argsstring>(riscv_fir_sparse_instance_q7 *S, const q7_t *pSrc, q7_t *pDst, q7_t *pScratchIn, q31_t *pScratchOut, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_q7</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__q7" kindref="compound">riscv_fir_sparse_instance_q7</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pScratchIn</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pScratchOut</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q7 sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process per call.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchIn</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratchOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to a temporary buffer of size blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. Both coefficients and state variables are represented in 1.7 format and multiplications yield a 2.14 result. The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. The accumulator is then converted to 18.7 format by discarding the low 7 bits. Finally, the result is truncated to 1.7 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4710" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_q7.c" bodystart="60" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__FIR__Sparse_1ga5256db6ef38c820c1a12d2ba3603e073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_fir_sparse_init_q7</definition>
        <argsstring>(riscv_fir_sparse_instance_q7 *S, uint16_t numTaps, const q7_t *pCoeffs, q7_t *pState, int32_t *pTapDelay, uint16_t maxDelay, uint32_t blockSize)</argsstring>
        <name>riscv_fir_sparse_init_q7</name>
        <param>
          <type><ref refid="structriscv__fir__sparse__instance__q7" kindref="compound">riscv_fir_sparse_instance_q7</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>pTapDelay</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxDelay</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q7 sparse FIR filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 sparse FIR structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q7 sparse FIR structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of nonzero coefficients in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pTapDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the array of offset times </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum offset time supported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples that will be processed per block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> holds the filter coefficients and has length <computeroutput>numTaps</computeroutput>. <computeroutput>pState</computeroutput> holds the filter&apos;s state variables and must be of length <computeroutput>maxDelay + blockSize</computeroutput>, where <computeroutput>maxDelay</computeroutput> is the maximum number of delay line values. <computeroutput>blockSize</computeroutput> is the number of samples processed by the <computeroutput><ref refid="group__FIR__Sparse_1ga93670e55f4a3d6c0a16ee726084a6a14" kindref="member">riscv_fir_sparse_q7()</ref></computeroutput> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4729" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_fir_sparse_init_q7.c" bodystart="61" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__SinCos_1ga6742f15b5a6fc25f9406b8288c499ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_sin_cos_f32</definition>
        <argsstring>(float32_t theta, float32_t *pSinVal, float32_t *pCosVal)</argsstring>
        <name>riscv_sin_cos_f32</name>
        <param>
          <type>float32_t</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pSinVal</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pCosVal</declname>
        </param>
        <briefdescription>
<para>Floating-point sin_cos function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">theta</parametername>
</parameternamelist>
<parameterdescription>
<para>input value in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the processed sine output. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the processed cos output.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">theta</parametername>
</parameternamelist>
<parameterdescription>
<para>input value in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to processed sine output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to processed cosine output </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4745" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_sin_cos_f32.c" bodystart="75" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__SinCos_1gaba44a82036931215a98b726da8fc28f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_sin_cos_q31</definition>
        <argsstring>(q31_t theta, q31_t *pSinVal, q31_t *pCosVal)</argsstring>
        <name>riscv_sin_cos_q31</name>
        <param>
          <type>q31_t</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pSinVal</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pCosVal</declname>
        </param>
        <briefdescription>
<para>Q31 sin_cos function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">theta</parametername>
</parameternamelist>
<parameterdescription>
<para>scaled input value in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the processed sine output. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the processed cosine output.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">theta</parametername>
</parameternamelist>
<parameterdescription>
<para>scaled input value in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to processed sine output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to processed cosine output </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
The Q31 input value is in the range [-1 0.999999] and is mapped to a degree value in the range [-180 179]. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4757" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ControllerFunctions/riscv_sin_cos_q31.c" bodystart="52" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__conj_1ga85e11fa12a02e256cb825dff232182c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_conj_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_conj_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Floating-point complex conjugate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4769" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_conj_f32.c" bodystart="73" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__conj_1ga6bde169711f530b2a7fd8a31153591a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_conj_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_conj_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q31 complex conjugate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q31 value -1 (0x80000000) is saturated to the maximum allowable positive value 0x7FFFFFFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4780" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_conj_q31.c" bodystart="53" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__conj_1ga23e24e645f1487cc7f2286e9dcf523e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_conj_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_conj_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q15 complex conjugate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. The Q15 value -1 (0x8000) is saturated to the maximum allowable positive value 0x7FFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4792" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_conj_q15.c" bodystart="53" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__mag__squared_1ga1cc0b3a955a49094b5a630e15e270f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mag_squared_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mag_squared_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Floating-point complex magnitude squared. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4804" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mag_squared_f32.c" bodystart="73" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__mag__squared_1gacaf0b7aaadeb446212d05aa349d5f669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mag_squared_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mag_squared_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q31 complex magnitude squared. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function implements 1.31 by 1.31 multiplications and finally output is converted into 3.29 format. Input down scaling is not required. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4816" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mag_squared_q31.c" bodystart="53" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__mag__squared_1ga63ecc92e721532fd727e35d6a67452ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mag_squared_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mag_squared_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q15 complex magnitude squared. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function implements 1.15 by 1.15 multiplications and finally output is converted into 3.13 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4828" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mag_squared_q15.c" bodystart="52" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1gabafba8b6028791a8df9336fda2d89eb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE float32_t</type>
        <definition>__STATIC_FORCEINLINE float32_t riscv_pid_f32</definition>
        <argsstring>(riscv_pid_instance_f32 *S, float32_t in)</argsstring>
        <name>riscv_pid_f32</name>
        <param>
          <type><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Process function for the floating-point PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the floating-point PID Control structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>processed output sample. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4907" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="4907" bodyend="4925"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1ga107785522e399b35e5ba5b9181d57726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_pid_q31</definition>
        <argsstring>(riscv_pid_instance_q31 *S, q31_t in)</argsstring>
        <name>riscv_pid_q31</name>
        <param>
          <type><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Process function for the Q31 PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 PID Control structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>processed output sample.</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by 2 bits as there are four additions. After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format and then saturated to 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4940" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="4940" bodyend="4969"/>
      </memberdef>
      <memberdef kind="function" id="group__PID_1gaf1220917c29e049f8127ca8808bd703f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q15_t</type>
        <definition>__STATIC_FORCEINLINE q15_t riscv_pid_q15</definition>
        <argsstring>(riscv_pid_instance_q15 *S, q15_t in)</argsstring>
        <name>riscv_pid_q15</name>
        <param>
          <type><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Process function for the Q15 PID Control. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 PID Control structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>processed output sample.</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both Gains and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="4986" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="4986" bodyend="5023"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixInv_1gafe1cdc037cf164c23ae8f5d0e4e5582b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_inverse_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *src, riscv_matrix_instance_f32 *dst)</argsstring>
        <name>riscv_mat_inverse_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>src</declname>
          <defname>pSrc</defname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>dst</declname>
          <defname>pDst</defname>
        </param>
        <briefdescription>
<para>Floating-point matrix inverse. </para>        </briefdescription>
        <detaileddescription>
<para>end of PID group <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance of the input floating-point matrix structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance of the output floating-point matrix structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SIZE_MISMATCH, if the dimensions do not match. If the input matrix is singular (does not have an inverse), then the algorithm terminates and returns error status RISCV_MATH_SINGULAR.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem><listitem><para>RISCV_MATH_SINGULAR : Input matrix is found to be singular (non-invertible) </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5037" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_inverse_f32.c" bodystart="505" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="group__MatrixInv_1ga953ffef0728e932d1daaaccdfd69d843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_inverse_f64</definition>
        <argsstring>(const riscv_matrix_instance_f64 *src, riscv_matrix_instance_f64 *dst)</argsstring>
        <name>riscv_mat_inverse_f64</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f64" kindref="compound">riscv_matrix_instance_f64</ref> *</type>
          <declname>src</declname>
          <defname>pSrc</defname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f64" kindref="compound">riscv_matrix_instance_f64</ref> *</type>
          <declname>dst</declname>
          <defname>pDst</defname>
        </param>
        <briefdescription>
<para>Floating-point matrix inverse. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance of the input floating-point matrix structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the instance of the output floating-point matrix structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SIZE_MISMATCH, if the dimensions do not match. If the input matrix is singular (does not have an inverse), then the algorithm terminates and returns error status RISCV_MATH_SINGULAR.</para></simplesect>
Floating-point matrix inverse.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem><listitem><para>RISCV_MATH_SINGULAR : Input matrix is found to be singular (non-invertible) </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5049" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_inverse_f64.c" bodystart="52" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="group__clarke_1gac33843986caf32228355185c14fafda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_clarke_f32</definition>
        <argsstring>(float32_t Ia, float32_t Ib, float32_t *pIalpha, float32_t *pIbeta)</argsstring>
        <name>riscv_clarke_f32</name>
        <param>
          <type>float32_t</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>Ib</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIalpha</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIbeta</declname>
        </param>
        <briefdescription>
<para>Floating-point Clarke transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ia</parametername>
</parameternamelist>
<parameterdescription>
<para>input three-phase coordinate <computeroutput>a</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Ib</parametername>
</parameternamelist>
<parameterdescription>
<para>input three-phase coordinate <computeroutput>b</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIalpha</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIbeta</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis beta </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5095" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5095" bodyend="5106"/>
      </memberdef>
      <memberdef kind="function" id="group__clarke_1ga284680aa3493d2d23592e09fa561c868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_clarke_q31</definition>
        <argsstring>(q31_t Ia, q31_t Ib, q31_t *pIalpha, q31_t *pIbeta)</argsstring>
        <name>riscv_clarke_q31</name>
        <param>
          <type>q31_t</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Ib</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIalpha</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIbeta</declname>
        </param>
        <briefdescription>
<para>Clarke transform for Q31 version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ia</parametername>
</parameternamelist>
<parameterdescription>
<para>input three-phase coordinate <computeroutput>a</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Ib</parametername>
</parameternamelist>
<parameterdescription>
<para>input three-phase coordinate <computeroutput>b</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIalpha</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIbeta</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis beta </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 32-bit accumulator. The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format. There is saturation on the addition, hence there is no risk of overflow. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5122" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5122" bodyend="5141"/>
      </memberdef>
      <memberdef kind="function" id="group__inv__clarke_1gaf8994c650507b48c612a417f7e64ce4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_inv_clarke_f32</definition>
        <argsstring>(float32_t Ialpha, float32_t Ibeta, float32_t *pIa, float32_t *pIb)</argsstring>
        <name>riscv_inv_clarke_f32</name>
        <param>
          <type>float32_t</type>
          <declname>Ialpha</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>Ibeta</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIa</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIb</declname>
        </param>
        <briefdescription>
<para>Floating-point Inverse Clarke transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ialpha</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase orthogonal vector axis alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Ibeta</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase orthogonal vector axis beta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIa</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output three-phase coordinate <computeroutput>a</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIb</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output three-phase coordinate <computeroutput>b</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5181" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5181" bodyend="5192"/>
      </memberdef>
      <memberdef kind="function" id="group__inv__clarke_1ga85f9a48c3d5e8c6a43378bb1cb410399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_inv_clarke_q31</definition>
        <argsstring>(q31_t Ialpha, q31_t Ibeta, q31_t *pIa, q31_t *pIb)</argsstring>
        <name>riscv_inv_clarke_q31</name>
        <param>
          <type>q31_t</type>
          <declname>Ialpha</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Ibeta</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIa</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIb</declname>
        </param>
        <briefdescription>
<para>Inverse Clarke transform for Q31 version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ialpha</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase orthogonal vector axis alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Ibeta</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase orthogonal vector axis beta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIa</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output three-phase coordinate <computeroutput>a</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIb</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output three-phase coordinate <computeroutput>b</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 32-bit accumulator. The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format. There is saturation on the subtraction, hence there is no risk of overflow. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5208" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5208" bodyend="5227"/>
      </memberdef>
      <memberdef kind="function" id="group__park_1gab183396bb844fa2baa3da261932125ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_park_f32</definition>
        <argsstring>(float32_t Ialpha, float32_t Ibeta, float32_t *pId, float32_t *pIq, float32_t sinVal, float32_t cosVal)</argsstring>
        <name>riscv_park_f32</name>
        <param>
          <type>float32_t</type>
          <declname>Ialpha</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>Ibeta</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pId</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIq</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>sinVal</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>cosVal</declname>
        </param>
        <briefdescription>
<para>Floating-point Park transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ialpha</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase vector coordinate alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Ibeta</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase vector coordinate beta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pId</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output rotor reference frame d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIq</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output rotor reference frame q </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>sine value of rotation angle theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>cosine value of rotation angle theta </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
The function implements the forward Park transform. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5281" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5281" bodyend="5294"/>
      </memberdef>
      <memberdef kind="function" id="group__park_1ga8230600e57db40c1bd5f8e9df49e3193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_park_q31</definition>
        <argsstring>(q31_t Ialpha, q31_t Ibeta, q31_t *pId, q31_t *pIq, q31_t sinVal, q31_t cosVal)</argsstring>
        <name>riscv_park_q31</name>
        <param>
          <type>q31_t</type>
          <declname>Ialpha</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Ibeta</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pId</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIq</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>sinVal</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>cosVal</declname>
        </param>
        <briefdescription>
<para>Park transform for Q31 version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Ialpha</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase vector coordinate alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Ibeta</parametername>
</parameternamelist>
<parameterdescription>
<para>input two-phase vector coordinate beta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pId</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output rotor reference frame d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIq</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output rotor reference frame q </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>sine value of rotation angle theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>cosine value of rotation angle theta </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 32-bit accumulator. The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format. There is saturation on the addition and subtraction, hence there is no risk of overflow. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5312" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5312" bodyend="5341"/>
      </memberdef>
      <memberdef kind="function" id="group__inv__park_1ga551373c715baaa03726ac4a008f6fff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_inv_park_f32</definition>
        <argsstring>(float32_t Id, float32_t Iq, float32_t *pIalpha, float32_t *pIbeta, float32_t sinVal, float32_t cosVal)</argsstring>
        <name>riscv_inv_park_f32</name>
        <param>
          <type>float32_t</type>
          <declname>Id</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>Iq</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIalpha</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pIbeta</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>sinVal</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>cosVal</declname>
        </param>
        <briefdescription>
<para>Floating-point Inverse Park transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Id</parametername>
</parameternamelist>
<parameterdescription>
<para>input coordinate of rotor reference frame d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Iq</parametername>
</parameternamelist>
<parameterdescription>
<para>input coordinate of rotor reference frame q </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIalpha</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIbeta</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis beta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>sine value of rotation angle theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>cosine value of rotation angle theta </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5384" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5384" bodyend="5397"/>
      </memberdef>
      <memberdef kind="function" id="group__inv__park_1ga295798b52c3a62efeaf00091e001ee20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_inv_park_q31</definition>
        <argsstring>(q31_t Id, q31_t Iq, q31_t *pIalpha, q31_t *pIbeta, q31_t sinVal, q31_t cosVal)</argsstring>
        <name>riscv_inv_park_q31</name>
        <param>
          <type>q31_t</type>
          <declname>Id</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Iq</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIalpha</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pIbeta</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>sinVal</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>cosVal</declname>
        </param>
        <briefdescription>
<para>Inverse Park transform for Q31 version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Id</parametername>
</parameternamelist>
<parameterdescription>
<para>input coordinate of rotor reference frame d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Iq</parametername>
</parameternamelist>
<parameterdescription>
<para>input coordinate of rotor reference frame q </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIalpha</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis alpha </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIbeta</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output two-phase orthogonal vector axis beta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sinVal</parametername>
</parameternamelist>
<parameterdescription>
<para>sine value of rotation angle theta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cosVal</parametername>
</parameternamelist>
<parameterdescription>
<para>cosine value of rotation angle theta </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 32-bit accumulator. The accumulator maintains 1.31 format by truncating lower 31 bits of the intermediate multiplication in 2.62 format. There is saturation on the addition, hence there is no risk of overflow. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5415" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5415" bodyend="5444"/>
      </memberdef>
      <memberdef kind="function" id="group__LinearInterpolate_1gaf5398260d5170ca63d3f67743d8a5533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE float32_t</type>
        <definition>__STATIC_FORCEINLINE float32_t riscv_linear_interp_f32</definition>
        <argsstring>(riscv_linear_interp_instance_f32 *S, float32_t x)</argsstring>
        <name>riscv_linear_interp_f32</name>
        <param>
          <type><ref refid="structriscv__linear__interp__instance__f32" kindref="compound">riscv_linear_interp_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Process function for the floating-point Linear Interpolation Function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>is an instance of the floating-point Linear Interpolation structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>y processed output sample. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5499" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5499" bodyend="5540"/>
      </memberdef>
      <memberdef kind="function" id="group__LinearInterpolate_1ga38f1285ec1a9657c1c695b3d1fd9cc38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_linear_interp_q31</definition>
        <argsstring>(q31_t *pYData, q31_t x, uint32_t nValues)</argsstring>
        <name>riscv_linear_interp_q31</name>
        <param>
          <type>q31_t *</type>
          <declname>pYData</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nValues</declname>
        </param>
        <briefdescription>
<para>Process function for the Q31 Linear Interpolation Function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pYData</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to Q31 Linear Interpolation table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nValues</parametername>
</parameternamelist>
<parameterdescription>
<para>number of table values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>y processed output sample.</para></simplesect>
<simplesect kind="par"><title></title><para>Input sample <computeroutput>x</computeroutput> is in 12.20 format which contains 12 bits for table index and 20 bits for fractional part. This function can support maximum of table size 2^12. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5556" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5556" bodyend="5598"/>
      </memberdef>
      <memberdef kind="function" id="group__LinearInterpolate_1gac1b8468ad9ef25b0fc03a60574748c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q15_t</type>
        <definition>__STATIC_FORCEINLINE q15_t riscv_linear_interp_q15</definition>
        <argsstring>(q15_t *pYData, q31_t x, uint32_t nValues)</argsstring>
        <name>riscv_linear_interp_q15</name>
        <param>
          <type>q15_t *</type>
          <declname>pYData</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nValues</declname>
        </param>
        <briefdescription>
<para>Process function for the Q15 Linear Interpolation Function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pYData</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to Q15 Linear Interpolation table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nValues</parametername>
</parameternamelist>
<parameterdescription>
<para>number of table values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>y processed output sample.</para></simplesect>
<simplesect kind="par"><title></title><para>Input sample <computeroutput>x</computeroutput> is in 12.20 format which contains 12 bits for table index and 20 bits for fractional part. This function can support maximum of table size 2^12. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5614" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5614" bodyend="5656"/>
      </memberdef>
      <memberdef kind="function" id="group__LinearInterpolate_1ga49e203bdb9bcdb4511538244c8f30cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q7_t</type>
        <definition>__STATIC_FORCEINLINE q7_t riscv_linear_interp_q7</definition>
        <argsstring>(q7_t *pYData, q31_t x, uint32_t nValues)</argsstring>
        <name>riscv_linear_interp_q7</name>
        <param>
          <type>q7_t *</type>
          <declname>pYData</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nValues</declname>
        </param>
        <briefdescription>
<para>Process function for the Q7 Linear Interpolation Function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pYData</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to Q7 Linear Interpolation table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input sample to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nValues</parametername>
</parameternamelist>
<parameterdescription>
<para>number of table values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>y processed output sample.</para></simplesect>
<simplesect kind="par"><title></title><para>Input sample <computeroutput>x</computeroutput> is in 12.20 format which contains 12 bits for table index and 20 bits for fractional part. This function can support maximum of table size 2^12. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5671" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5671" bodyend="5713"/>
      </memberdef>
      <memberdef kind="function" id="group__sin_1ga11d805fff25da36b07ff5d2ebfb69dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t riscv_sin_f32</definition>
        <argsstring>(float32_t x)</argsstring>
        <name>riscv_sin_f32</name>
        <param>
          <type>float32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Fast approximation to the trigonometric sine function for floating-point data. </para>        </briefdescription>
        <detaileddescription>
<para>end of LinearInterpolate group <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sin(x).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sin(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5724" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_sin_f32.c" bodystart="72" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__sin_1gaacaf1c59cfded5990998fc2979ba2a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>q31_t</type>
        <definition>q31_t riscv_sin_q31</definition>
        <argsstring>(q31_t x)</argsstring>
        <name>riscv_sin_q31</name>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Fast approximation to the trigonometric sine function for Q31 data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sin(x).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sin(x)</para></simplesect>
The Q31 input value is in the range [0 +0.9999] and is mapped to a radian value in the range [0 2*PI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5733" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_sin_q31.c" bodystart="50" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__sin_1ga414e49b515ee5a150aa855fc8e49252b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>q15_t</type>
        <definition>q15_t riscv_sin_q15</definition>
        <argsstring>(q15_t x)</argsstring>
        <name>riscv_sin_q15</name>
        <param>
          <type>q15_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Fast approximation to the trigonometric sine function for Q15 data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sin(x).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sin(x)</para></simplesect>
The Q15 input value is in the range [0 +0.9999] and is mapped to a radian value in the range [0 2*PI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5742" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_sin_q15.c" bodystart="50" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__cos_1gaf64b27f7eb9658ef96b44a5f0fcf959e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float32_t</type>
        <definition>float32_t riscv_cos_f32</definition>
        <argsstring>(float32_t x)</argsstring>
        <name>riscv_cos_f32</name>
        <param>
          <type>float32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Fast approximation to the trigonometric cosine function for floating-point data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cos(x).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>input value in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cos(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5751" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_cos_f32.c" bodystart="72" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__cos_1gaa303d5764cfe18487ff02951a12b6e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>q31_t</type>
        <definition>q31_t riscv_cos_q31</definition>
        <argsstring>(q31_t x)</argsstring>
        <name>riscv_cos_q31</name>
        <param>
          <type>q31_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Fast approximation to the trigonometric cosine function for Q31 data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cos(x).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cos(x)</para></simplesect>
The Q31 input value is in the range [0 +0.9999] and is mapped to a radian value in the range [0 2*PI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5760" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_cos_q31.c" bodystart="50" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__cos_1gaa66f064ed8d2ada72e47d966081c1704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>q15_t</type>
        <definition>q15_t riscv_cos_q15</definition>
        <argsstring>(q15_t x)</argsstring>
        <name>riscv_cos_q15</name>
        <param>
          <type>q15_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Fast approximation to the trigonometric cosine function for Q15 data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cos(x).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Scaled input value in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cos(x)</para></simplesect>
The Q15 input value is in the range [0 +0.9999] and is mapped to a radian value in the range [0 2*PI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5769" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_cos_q15.c" bodystart="50" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__SQRT_1ga195942e72ace5531f88658714db038b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE riscv_status</type>
        <definition>__STATIC_FORCEINLINE riscv_status riscv_sqrt_f32</definition>
        <argsstring>(float32_t in, float32_t *pOut)</argsstring>
        <name>riscv_sqrt_f32</name>
        <param>
          <type>float32_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
<para>Floating-point square root function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>input value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>square root of input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : input value is positive</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : input value is negative; *pOut is set to 0 </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5812" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5812" bodyend="5828"/>
      </memberdef>
      <memberdef kind="function" id="group__SQRT_1ga96a93fb99ac782f0a4fbb0d10e7527a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_sqrt_q31</definition>
        <argsstring>(q31_t in, q31_t *pOut)</argsstring>
        <name>riscv_sqrt_q31</name>
        <param>
          <type>q31_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
<para>Q31 square root function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>input value. The range of the input value is [0 +1) or 0x00000000 to 0x7FFFFFFF </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to square root of input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : input value is positive</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : input value is negative; *pOut is set to 0 </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5839" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_sqrt_q31.c" bodystart="51" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__SQRT_1ga7030692f921383b08d1bfca591314105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_sqrt_q15</definition>
        <argsstring>(q15_t in, q15_t *pOut)</argsstring>
        <name>riscv_sqrt_q15</name>
        <param>
          <type>q15_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pOut</declname>
        </param>
        <briefdescription>
<para>Q15 square root function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in</parametername>
</parameternamelist>
<parameterdescription>
<para>input value. The range of the input value is [0 +1) or 0x0000 to 0x7FFF </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to square root of input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : input value is positive</para></listitem><listitem><para>RISCV_MATH_ARGUMENT_ERROR : input value is negative; *pOut is set to 0 </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5852" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FastMathFunctions/riscv_sqrt_q15.c" bodystart="51" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__SQRT_1ga6c2376360963e4cef666729e1c049010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_vsqrt_f32</definition>
        <argsstring>(float32_t *pIn, float32_t *pOut, uint16_t len)</argsstring>
        <name>riscv_vsqrt_f32</name>
        <param>
          <type>float32_t *</type>
          <declname>pIn</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Vector Floating-point square root function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pIn</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of square roots of input elements. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of input vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function returns RISCV_MATH_SUCCESS if input value is positive value or RISCV_MATH_ARGUMENT_ERROR if <computeroutput>in</computeroutput> is negative value and returns zero output for negative values. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__SQRT_1gab76c31ce76775045d9790c547dde10b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_vsqrt_q31</definition>
        <argsstring>(q31_t *pIn, q31_t *pOut, uint16_t len)</argsstring>
        <name>riscv_vsqrt_q31</name>
        <param>
          <type>q31_t *</type>
          <declname>pIn</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__SQRT_1ga9c7433f5a63f57bf001bdad593489cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_vsqrt_q15</definition>
        <argsstring>(q15_t *pIn, q15_t *pOut, uint16_t len)</argsstring>
        <name>riscv_vsqrt_q15</name>
        <param>
          <type>q15_t *</type>
          <declname>pIn</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a92b4ba5bb0b5848c688ba85af75ac0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_circularWrite_f32</definition>
        <argsstring>(int32_t *circBuffer, int32_t L, uint16_t *writeOffset, int32_t bufferInc, const int32_t *src, int32_t srcInc, uint32_t blockSize)</argsstring>
        <name>riscv_circularWrite_f32</name>
        <param>
          <type>int32_t *</type>
          <declname>circBuffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>writeOffset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>bufferInc</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>srcInc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>floating-point Circular write function. </para>        </briefdescription>
        <detaileddescription>
<para>end of SQRT group </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5887" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5887" bodyend="5925"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a9602475b256631c8f836c3dec154236f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_circularRead_f32</definition>
        <argsstring>(int32_t *circBuffer, int32_t L, int32_t *readOffset, int32_t bufferInc, int32_t *dst, int32_t *dst_base, int32_t dst_length, int32_t dstInc, uint32_t blockSize)</argsstring>
        <name>riscv_circularRead_f32</name>
        <param>
          <type>int32_t *</type>
          <declname>circBuffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>readOffset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>bufferInc</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>dst_base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dst_length</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dstInc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>floating-point Circular Read function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5932" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5932" bodyend="5982"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a12447efc0ab826df3f6e5a4c4c4b6418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_circularWrite_q15</definition>
        <argsstring>(q15_t *circBuffer, int32_t L, uint16_t *writeOffset, int32_t bufferInc, const q15_t *src, int32_t srcInc, uint32_t blockSize)</argsstring>
        <name>riscv_circularWrite_q15</name>
        <param>
          <type>q15_t *</type>
          <declname>circBuffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>writeOffset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>bufferInc</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>srcInc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q15 Circular write function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="5988" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="5988" bodyend="6026"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1af19fade250577d037dc588239236fad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_circularRead_q15</definition>
        <argsstring>(q15_t *circBuffer, int32_t L, int32_t *readOffset, int32_t bufferInc, q15_t *dst, q15_t *dst_base, int32_t dst_length, int32_t dstInc, uint32_t blockSize)</argsstring>
        <name>riscv_circularRead_q15</name>
        <param>
          <type>q15_t *</type>
          <declname>circBuffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>readOffset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>bufferInc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>dst_base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dst_length</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dstInc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q15 Circular Read function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6032" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="6032" bodyend="6083"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1a7b90a78e003583795e54ecfa01d13083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_circularWrite_q7</definition>
        <argsstring>(q7_t *circBuffer, int32_t L, uint16_t *writeOffset, int32_t bufferInc, const q7_t *src, int32_t srcInc, uint32_t blockSize)</argsstring>
        <name>riscv_circularWrite_q7</name>
        <param>
          <type>q7_t *</type>
          <declname>circBuffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>writeOffset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>bufferInc</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>srcInc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q7 Circular write function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6089" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="6089" bodyend="6127"/>
      </memberdef>
      <memberdef kind="function" id="riscv__math_8h_1ae68cfc74d9316124590389185285dd8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE void</type>
        <definition>__STATIC_FORCEINLINE void riscv_circularRead_q7</definition>
        <argsstring>(q7_t *circBuffer, int32_t L, int32_t *readOffset, int32_t bufferInc, q7_t *dst, q7_t *dst_base, int32_t dst_length, int32_t dstInc, uint32_t blockSize)</argsstring>
        <name>riscv_circularRead_q7</name>
        <param>
          <type>q7_t *</type>
          <declname>circBuffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>L</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>readOffset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>bufferInc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>dst_base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dst_length</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dstInc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Q7 Circular Read function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6133" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="6133" bodyend="6184"/>
      </memberdef>
      <memberdef kind="function" id="group__power_1ga771849101dec4db523d99c397084bf57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_power_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q63_t *pResult)</argsstring>
        <name>riscv_power_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Sum of the squares of the elements of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>sum of the squares value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. The input is represented in 1.31 format. Intermediate multiplication yields a 2.62 format, and this result is truncated to 2.48 format by discarding the lower 14 bits. The 2.48 result is then added without saturation to a 64-bit accumulator in 16.48 format. With 15 guard bits in the accumulator, there is no risk of overflow, and the full precision of the intermediate multiplication is preserved. Finally, the return result is in 16.48 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6193" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_power_q31.c" bodystart="59" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__power_1ga0e618c3ca31699a1ed84d7573c055cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_power_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)</argsstring>
        <name>riscv_power_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Sum of the squares of the elements of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>sum of the squares value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6205" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_power_f32.c" bodystart="112" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__power_1ga77949ce3a581ede7c56fa2f7f05fe681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_power_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q63_t *pResult)</argsstring>
        <name>riscv_power_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Sum of the squares of the elements of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>sum of the squares value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. The input is represented in 1.15 format. Intermediate multiplication yields a 2.30 format, and this result is added without saturation to a 64-bit accumulator in 34.30 format. With 33 guard bits in the accumulator, there is no risk of overflow, and the full precision of the intermediate multiplication is preserved. Finally, the return result is in 34.30 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6217" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_power_q15.c" bodystart="58" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__power_1ga2513700dcc371c2cd26a1f6a631d816a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_power_q7</definition>
        <argsstring>(const q7_t *pSrc, uint32_t blockSize, q31_t *pResult)</argsstring>
        <name>riscv_power_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Sum of the squares of the elements of a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>sum of the squares value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. The input is represented in 1.7 format. Intermediate multiplication yields a 2.14 format, and this result is added without saturation to an accumulator in 18.14 format. With 17 guard bits in the accumulator, there is no risk of overflow, and the full precision of the intermediate multiplication is preserved. Finally, the return result is in 18.14 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6229" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_power_q7.c" bodystart="58" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__mean_1ga3b79f8993031338e1388657bf6a2ed93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mean_q7</definition>
        <argsstring>(const q7_t *pSrc, uint32_t blockSize, q7_t *pResult)</argsstring>
        <name>riscv_mean_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Mean value of a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>mean value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. The input is represented in 1.7 format and is accumulated in a 32-bit accumulator in 25.7 format. There is no risk of internal overflow with this approach, and the full precision of intermediate result is preserved. Finally, the accumulator is truncated to yield a result of 1.7 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6241" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_mean_q7.c" bodystart="57" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="group__mean_1ga6dca1b21df3244c0784d0fff2ee4b44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mean_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q15_t *pResult)</argsstring>
        <name>riscv_mean_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Mean value of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>mean value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 32-bit internal accumulator. The input is represented in 1.15 format and is accumulated in a 32-bit accumulator in 17.15 format. There is no risk of internal overflow with this approach, and the full precision of intermediate result is preserved. Finally, the accumulator is truncated to yield a result of 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6253" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_mean_q15.c" bodystart="57" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__mean_1gae9c080d5108f8815cd8a875529ff45f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mean_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q31_t *pResult)</argsstring>
        <name>riscv_mean_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Mean value of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>mean value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. The input is represented in 1.31 format and is accumulated in a 64-bit accumulator in 33.31 format. There is no risk of internal overflow with this approach, and the full precision of intermediate result is preserved. Finally, the accumulator is truncated to yield a result of 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6265" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_mean_q31.c" bodystart="57" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__mean_1gafda7243b26985a53e8ceff454c203c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_mean_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)</argsstring>
        <name>riscv_mean_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Mean value of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>mean value returned here. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6277" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_mean_f32.c" bodystart="112" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__variance_1ga452ec5639a24313dc7cbc515d1a8c680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_var_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)</argsstring>
        <name>riscv_var_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Variance of the elements of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>variance value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6289" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_var_f32.c" bodystart="125" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__variance_1ga23d6f039b4a36381948c00b06befa338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_var_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q31_t *pResult)</argsstring>
        <name>riscv_var_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Variance of the elements of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>variance value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The input is represented in 1.31 format, which is then downshifted by 8 bits which yields 1.23, and intermediate multiplication yields a 2.46 format. The accumulator maintains full precision of the intermediate multiplication results, but provides only a 16 guard bits. There is no saturation on intermediate additions. If the accumulator overflows it wraps around and distorts the result. In order to avoid overflows completely the input signal must be scaled down by log2(blockSize)-8 bits, as a total of blockSize additions are performed internally. After division, internal variables should be Q18.46 Finally, the 18.46 accumulator is right shifted by 15 bits to yield a 1.31 format value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6301" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_var_q31.c" bodystart="62" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group__variance_1ga63d8f72f30eed44563cd1a32c38803a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_var_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q15_t *pResult)</argsstring>
        <name>riscv_var_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Variance of the elements of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>variance value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. The input is represented in 1.15 format. Intermediate multiplication yields a 2.30 format, and this result is added without saturation to a 64-bit accumulator in 34.30 format. With 33 guard bits in the accumulator, there is no risk of overflow, and the full precision of the intermediate multiplication is preserved. Finally, the 34.30 result is truncated to 34.15 format by discarding the lower 15 bits, and then saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6313" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_var_q15.c" bodystart="59" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="group__RMS_1gafb2cc5d863073996bd0149653eed1544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rms_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)</argsstring>
        <name>riscv_rms_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Root Mean Square of the elements of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>root mean square value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6325" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_rms_f32.c" bodystart="113" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="group__RMS_1ga406cf1672ee4cb999e8857c06038b84c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rms_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q31_t *pResult)</argsstring>
        <name>riscv_rms_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Root Mean Square of the elements of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>root mean square value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The input is represented in 1.31 format, and intermediate multiplication yields a 2.62 format. The accumulator maintains full precision of the intermediate multiplication results, but provides only a single guard bit. There is no saturation on intermediate additions. If the accumulator overflows, it wraps around and distorts the result. In order to avoid overflows completely, the input signal must be scaled down by log2(blockSize) bits, as a total of blockSize additions are performed internally. Finally, the 2.62 accumulator is right shifted by 31 bits to yield a 1.31 format value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6337" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_rms_q31.c" bodystart="61" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__RMS_1ga930e573646c6dadc6280f61cb8de35de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_rms_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q15_t *pResult)</argsstring>
        <name>riscv_rms_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Root Mean Square of the elements of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>root mean square value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. The input is represented in 1.15 format. Intermediate multiplication yields a 2.30 format, and this result is added without saturation to a 64-bit accumulator in 34.30 format. With 33 guard bits in the accumulator, there is no risk of overflow, and the full precision of the intermediate multiplication is preserved. Finally, the 34.30 result is truncated to 34.15 format by discarding the lower 15 bits, and then saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6349" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_rms_q15.c" bodystart="59" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__STD_1ga47a56c2d3f01f76d19069431d4d4c498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_std_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)</argsstring>
        <name>riscv_std_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Standard deviation of the elements of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>standard deviation value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6361" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_std_f32.c" bodystart="75" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="group__STD_1ga5e3d814cf34b26ed49a26b7044487105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_std_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q31_t *pResult)</argsstring>
        <name>riscv_std_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Standard deviation of the elements of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>standard deviation value returned here. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The input is represented in 1.31 format, which is then downshifted by 8 bits which yields 1.23, and intermediate multiplication yields a 2.46 format. The accumulator maintains full precision of the intermediate multiplication results, but provides only a 16 guard bits. There is no saturation on intermediate additions. If the accumulator overflows it wraps around and distorts the result. In order to avoid overflows completely the input signal must be scaled down by log2(blockSize)-8 bits, as a total of blockSize additions are performed internally. After division, internal variables should be Q18.46 Finally, the 18.46 accumulator is right shifted by 15 bits to yield a 1.31 format value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6373" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_std_q31.c" bodystart="62" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group__STD_1ga67e4591f618116fe749fddacf5a00cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_std_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q15_t *pResult)</argsstring>
        <name>riscv_std_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pResult</declname>
        </param>
        <briefdescription>
<para>Standard deviation of the elements of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output value.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>standard deviation value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. The input is represented in 1.15 format. Intermediate multiplication yields a 2.30 format, and this result is added without saturation to a 64-bit accumulator in 34.30 format. With 33 guard bits in the accumulator, there is no risk of overflow, and the full precision of the intermediate multiplication is preserved. Finally, the 34.30 result is truncated to 34.15 format by discarding the lower 15 bits, and then saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6385" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_std_q15.c" bodystart="59" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__mag_1gaced344ae0cd2f40f7afa5241b72c62a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mag_f32</definition>
        <argsstring>(const float32_t *pSrc, float32_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mag_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Floating-point complex magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6397" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mag_f32.c" bodystart="73" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__mag_1gae1764077098688155e6fb2e1a9e7a01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mag_q31</definition>
        <argsstring>(const q31_t *pSrc, q31_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mag_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q31 complex magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function implements 1.31 by 1.31 multiplications and finally output is converted into 2.30 format. Input down scaling is not required. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6409" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mag_q31.c" bodystart="53" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__mag_1ga54917cbf3745cb1bc01ca593a7a79cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mag_q15</definition>
        <argsstring>(const q15_t *pSrc, q15_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mag_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q15 complex magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function implements 1.15 by 1.15 multiplications and finally output is converted into 2.14 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6421" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mag_q15.c" bodystart="52" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__dot__prod_1gab1a7915b81aef73f226859c0fe835b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_dot_prod_q15</definition>
        <argsstring>(const q15_t *pSrcA, const q15_t *pSrcB, uint32_t numSamples, q31_t *realResult, q31_t *imagResult)</argsstring>
        <name>riscv_cmplx_dot_prod_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>realResult</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>imagResult</declname>
        </param>
        <briefdescription>
<para>Q15 complex dot product. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">realResult</parametername>
</parameternamelist>
<parameterdescription>
<para>real part of the result returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imagResult</parametername>
</parameternamelist>
<parameterdescription>
<para>imaginary part of the result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">realResult</parametername>
</parameternamelist>
<parameterdescription>
<para>real part of the result returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imagResult</parametername>
</parameternamelist>
<parameterdescription>
<para>imaginary part of the result returned her </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The intermediate 1.15 by 1.15 multiplications are performed with full precision and yield a 2.30 result. These are accumulated in a 64-bit accumulator with 34.30 precision. As a final step, the accumulators are converted to 8.24 format. The return results <computeroutput>realResult</computeroutput> and <computeroutput>imagResult</computeroutput> are in 8.24 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6435" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_dot_prod_q15.c" bodystart="58" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__dot__prod_1gae736f9f08fcf71e7a5c13ee4bbe1c33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_dot_prod_q31</definition>
        <argsstring>(const q31_t *pSrcA, const q31_t *pSrcB, uint32_t numSamples, q63_t *realResult, q63_t *imagResult)</argsstring>
        <name>riscv_cmplx_dot_prod_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>realResult</declname>
        </param>
        <param>
          <type>q63_t *</type>
          <declname>imagResult</declname>
        </param>
        <briefdescription>
<para>Q31 complex dot product. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">realResult</parametername>
</parameternamelist>
<parameterdescription>
<para>real part of the result returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imagResult</parametername>
</parameternamelist>
<parameterdescription>
<para>imaginary part of the result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">realResult</parametername>
</parameternamelist>
<parameterdescription>
<para>real part of the result returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imagResult</parametername>
</parameternamelist>
<parameterdescription>
<para>imaginary part of the result returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The intermediate 1.31 by 1.31 multiplications are performed with 64-bit precision and then shifted to 16.48 format. The internal real and imaginary accumulators are in 16.48 format and provide 15 guard bits. Additions are nonsaturating and no overflow will occur as long as <computeroutput>numSamples</computeroutput> is less than 32768. The return results <computeroutput>realResult</computeroutput> and <computeroutput>imagResult</computeroutput> are in 16.48 format. Input down scaling is not required. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6451" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_dot_prod_q31.c" bodystart="59" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__cmplx__dot__prod_1ga4a487e8090687e624d830878c50a6b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_dot_prod_f32</definition>
        <argsstring>(const float32_t *pSrcA, const float32_t *pSrcB, uint32_t numSamples, float32_t *realResult, float32_t *imagResult)</argsstring>
        <name>riscv_cmplx_dot_prod_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>realResult</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>imagResult</declname>
        </param>
        <briefdescription>
<para>Floating-point complex dot product. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">realResult</parametername>
</parameternamelist>
<parameterdescription>
<para>real part of the result returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imagResult</parametername>
</parameternamelist>
<parameterdescription>
<para>imaginary part of the result returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">realResult</parametername>
</parameternamelist>
<parameterdescription>
<para>real part of the result returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imagResult</parametername>
</parameternamelist>
<parameterdescription>
<para>imaginary part of the result returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6467" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_dot_prod_f32.c" bodystart="78" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxByRealMult_1gac512da6affe85400151447042e702c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mult_real_q15</definition>
        <argsstring>(const q15_t *pSrcCmplx, const q15_t *pSrcReal, q15_t *pCmplxDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mult_real_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcCmplx</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcReal</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pCmplxDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q15 complex-by-real multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcCmplx</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcReal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCmplxDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcCmplx</parametername>
</parameternamelist>
<parameterdescription>
<para>points to complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcReal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to real input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCmplxDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to complex output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6482" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mult_real_q15.c" bodystart="54" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxByRealMult_1gac0e1ac76bf236098a272afab43f2b869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mult_real_q31</definition>
        <argsstring>(const q31_t *pSrcCmplx, const q31_t *pSrcReal, q31_t *pCmplxDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mult_real_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcCmplx</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcReal</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pCmplxDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q31 complex-by-real multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcCmplx</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcReal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCmplxDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcCmplx</parametername>
</parameternamelist>
<parameterdescription>
<para>points to complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcReal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to real input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCmplxDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to complex output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] are saturated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6496" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mult_real_q31.c" bodystart="54" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxByRealMult_1ga9d2e6ac8df7cf46d9f0a3058b0a00d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mult_real_f32</definition>
        <argsstring>(const float32_t *pSrcCmplx, const float32_t *pSrcReal, float32_t *pCmplxDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mult_real_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcCmplx</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcReal</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pCmplxDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Floating-point complex-by-real multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcCmplx</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcReal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the real input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCmplxDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the complex output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcCmplx</parametername>
</parameternamelist>
<parameterdescription>
<para>points to complex input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcReal</parametername>
</parameternamelist>
<parameterdescription>
<para>points to real input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pCmplxDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to complex output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6510" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mult_real_f32.c" bodystart="73" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__Min_1gaa96ca2fa49fb1cf3ce0fc94c89c94847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_min_q7</definition>
        <argsstring>(const q7_t *pSrc, uint32_t blockSize, q7_t *result, uint32_t *index)</argsstring>
        <name>riscv_min_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>result</declname>
          <defname>pResult</defname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>index</declname>
          <defname>pIndex</defname>
        </param>
        <briefdescription>
<para>Minimum value of a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>is the array index of the minimum value in the input buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of minimum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6524" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_min_q7.c" bodystart="51" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__Min_1ga6cb72c06e41c3cca6f672083c3b941d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_min_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q15_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_min_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Minimum value of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the array index of the minimum value in the input buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of minimum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6538" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_min_q15.c" bodystart="51" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__Min_1gac301271e481eefda845e1dc13556601c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_min_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q31_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_min_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Minimum value of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the array index of the minimum value in the input buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of minimum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6552" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_min_q31.c" bodystart="51" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__Min_1ga4858d42639fee0082c0faceddd44dfda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_min_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_min_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Minimum value of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>is the array index of the minimum value in the input buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of minimum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6566" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_min_f32.c" bodystart="168" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__Max_1ga86658c6fac036cc868bf509a4e9a5cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_max_q7</definition>
        <argsstring>(const q7_t *pSrc, uint32_t blockSize, q7_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_max_q7</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Maximum value of a Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6580" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_max_q7.c" bodystart="50" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__Max_1ga04a0e786bb3cc80c98eccdce0bec7b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_max_q15</definition>
        <argsstring>(const q15_t *pSrc, uint32_t blockSize, q15_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_max_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Maximum value of a Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6594" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_max_q15.c" bodystart="50" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__Max_1gae3f61c5d8d40fd4ab091b58fe3485b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_max_q31</definition>
        <argsstring>(const q31_t *pSrc, uint32_t blockSize, q31_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_max_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Maximum value of a Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6608" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_max_q31.c" bodystart="50" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__Max_1gadfcdcdaa22ab2e21c1d74230d6462591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_max_f32</definition>
        <argsstring>(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult, uint32_t *pIndex)</argsstring>
        <name>riscv_max_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pResult</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Maximum value of a floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pResult</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value returned here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of maximum value returned here </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6622" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/StatisticsFunctions/riscv_max_f32.c" bodystart="172" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxByCmplxMult_1gaac5cbc0202fce9f91a7707bf209714fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mult_cmplx_q15</definition>
        <argsstring>(const q15_t *pSrcA, const q15_t *pSrcB, q15_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mult_cmplx_q15</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q15 complex-by-complex multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function implements 1.15 by 1.15 multiplications and finally output is converted into 3.13 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6636" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mult_cmplx_q15.c" bodystart="53" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxByCmplxMult_1gadf0096d33bb5b94fa24e1d767ca1fbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mult_cmplx_q31</definition>
        <argsstring>(const q31_t *pSrcA, const q31_t *pSrcB, q31_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mult_cmplx_q31</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Q31 complex-by-complex multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function implements 1.31 by 1.31 multiplications and finally output is converted into 3.29 format. Input down scaling is not required. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6650" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mult_cmplx_q31.c" bodystart="54" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxByCmplxMult_1gac191f744cfce681d42b2faf86f98331b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_cmplx_mult_cmplx_f32</definition>
        <argsstring>(const float32_t *pSrcA, const float32_t *pSrcB, float32_t *pDst, uint32_t numSamples)</argsstring>
        <name>riscv_cmplx_mult_cmplx_f32</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>numSamples</declname>
        </param>
        <briefdescription>
<para>Floating-point complex-by-complex multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of complex samples in each vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numSamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6664" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/ComplexMathFunctions/riscv_cmplx_mult_cmplx_f32.c" bodystart="72" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group__float__to__x_1ga41b2ddb89a3c532d418b9626c19b0c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_float_to_q31</definition>
        <argsstring>(const float32_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_float_to_q31</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the floating-point vector to Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q31_t)(pSrc[n] * 2147483648);   0 &lt;= n &lt; blockSize.
</preformatted></para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] are saturated.</para></simplesect>
<simplesect kind="note"><para>In order to apply rounding, the library should be rebuilt with the ROUNDING macro defined in the preprocessor section of project options. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6677" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_float_to_q31.c" bodystart="160" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__float__to__x_1ga5c2a33af297b10b8cc1196abe0d07a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_float_to_q15</definition>
        <argsstring>(const float32_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_float_to_q15</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the floating-point vector to Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q15_t)(pSrc[n] * 32768);   0 &lt;= n &lt; blockSize.
</preformatted></para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function uses saturating arithmetic. Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.</para></simplesect>
<simplesect kind="note"><para>In order to apply rounding, the library should be rebuilt with the ROUNDING macro defined in the preprocessor section of project options. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6689" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_float_to_q15.c" bodystart="154" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__float__to__x_1gab077f87fd29e71582fe3da092cea4759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_float_to_q7</definition>
        <argsstring>(const float32_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_float_to_q7</name>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the floating-point vector to Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">*pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">*pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para>The equation used for the conversion process is: <preformatted>
        pDst[n] = (q7_t)(pSrc[n] * 128);   0 &lt;= n &lt; blockSize.
 </preformatted> </para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para>The function uses saturating arithmetic. Results outside of the allowable Q7 range [0x80 0x7F] will be saturated. </para></simplesect>
<simplesect kind="note"><para>In order to apply rounding, the library should be rebuilt with the ROUNDING macro defined in the preprocessor section of project options. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6701" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_float_to_q7.c" bodystart="165" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="group__q31__to__x_1ga6cfd64ce23c32128018543b24b7c8315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q31_to_float</definition>
        <argsstring>(const q31_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q31_to_float</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q31 vector to floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (float32_t) pSrc[n] / 2147483648;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6713" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q31_to_float.c" bodystart="107" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__q31__to__x_1ga3d2e1c96dc6db63836a5f3ce2cce9ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q31_to_q15</definition>
        <argsstring>(const q31_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q31_to_q15</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q31 vector to Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q15_t) pSrc[n] &gt;&gt; 16;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6725" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q31_to_q15.c" bodystart="55" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__q31__to__x_1ga827854b09e2e74b27598e472d3be407c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q31_to_q7</definition>
        <argsstring>(const q31_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q31_to_q7</name>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q31 vector to Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q7_t) pSrc[n] &gt;&gt; 24;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6737" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q31_to_q7.c" bodystart="55" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__q15__to__x_1ga2832c664cfe9513b462055f22841c410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q15_to_float</definition>
        <argsstring>(const q15_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q15_to_float</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q15 vector to floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (float32_t) pSrc[n] / 32768;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6749" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q15_to_float.c" bodystart="114" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__q15__to__x_1ga8c666cb28d6052de758dc576158bb63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q15_to_q31</definition>
        <argsstring>(const q15_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q15_to_q31</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q15 vector to Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q31_t) pSrc[n] &lt;&lt; 16;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6761" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q15_to_q31.c" bodystart="55" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__q15__to__x_1gae1915220a3a437d970c04d88969eb39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q15_to_q7</definition>
        <argsstring>(const q15_t *pSrc, q7_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q15_to_q7</name>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q15 vector to Q7 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q7_t) pSrc[n] &gt;&gt; 8;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6773" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q15_to_q7.c" bodystart="55" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__q7__to__x_1ga47122fb81b50e2fbca24c08984d6f4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_float</definition>
        <argsstring>(const q7_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_float</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q7 vector to floating-point vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>is input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>is output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the floating-point output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
     pDst[n] = (float32_t) pSrc[n] / 128;   0 &lt;= n &lt; blockSize.
 </preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6785" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q7_to_float.c" bodystart="127" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="group__q7__to__x_1gaf2af4056316b2e14d4fadf5c7150d5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q31</definition>
        <argsstring>(const q7_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_q31</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q7 vector to Q31 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q31 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q31_t) pSrc[n] &lt;&lt; 24;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6797" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q7_to_q31.c" bodystart="55" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__q7__to__x_1gafadda37edcebe4d34507cf54a03b2e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_q7_to_q15</definition>
        <argsstring>(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_q7_to_q15</name>
        <param>
          <type>const q7_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Converts the elements of the Q7 vector to Q15 vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>input pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>output pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q7 input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the Q15 output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples in each vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para>The equation used for the conversion process is: <preformatted>
    pDst[n] = (q15_t) pSrc[n] &lt;&lt; 8;   0 &lt;= n &lt; blockSize.
</preformatted> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6809" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/SupportFunctions/riscv_q7_to_q15.c" bodystart="55" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__BilinearInterpolate_1ga73d95f5324a831bf2d8f2b29dbd8664e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE float32_t</type>
        <definition>__STATIC_FORCEINLINE float32_t riscv_bilinear_interp_f32</definition>
        <argsstring>(const riscv_bilinear_interp_instance_f32 *S, float32_t X, float32_t Y)</argsstring>
        <name>riscv_bilinear_interp_f32</name>
        <param>
          <type>const <ref refid="structriscv__bilinear__interp__instance__f32" kindref="compound">riscv_bilinear_interp_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>X</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Floating-point bilinear interpolation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the interpolation structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">X</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Y</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out interpolated value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6884" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="6884" bodyend="6939"/>
      </memberdef>
      <memberdef kind="function" id="group__BilinearInterpolate_1ga29d404cf5e53e6aefb80a09328ccc0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q31_t</type>
        <definition>__STATIC_FORCEINLINE q31_t riscv_bilinear_interp_q31</definition>
        <argsstring>(riscv_bilinear_interp_instance_q31 *S, q31_t X, q31_t Y)</argsstring>
        <name>riscv_bilinear_interp_q31</name>
        <param>
          <type><ref refid="structriscv__bilinear__interp__instance__q31" kindref="compound">riscv_bilinear_interp_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>X</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Q31 bilinear interpolation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the interpolation structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">X</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate in 12.20 format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Y</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate in 12.20 format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out interpolated value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="6949" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="6949" bodyend="7013"/>
      </memberdef>
      <memberdef kind="function" id="group__BilinearInterpolate_1gae5d2d0100c70022e6b247d3721803fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q15_t</type>
        <definition>__STATIC_FORCEINLINE q15_t riscv_bilinear_interp_q15</definition>
        <argsstring>(riscv_bilinear_interp_instance_q15 *S, q31_t X, q31_t Y)</argsstring>
        <name>riscv_bilinear_interp_q15</name>
        <param>
          <type><ref refid="structriscv__bilinear__interp__instance__q15" kindref="compound">riscv_bilinear_interp_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>X</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Q15 bilinear interpolation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the interpolation structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">X</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate in 12.20 format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Y</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate in 12.20 format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out interpolated value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7023" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7023" bodyend="7091"/>
      </memberdef>
      <memberdef kind="function" id="group__BilinearInterpolate_1ga16a00a278d5ab41069b1734692ae3a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_FORCEINLINE q7_t</type>
        <definition>__STATIC_FORCEINLINE q7_t riscv_bilinear_interp_q7</definition>
        <argsstring>(riscv_bilinear_interp_instance_q7 *S, q31_t X, q31_t Y)</argsstring>
        <name>riscv_bilinear_interp_q7</name>
        <param>
          <type><ref refid="structriscv__bilinear__interp__instance__q7" kindref="compound">riscv_bilinear_interp_instance_q7</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>X</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>Y</declname>
        </param>
        <briefdescription>
<para>Q7 bilinear interpolation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the interpolation structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">X</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate in 12.20 format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Y</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation coordinate in 12.20 format. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out interpolated value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" line="7101" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h" bodystart="7101" bodyend="7165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/><sp/><sp/><sp/><sp/>riscv_math.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/><sp/>Public<sp/>header<sp/>file<sp/>for<sp/>NMSIS<sp/>DSP<sp/>Library</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>@version<sp/><sp/>V1.6.0</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>@date<sp/><sp/><sp/><sp/><sp/>18.<sp/>March<sp/>2019</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2019<sp/>Arm<sp/>Limited<sp/>or<sp/>its<sp/>affiliates.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>License);<sp/>you<sp/>may</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>AS<sp/>IS<sp/>BASIS,<sp/>WITHOUT</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor">#ifndef<sp/>_RISCV_MATH_H</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_RISCV_MATH_H</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/><sp/>__cplusplus</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compiler<sp/>specific<sp/>diagnostic<sp/>adjustment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/>defined<sp/>(<sp/>__CC_ARM<sp/>)</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>__ARMCC_VERSION<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>__ARMCC_VERSION<sp/>&gt;=<sp/>6010050<sp/>)</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-parameter&quot;</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>__ICCRISCV__<sp/>)</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>__TI_RISCV__<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>__CSMC__<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>__TASKING__<sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(<sp/>_MSC_VER<sp/>)</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>Unknown<sp/>compiler</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Included<sp/>for<sp/>instrinsics<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>(<sp/>_MSC_VER<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__NMSIS_GENERIC</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>(defined<sp/>(__RISCV_FEATURE_DSP)<sp/>&amp;&amp;<sp/>(__RISCV_FEATURE_DSP<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__DSP_PRESENT<sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;nmsis_core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__STATIC_FORCEINLINE<sp/>static<sp/>__forceinline</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__ALIGNED(x)<sp/>__declspec(align(x))</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOW_OPTIMIZATION_ENTER</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOW_OPTIMIZATION_EXIT</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IAR_ONLY_LOW_OPTIMIZATION_ENTER<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IAR_ONLY_LOW_OPTIMIZATION_EXIT</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;float.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>evaluate<sp/>RISCV<sp/>DSP<sp/>feature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined<sp/>(__RISCV_FEATURE_DSP)<sp/>&amp;&amp;<sp/>(__RISCV_FEATURE_DSP<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>RISCV_MATH_DSP</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor">#define<sp/>DELTA_Q31<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x100)</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DELTA_Q15<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INDEX_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0000003F</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>PI</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.14159265358979f</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor">#define<sp/>FAST_MATH_TABLE_SIZE<sp/><sp/>512</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FAST_MATH_Q31_SHIFT<sp/><sp/><sp/>(32<sp/>-<sp/>10)</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FAST_MATH_Q15_SHIFT<sp/><sp/><sp/>(16<sp/>-<sp/>10)</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CONTROLLER_Q31_SHIFT<sp/><sp/>(32<sp/>-<sp/>9)</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TABLE_SPACING_Q31<sp/><sp/><sp/><sp/><sp/>0x400000</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TABLE_SPACING_Q15<sp/><sp/><sp/><sp/><sp/>0x80</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.31(q31)<sp/>Fixed<sp/>value<sp/>of<sp/>2/360<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>-1<sp/>to<sp/>+1<sp/>is<sp/>divided<sp/>into<sp/>360<sp/>values<sp/>so<sp/>total<sp/>spacing<sp/>is<sp/>(2/360)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INPUT_SPACING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xB60B61</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_ARGUMENT_ERROR<sp/>=<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_LENGTH_ERROR<sp/><sp/><sp/>=<sp/>-2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_SIZE_MISMATCH<sp/><sp/>=<sp/>-3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_NANINF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_SINGULAR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-5,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>RISCV_MATH_TEST_FAILURE<sp/><sp/><sp/>=<sp/>-6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}<sp/>riscv_status;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int8_t<sp/>q7_t;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int16_t<sp/>q15_t;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/>q31_t;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int64_t<sp/>q63_t;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float32_t;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>float64_t;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor">#define<sp/>__SIMD32_TYPE<sp/>int32_t</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SIMD32(addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(__SIMD32_TYPE<sp/>**)<sp/>&amp;<sp/>(addr))</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SIMD32_CONST(addr)<sp/><sp/>(<sp/>(__SIMD32_TYPE<sp/>*<sp/>)<sp/><sp/><sp/>(addr))</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_SIMD32_OFFSET(addr)<sp/><sp/>(*(__SIMD32_TYPE<sp/>*<sp/>)<sp/><sp/><sp/>(addr))</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__SIMD64(addr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(<sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>**)<sp/>&amp;<sp/>(addr))</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SIMD<sp/>replacement<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>read_q15x2<sp/>(</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pQ15)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(&amp;val,<sp/>pQ15,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(pQ15)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>read_q15x2_ia<sp/>(</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>q15_t<sp/>**<sp/>pQ15)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(&amp;val,<sp/>*pQ15,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(*pQ15)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>*pQ15<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q63_t<sp/>read_q15x4_ia<sp/>(</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>**<sp/>pQ15)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>val;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>*((q63_t<sp/>*)*pQ15);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pQ15<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>read_q15x2_da<sp/>(</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>q15_t<sp/>**<sp/>pQ15)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(&amp;val,<sp/>*pQ15,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(*pQ15)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>*pQ15<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>read_q15x4_da<sp/>(</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>**<sp/>pQ15)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>*((q63_t<sp/>*)*pQ15);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pQ15<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_q15x2_ia<sp/>(</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>q15_t<sp/>**<sp/>pQ15,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>q31_t<sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//q31_t<sp/>val<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(*pQ15,<sp/>&amp;val,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(*pQ15)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>*pQ15<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_q15x4_ia<sp/>(</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>**<sp/>pQ15,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((q63_t<sp/>*)*pQ15)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pQ15<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_q15x2<sp/>(</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pQ15,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>q31_t<sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(pQ15)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_q15x4<sp/>(</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pQ15,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((q63_t<sp/>*)pQ15)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q63_t<sp/>read_q7x8_ia<sp/>(</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>**<sp/>pQ7)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>val;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>*((q63_t<sp/>*)*pQ7);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pQ7<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>read_q7x4_ia<sp/>(</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>q7_t<sp/>**<sp/>pQ7)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(&amp;val,<sp/>*pQ7,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(*pQ7)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>*pQ7<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/>read_q7x4_da<sp/>(</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>q7_t<sp/>**<sp/>pQ7)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>q31_t<sp/>val;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(&amp;val,<sp/>*pQ7,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal">(val)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(*pQ7)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>*pQ7<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_q7x8_ia<sp/>(</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>**<sp/>pQ7,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((q63_t<sp/>*)*pQ7)<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pQ7<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_q7x4_ia<sp/>(</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>q7_t<sp/>**<sp/>pQ7,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>q31_t<sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>q31_t<sp/>val<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//memcpy<sp/>(*pQ7,<sp/>&amp;val,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sw<sp/>%0,<sp/>(%1)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(value),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">(*pQ7)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pQ7<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor">#define<sp/>__PACKq7(v0,v1,v2,v3)<sp/>(<sp/>(((int32_t)(v0)<sp/>&lt;&lt;<sp/><sp/>0)<sp/>&amp;<sp/>(int32_t)0x000000FF)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((int32_t)(v1)<sp/>&lt;&lt;<sp/><sp/>8)<sp/>&amp;<sp/>(int32_t)0x0000FF00)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((int32_t)(v2)<sp/>&lt;&lt;<sp/>16)<sp/>&amp;<sp/>(int32_t)0x00FF0000)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((int32_t)(v3)<sp/>&lt;&lt;<sp/>24)<sp/>&amp;<sp/>(int32_t)0xFF000000)<sp/><sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q31_t<sp/>clip_q63_to_q31(</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>q63_t<sp/>x)</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((q31_t)<sp/>(x<sp/>&gt;&gt;<sp/>32)<sp/>!=<sp/>((q31_t)<sp/>x<sp/>&gt;&gt;<sp/>31))<sp/>?</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((0x7FFFFFFF<sp/>^<sp/>((q31_t)<sp/>(x<sp/>&gt;&gt;<sp/>63))))<sp/>:<sp/>(q31_t)<sp/>x;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q15_t<sp/>clip_q63_to_q15(</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>q63_t<sp/>x)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((q31_t)<sp/>(x<sp/>&gt;&gt;<sp/>32)<sp/>!=<sp/>((q31_t)<sp/>x<sp/>&gt;&gt;<sp/>31))<sp/>?</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((0x7FFF<sp/>^<sp/>((q15_t)<sp/>(x<sp/>&gt;&gt;<sp/>63))))<sp/>:<sp/>(q15_t)<sp/>(x<sp/>&gt;&gt;<sp/>15);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q7_t<sp/>clip_q31_to_q7(</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>q31_t<sp/>x)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((q31_t)<sp/>(x<sp/>&gt;&gt;<sp/>24)<sp/>!=<sp/>((q31_t)<sp/>x<sp/>&gt;&gt;<sp/>23))<sp/>?</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((0x7F<sp/>^<sp/>((q7_t)<sp/>(x<sp/>&gt;&gt;<sp/>31))))<sp/>:<sp/>(q7_t)<sp/>x;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q15_t<sp/>clip_q31_to_q15(</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>q31_t<sp/>x)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((q31_t)<sp/>(x<sp/>&gt;&gt;<sp/>16)<sp/>!=<sp/>((q31_t)<sp/>x<sp/>&gt;&gt;<sp/>15))<sp/>?</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((0x7FFF<sp/>^<sp/>((q15_t)<sp/>(x<sp/>&gt;&gt;<sp/>31))))<sp/>:<sp/>(q15_t)<sp/>x;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q63_t<sp/>mult32x64(</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>q63_t<sp/>x,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>q31_t<sp/>y)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((((q63_t)<sp/>(x<sp/>&amp;<sp/>0x00000000FFFFFFFF)<sp/>*<sp/>y)<sp/>&gt;&gt;<sp/>32)<sp/>+</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((q63_t)<sp/>(x<sp/>&gt;&gt;<sp/>32)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>riscv_recip_q31(</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>in,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>dst,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pRecipTable)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>out;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tempVal;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>index,<sp/>i;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>signBits;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signBits<sp/>=<sp/>((uint32_t)<sp/>(__CLZ(<sp/>in)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signBits<sp/>=<sp/>((uint32_t)<sp/>(__CLZ(-in)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>input<sp/>sample<sp/>to<sp/>1.31<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>(in<sp/>&lt;&lt;<sp/>signBits);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculation<sp/>of<sp/>index<sp/>for<sp/>initial<sp/>approximated<sp/>Val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(uint32_t)(in<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(index<sp/>&amp;<sp/>INDEX_MASK);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.31<sp/>with<sp/>exp<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pRecipTable[index];</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculation<sp/>of<sp/>reciprocal<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>running<sp/>approximation<sp/>for<sp/>two<sp/>iterations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>2U;<sp/>i++)</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempVal<sp/>=<sp/>(uint32_t)<sp/>(((q63_t)<sp/>in<sp/>*<sp/>out)<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempVal<sp/>=<sp/>0x7FFFFFFFu<sp/>-<sp/>tempVal;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>1.31<sp/>with<sp/>exp<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>out<sp/>*<sp/>tempVal)<sp/>&gt;&gt;<sp/>30);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>clip_q63_to_q31(((q63_t)<sp/>out<sp/>*<sp/>tempVal)<sp/>&gt;&gt;<sp/>30);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>*dst<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>num<sp/>of<sp/>signbits<sp/>of<sp/>out<sp/>=<sp/>1/in<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(signBits<sp/>+<sp/>1U);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>riscv_recip_q15(</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>in,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>dst,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pRecipTable)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tempVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>signBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signBits<sp/>=<sp/>((uint32_t)(__CLZ(<sp/>in)<sp/>-<sp/>17));</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signBits<sp/>=<sp/>((uint32_t)(__CLZ(-in)<sp/>-<sp/>17));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>input<sp/>sample<sp/>to<sp/>1.15<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>(in<sp/>&lt;&lt;<sp/>signBits);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculation<sp/>of<sp/>index<sp/>for<sp/>initial<sp/>approximated<sp/>Val<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(uint32_t)(in<sp/>&gt;&gt;<sp/><sp/>8);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(index<sp/>&amp;<sp/>INDEX_MASK);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>1.15<sp/>with<sp/>exp<sp/>1<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>pRecipTable[index];</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculation<sp/>of<sp/>reciprocal<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>running<sp/>approximation<sp/>for<sp/>two<sp/>iterations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0U;<sp/>i<sp/>&lt;<sp/>2U;<sp/>i++)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempVal<sp/>=<sp/>(uint32_t)<sp/>(((q31_t)<sp/>in<sp/>*<sp/>out)<sp/>&gt;&gt;<sp/>15);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempVal<sp/>=<sp/>0x7FFFu<sp/>-<sp/>tempVal;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>1.15<sp/>with<sp/>exp<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q15_t)<sp/>(((q31_t)<sp/>out<sp/>*<sp/>tempVal)<sp/>&gt;&gt;<sp/>14);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>=<sp/>clip_q31_to_q15(((q31_t)<sp/>out<sp/>*<sp/>tempVal)<sp/>&gt;&gt;<sp/>14);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>*dst<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>num<sp/>of<sp/>signbits<sp/>of<sp/>out<sp/>=<sp/>1/in<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(signBits<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RISCV_MATH_NEON)</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>float32x4_t<sp/>__riscv_vec_sqrt_f32_neon(float32x4_t<sp/><sp/>x)</highlight></codeline>
<codeline lineno="786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>float32x4_t<sp/>x1<sp/>=<sp/>vmaxq_f32(x,<sp/>vdupq_n_f32(FLT_MIN));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>float32x4_t<sp/>e<sp/>=<sp/>vrsqrteq_f32(x1);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>vmulq_f32(vrsqrtsq_f32(vmulq_f32(x1,<sp/>e),<sp/>e),<sp/>e);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>vmulq_f32(vrsqrtsq_f32(vmulq_f32(x1,<sp/>e),<sp/>e),<sp/>e);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vmulq_f32(x,<sp/>e);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int16x8_t<sp/>__riscv_vec_sqrt_q15_neon(int16x8_t<sp/>vec)</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>float32x4_t<sp/>tempF;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>int32x4_t<sp/>tempHI,tempLO;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>tempLO<sp/>=<sp/>vmovl_s16(vget_low_s16(vec));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>tempF<sp/>=<sp/>vcvtq_n_f32_s32(tempLO,15);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>tempF<sp/>=<sp/>__riscv_vec_sqrt_f32_neon(tempF);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>tempLO<sp/>=<sp/>vcvtq_n_s32_f32(tempF,15);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>tempHI<sp/>=<sp/>vmovl_s16(vget_high_s16(vec));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>tempF<sp/>=<sp/>vcvtq_n_f32_s32(tempHI,15);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>tempF<sp/>=<sp/>__riscv_vec_sqrt_f32_neon(tempF);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>tempHI<sp/>=<sp/>vcvtq_n_s32_f32(tempF,15);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(vcombine_s16(vqmovn_s32(tempLO),vqmovn_s32(tempHI)));</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32x4_t<sp/>__riscv_vec_sqrt_q31_neon(int32x4_t<sp/>vec)</highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>float32x4_t<sp/>temp;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>vcvtq_n_f32_s32(vec,31);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>__riscv_vec_sqrt_f32_neon(temp);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(vcvtq_n_s32_f32(temp,31));</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>intrinsic<sp/>functions</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>(RISCV_MATH_DSP)</highlight></codeline>
<codeline lineno="827"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QADD8</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__QADD8(</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s,<sp/>t,<sp/>u;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>24)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/><sp/>8)<sp/>&gt;&gt;<sp/>24)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/><sp/>8)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>__SSAT(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>24)<sp/>+<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((u<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(t<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(s<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QSUB8</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__QSUB8(</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s,<sp/>t,<sp/>u;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>24)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/><sp/>8)<sp/>&gt;&gt;<sp/>24)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/><sp/>8)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>__SSAT(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>24)<sp/>-<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>24)),<sp/>8)<sp/>&amp;<sp/>(int32_t)0x000000FF;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((u<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(t<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(s<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QADD16</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__QADD16(</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>q31_t<sp/>r,<sp/><sp/><sp/><sp/><sp/>s;<sp/><sp/>without<sp/>initialisation<sp/>&apos;riscv_offset_q15<sp/>test&apos;<sp/>fails<sp/><sp/>but<sp/>&apos;intrinsic&apos;<sp/>tests<sp/>pass!<sp/>for<sp/>armCC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r<sp/>=<sp/>0,<sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>__SSAT(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SHADD16</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SHADD16(</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QSUB16</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__QSUB16(</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>__SSAT(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SHSUB16</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SHSUB16(</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QASX</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__QASX(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>__SSAT(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SHASX</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SHASX(</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QSAX</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__QSAX(</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>__SSAT(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>__SSAT(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)),<sp/>16)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SHSAX</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SHSAX(</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>-<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>(int32_t)0x0000FFFF;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)((s<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(r<sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMUSDX</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMUSDX(</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>-</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMUADX</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMUADX(</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QADD</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>int32_t<sp/>__QADD(</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>int32_t<sp/>x,</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>int32_t<sp/>y)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((int32_t)(clip_q63_to_q31((q63_t)x<sp/>+<sp/>(q31_t)y)));</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>QSUB</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>int32_t<sp/>__QSUB(</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>int32_t<sp/>x,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>int32_t<sp/>y)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((int32_t)(clip_q63_to_q31((q63_t)x<sp/>-<sp/>(q31_t)y)));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMLAD</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMLAD(</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sum)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((q31_t)sum<sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMLADX</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMLADX(</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sum)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((q31_t)sum<sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMLSDX</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMLSDX(</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sum)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>-</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((q31_t)sum<sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMLALD</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint64_t<sp/>__SMLALD(</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>uint64_t<sp/>sum)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>return<sp/>(sum<sp/>+<sp/>((q15_t)<sp/>(x<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(q15_t)<sp/>(y<sp/>&gt;&gt;<sp/>16))<sp/>+<sp/>((q15_t)<sp/>x<sp/>*<sp/>(q15_t)<sp/>y));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint64_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((q63_t)sum<sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMLALDX</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint64_t<sp/>__SMLALDX(</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>uint64_t<sp/>sum)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>return<sp/>(sum<sp/>+<sp/>((q15_t)<sp/>(x<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(q15_t)<sp/>y))<sp/>+<sp/>((q15_t)<sp/>x<sp/>*<sp/>(q15_t)<sp/>(y<sp/>&gt;&gt;<sp/>16));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint64_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((q63_t)sum<sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMUAD</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMUAD(</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>+</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMUSD</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SMUSD(</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>uint32_t<sp/>y)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/>&lt;&lt;<sp/>16)<sp/>&gt;&gt;<sp/>16))<sp/>-</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>(((q31_t)y<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&gt;&gt;<sp/>16))<sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SXTB16</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>uint32_t<sp/>__SXTB16(</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>uint32_t<sp/>x)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)(((((q31_t)x<sp/>&lt;&lt;<sp/>24)<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>(q31_t)0x0000FFFF)<sp/>|</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((q31_t)x<sp/>&lt;&lt;<sp/><sp/>8)<sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>(q31_t)0xFFFF0000)<sp/><sp/>));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@brief<sp/>C<sp/>custom<sp/>defined<sp/>SMMLA</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>int32_t<sp/>__SMMLA(</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>int32_t<sp/>x,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>int32_t<sp/>y,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>int32_t<sp/>sum)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sum<sp/>+<sp/>(int32_t)<sp/>(((int64_t)<sp/>x<sp/>*<sp/>y)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!defined<sp/>(RISCV_MATH_DSP)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161" refid="structriscv__fir__instance__q7" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__instance__q7" kindref="compound">riscv_fir_instance_q7</ref>;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171" refid="structriscv__fir__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref>;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181" refid="structriscv__fir__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref>;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191" refid="structriscv__fir__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__instance__f32" kindref="compound">riscv_fir_instance_f32</ref>;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1gaaff318c4988ee737e847feee8afab3d5" kindref="member">riscv_fir_q7</ref>(</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__instance__q7" kindref="compound">riscv_fir_instance_q7</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1gae23d333a0ce67c25a40f56b14e6b4c65" kindref="member">riscv_fir_init_q7</ref>(</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__instance__q7" kindref="compound">riscv_fir_instance_q7</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1ga8df4a826bbe755b7b0efa9615bf4df49" kindref="member">riscv_fir_q15</ref>(</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1ga1797bd3279a9f58d181bc51ad66f06dc" kindref="member">riscv_fir_fast_q15</ref>(</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__FIR_1ga4ff373438cd370b20a26ab7d3f8a5206" kindref="member">riscv_fir_init_q15</ref>(</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__instance__q15" kindref="compound">riscv_fir_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1ga5ab3142de031afd37695e2ac09c880d1" kindref="member">riscv_fir_q31</ref>(</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1gaf3afcaa386694efed94fd250f07a54ad" kindref="member">riscv_fir_fast_q31</ref>(</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1ga20b9154a895a31aabdf745c7a98b16ea" kindref="member">riscv_fir_init_q31</ref>(</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__instance__q31" kindref="compound">riscv_fir_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1ga9609646d34fdf7b619a1dd845058e495" kindref="member">riscv_fir_f32</ref>(</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__instance__f32" kindref="compound">riscv_fir_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR_1gabc32b5613cbace1478d28da3654fd357" kindref="member">riscv_fir_init_f32</ref>(</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__instance__f32" kindref="compound">riscv_fir_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342" refid="structriscv__biquad__casd__df1__inst__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>postShift;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref>;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353" refid="structriscv__biquad__casd__df1__inst__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref>;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364" refid="structriscv__biquad__casd__df1__inst__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref>;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1ga51d1bc8c536ec95a274807dbf6b4c747" kindref="member">riscv_biquad_cascade_df1_q15</ref>(</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1gad0f11309749f0135467c1b476d5a05b8" kindref="member">riscv_biquad_cascade_df1_init_q15</ref>(</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>postShift);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1gaaaa59376091d7b8caf6116de4e68f28b" kindref="member">riscv_biquad_cascade_df1_fast_q15</ref>(</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1ga9db8b6490e760bcbb86366385ffd7a5b" kindref="member">riscv_biquad_cascade_df1_q31</ref>(</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1gaed838e1892c406620fbb0e131e273d8d" kindref="member">riscv_biquad_cascade_df1_fast_q31</ref>(</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" kindref="member">riscv_biquad_cascade_df1_init_q31</ref>(</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>postShift);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1gac9bd447ab6475b0bbe7aaf14b0a4c6ee" kindref="member">riscv_biquad_cascade_df1_f32</ref>(</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1_1ga3cdfc93d24e61bf7c88d3d51f01cb73a" kindref="member">riscv_biquad_cascade_df1_init_f32</ref>(</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482" refid="structriscv__matrix__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref>;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493" refid="structriscv__matrix__instance__f64" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>float64_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__matrix__instance__f64" kindref="compound">riscv_matrix_instance_f64</ref>;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503" refid="structriscv__matrix__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513" refid="structriscv__matrix__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref>;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixAdd_1gabfdad4197bfca4e75133d8328e41f8fc" kindref="member">riscv_mat_add_f32</ref>(</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixAdd_1ga99a2735b64d77826022397e66272ce92" kindref="member">riscv_mat_add_q15</ref>(</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixAdd_1ga60b6ca8480aa4eb4be0235b133702d94" kindref="member">riscv_mat_add_q31</ref>(</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal">riscv_status<sp/><ref refid="group__CmplxMatrixMult_1gaefc3c7a3dba4761e5539f212124500c5" kindref="member">riscv_mat_cmplx_mult_f32</ref>(</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal">riscv_status<sp/><ref refid="group__CmplxMatrixMult_1ga38acb81acbd0dce4f1eb4bf533647181" kindref="member">riscv_mat_cmplx_mult_q15</ref>(</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal">riscv_status<sp/><ref refid="group__CmplxMatrixMult_1gab4de134e992a9fbb53bff2965ad72cc6" kindref="member">riscv_mat_cmplx_mult_q31</ref>(</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixTrans_1gae9c3388323897b322f6bd136d52f0a64" kindref="member">riscv_mat_trans_f32</ref>(</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixTrans_1gaf3a6e089ca08fe48cc387d987d08dfea" kindref="member">riscv_mat_trans_q15</ref>(</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixTrans_1gaf42658e8941fb98465ca722d90d452e5" kindref="member">riscv_mat_trans_q31</ref>(</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixMult_1ga0f1c7b30e1c552617b8bb6a6898e57d4" kindref="member">riscv_mat_mult_f32</ref>(</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixMult_1gaccc2ce7b1bdbffa4332ae95d1151a5f7" kindref="member">riscv_mat_mult_q15</ref>(</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixMult_1ga39f8eb0440c425a21ae4ee04b0bdb0c1" kindref="member">riscv_mat_mult_fast_q15</ref>(</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixMult_1ga0e5d2a6760fda6dad3a1f159d8d4d45e" kindref="member">riscv_mat_mult_q31</ref>(</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixMult_1ga84068b1bbb318d532690735db534edf6" kindref="member">riscv_mat_mult_fast_q31</ref>(</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixSub_1gab035be0f902e03f857e7161d603cc130" kindref="member">riscv_mat_sub_f32</ref>(</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixSub_1ga2d0e8484cb1c8b3252307abffd4c5664" kindref="member">riscv_mat_sub_q15</ref>(</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixSub_1ga09b9e40794c869340710b03966a95710" kindref="member">riscv_mat_sub_q31</ref>(</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixScale_1gad025b0b8b1424e42dd4b0b0d88db2db8" kindref="member">riscv_mat_scale_f32</ref>(</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>scale,</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixScale_1ga18f1d6575425214ce9eaec5a8362436f" kindref="member">riscv_mat_scale_q15</ref>(</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>scaleFract,</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>shift,</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal">riscv_status<sp/><ref refid="group__MatrixScale_1gaa8bead3b36fc7aeed7fa2579dbe403a5" kindref="member">riscv_mat_scale_q31</ref>(</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>scaleFract,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>shift,</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MatrixInit_1gaa331509280e01b0d5a291a3edc3445a8" kindref="member">riscv_mat_init_q31</ref>(</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nRows,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nColumns,</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pData);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MatrixInit_1ga898e2982d889ba9c78de91066e72bd52" kindref="member">riscv_mat_init_q15</ref>(</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nRows,</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nColumns,</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pData);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MatrixInit_1gadd1996f7da2fd9f19a6e2f3e691b681f" kindref="member">riscv_mat_init_f32</ref>(</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nRows,</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>nColumns,</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pData);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826" refid="structriscv__pid__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>A0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1829"><highlight class="preprocessor">#if<sp/>!defined<sp/>(RISCV_MATH_DSP)</highlight></codeline>
<codeline lineno="1830"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>A1;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>A2;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1833"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>A1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1834"><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1835"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>state[3];<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>Kp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>Ki;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>Kd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref>;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844" refid="structriscv__pid__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>A0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>A1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>A2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>state[3];<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>Kp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>Ki;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>Kd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref>;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858" refid="structriscv__pid__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>A0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>A1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>A2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>state[3];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>Kp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>Ki;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>Kd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref>;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PID_1ga88096786fde77479ae2fc7f0b4a060b1" kindref="member">riscv_pid_init_f32</ref>(</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>resetStateFlag);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PID_1ga436fc2266fe54087bc8b203eb675087c" kindref="member">riscv_pid_reset_f32</ref>(</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref><sp/>*<sp/>S);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PID_1ga2ca8b149095d04d8dc73e4a052be1c8c" kindref="member">riscv_pid_init_q31</ref>(</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>resetStateFlag);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PID_1ga9014e1ffacd82a5ecf90f11aa626caab" kindref="member">riscv_pid_reset_q31</ref>(</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref><sp/>*<sp/>S);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PID_1ga3addd5e4ea6d8aeaf4f1ecd7cf5c6c01" kindref="member">riscv_pid_init_q15</ref>(</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>resetStateFlag);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__PID_1gaf85e1dc20d915a787ce687e1a80f2bdc" kindref="member">riscv_pid_reset_q15</ref>(</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref><sp/>*<sp/>S);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929" refid="structriscv__linear__interp__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nValues;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>x1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>xSpacing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pYData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__linear__interp__instance__f32" kindref="compound">riscv_linear_interp_instance_f32</ref>;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940" refid="structriscv__bilinear__interp__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pData;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__bilinear__interp__instance__f32" kindref="compound">riscv_bilinear_interp_instance_f32</ref>;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950" refid="structriscv__bilinear__interp__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__bilinear__interp__instance__q31" kindref="compound">riscv_bilinear_interp_instance_q31</ref>;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960" refid="structriscv__bilinear__interp__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__bilinear__interp__instance__q15" kindref="compound">riscv_bilinear_interp_instance_q15</ref>;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970" refid="structriscv__bilinear__interp__instance__q7" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numRows;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numCols;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*pData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__bilinear__interp__instance__q7" kindref="compound">riscv_bilinear_interp_instance_q7</ref>;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicMult_1ga1845c38508f4157faa0fac3b104a0fae" kindref="member">riscv_mult_q7</ref>(</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicMult_1gacb33f56ed33bd4f1b09042defa89cef6" kindref="member">riscv_mult_q15</ref>(</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicMult_1ga6417e0441c17cf0bf524ba032cc89681" kindref="member">riscv_mult_q31</ref>(</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicMult_1gae63353652b163647d48e82dae770d751" kindref="member">riscv_mult_f32</ref>(</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037" refid="structriscv__cfft__radix2__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>twidCoefModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__radix2__instance__q15" kindref="compound">riscv_cfft_radix2_instance_q15</ref>;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__ComplexFFT_1gacad6e8ca43f6349539c22241654573a3" kindref="member">riscv_cfft_radix2_init_q15</ref>(</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix2__instance__q15" kindref="compound">riscv_cfft_radix2_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen,</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1gab7cdf99ddd1bb7d03634d20d6c2773f9" kindref="member">riscv_cfft_radix2_q15</ref>(</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__radix2__instance__q15" kindref="compound">riscv_cfft_radix2_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pSrc);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064" refid="structriscv__cfft__radix4__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>twidCoefModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref>;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__ComplexFFT_1ga064e7bc238432770e9e56ad0f8016b55" kindref="member">riscv_cfft_radix4_init_q15</ref>(</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen,</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga47697317fa5f9f6bca6aa77813743a7d" kindref="member">riscv_cfft_radix4_q15</ref>(</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pSrc);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090" refid="structriscv__cfft__radix2__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>twidCoefModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__radix2__instance__q31" kindref="compound">riscv_cfft_radix2_instance_q31</ref>;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__ComplexFFT_1gaf86c4dc08d643e0aa7a9b056287c0857" kindref="member">riscv_cfft_radix2_init_q31</ref>(</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix2__instance__q31" kindref="compound">riscv_cfft_radix2_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen,</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1gae1cc226afadc65fe0d56a9693c703dc4" kindref="member">riscv_cfft_radix2_q31</ref>(</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__radix2__instance__q31" kindref="compound">riscv_cfft_radix2_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pSrc);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116" refid="structriscv__cfft__radix4__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>twidCoefModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref>;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga3bb0236efa7373a44c5ac9224fc143b8" kindref="member">riscv_cfft_radix4_q31</ref>(</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pSrc);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__ComplexFFT_1gacc883cc192d4c36fb74119ef4dbd744b" kindref="member">riscv_cfft_radix4_init_q31</ref>(</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142" refid="structriscv__cfft__radix2__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>twidCoefModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>onebyfftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__radix2__instance__f32" kindref="compound">riscv_cfft_radix2_instance_f32</ref>;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__ComplexFFT_1gae9048c940cbb81c70035ce08ea2fa09d" kindref="member">riscv_cfft_radix2_init_f32</ref>(</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix2__instance__f32" kindref="compound">riscv_cfft_radix2_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen,</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga16cc33ddd8ed2dfaf23b9abb0c28cc95" kindref="member">riscv_cfft_radix2_f32</ref>(</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__radix2__instance__f32" kindref="compound">riscv_cfft_radix2_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pSrc);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169" refid="structriscv__cfft__radix4__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>twidCoefModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>onebyfftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref>;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__ComplexFFT_1ga3b1ebc22002732736620feb0b725e9fb" kindref="member">riscv_cfft_radix4_init_f32</ref>(</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen,</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Deprecated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga07d1cb586d6c9553c7e9e4aa05fe9320" kindref="member">riscv_cfft_radix4_f32</ref>(</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pSrc);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196" refid="structriscv__cfft__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__instance__q15" kindref="compound">riscv_cfft_instance_q15</ref>;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga264c98d1748ec1c5cfd561194df73059" kindref="member">riscv_cfft_q15</ref>(</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__instance__q15" kindref="compound">riscv_cfft_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>p1,</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213" refid="structriscv__cfft__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__instance__q31" kindref="compound">riscv_cfft_instance_q31</ref>;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga5ff7e02a685c0cf6b0a93642488b4000" kindref="member">riscv_cfft_q31</ref>(</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__instance__q31" kindref="compound">riscv_cfft_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>p1,</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230" refid="structriscv__cfft__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*pBitRevTable;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bitRevLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__cfft__instance__f32" kindref="compound">riscv_cfft_instance_f32</ref>;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ComplexFFT_1ga2e7afb704493463708fb1404c7a5bb5a" kindref="member">riscv_cfft_f32</ref>(</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__instance__f32" kindref="compound">riscv_cfft_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>p1,</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag,</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247" refid="structriscv__rfft__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fftLenReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlagR;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlagR;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>twidCoefRModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pTwiddleAReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pTwiddleBReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__instance__q15" kindref="compound">riscv_cfft_instance_q15</ref><sp/>*pCfft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref>;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__RealFFT_1gad750a06797c4caf68f66d260eb0e2c89" kindref="member">riscv_rfft_init_q15</ref>(</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fftLenReal,</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ifftFlagR,</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RealFFT_1gac6c836bb35dcbdd2a96d38ae9bfadd7f" kindref="member">riscv_rfft_q15</ref>(</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272" refid="structriscv__rfft__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fftLenReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlagR;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlagR;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>twidCoefRModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pTwiddleAReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pTwiddleBReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__cfft__instance__q31" kindref="compound">riscv_cfft_instance_q31</ref><sp/>*pCfft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref>;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__RealFFT_1ga9580b4195023f20ddbad0ac8d7719154" kindref="member">riscv_rfft_init_q31</ref>(</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fftLenReal,</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ifftFlagR,</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RealFFT_1ga1128bf1b0b16f271b593a1d94bb9c4ff" kindref="member">riscv_rfft_q31</ref>(</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297" refid="structriscv__rfft__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fftLenReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLenBy2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlagR;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bitReverseFlagR;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>twidCoefRModifier;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pTwiddleAReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pTwiddleBReal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref><sp/>*pCfft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref>;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__RealFFT_1ga84650b5ce6836a7cd0f0fc9da41fb3cf" kindref="member">riscv_rfft_init_f32</ref>(</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref><sp/>*<sp/>S_CFFT,</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fftLenReal,</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ifftFlagR,</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bitReverseFlag);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RealFFT_1ga15270da93ab349377512694e2704a324" kindref="member">riscv_rfft_f32</ref>(</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324" refid="structriscv__rfft__fast__instance__f32" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__instance__f32" kindref="compound">riscv_cfft_instance_f32</ref><sp/>Sint;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLenRFFT;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pTwiddleRFFT;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1gaa09af308fb200adedfaebdd7ca4f57cf" kindref="member">riscv_rfft_fast_init_f32</ref><sp/>(</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>fftLen);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1gafb139a61734e7cc86971714fa26a547c" kindref="member">riscv_rfft_32_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1gad58e01e3ab5a0aa7fbb5947e267202f5" kindref="member">riscv_rfft_64_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1ga0c8d9759ed529cd4224aba76c683e0f2" kindref="member">riscv_rfft_128_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1ga49b1cb13f35ce303843f300933784357" kindref="member">riscv_rfft_256_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1ga4568a1375a971e1f2f7797478e60925f" kindref="member">riscv_rfft_512_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1ga081703eafa8b29aba22399ced5080605" kindref="member">riscv_rfft_1024_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1gac0d553058b5061e85fd4ef4c4ad6060e" kindref="member">riscv_rfft_2048_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal">riscv_status<sp/><ref refid="group__RealFFT_1ga58ccd3e5aacb1136b8539e81195cbea3" kindref="member">riscv_rfft_4096_fast_init_f32</ref><sp/>(<sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S<sp/>);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RealFFT_1ga7826c95c1a0f791c1b6e348b48d94658" kindref="member">riscv_rfft_fast_f32</ref>(</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__fast__instance__f32" kindref="compound">riscv_rfft_fast_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>p,<sp/>float32_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ifftFlag);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360" refid="structriscv__dct4__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>N;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>Nby2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>normalize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCosFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref><sp/>*pRfft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref><sp/>*pCfft;<sp/></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__dct4__instance__f32" kindref="compound">riscv_dct4_instance_f32</ref>;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__DCT4__IDCT4_1gac8e0136f9dec411d05bf7c684dfc0395" kindref="member">riscv_dct4_init_f32</ref>(</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__dct4__instance__f32" kindref="compound">riscv_dct4_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__f32" kindref="compound">riscv_rfft_instance_f32</ref><sp/>*<sp/>S_RFFT,</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__f32" kindref="compound">riscv_cfft_radix4_instance_f32</ref><sp/>*<sp/>S_CFFT,</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>N,</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>Nby2,</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>normalize);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DCT4__IDCT4_1ga50ce68671108e95984121f7eb9e57c06" kindref="member">riscv_dct4_f32</ref>(</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__dct4__instance__f32" kindref="compound">riscv_dct4_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pInlineBuffer);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406" refid="structriscv__dct4__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>N;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>Nby2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>normalize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCosFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref><sp/>*pRfft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref><sp/>*pCfft;<sp/></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__dct4__instance__q31" kindref="compound">riscv_dct4_instance_q31</ref>;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__DCT4__IDCT4_1ga5561b5f47987be3c7e4837c4c3292500" kindref="member">riscv_dct4_init_q31</ref>(</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__dct4__instance__q31" kindref="compound">riscv_dct4_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__q31" kindref="compound">riscv_rfft_instance_q31</ref><sp/>*<sp/>S_RFFT,</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__q31" kindref="compound">riscv_cfft_radix4_instance_q31</ref><sp/>*<sp/>S_CFFT,</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>N,</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>Nby2,</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>normalize);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DCT4__IDCT4_1ga7e8a6565ae2b938959d5d844610afe82" kindref="member">riscv_dct4_q31</ref>(</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__dct4__instance__q31" kindref="compound">riscv_dct4_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pInlineBuffer);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2452" refid="structriscv__dct4__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>N;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>Nby2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>normalize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pTwiddle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCosFactor;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref><sp/>*pRfft;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref><sp/>*pCfft;<sp/></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__dct4__instance__q15" kindref="compound">riscv_dct4_instance_q15</ref>;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__DCT4__IDCT4_1gadb08ffdc26604e45aca6b713728bf167" kindref="member">riscv_dct4_init_q15</ref>(</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__dct4__instance__q15" kindref="compound">riscv_dct4_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__rfft__instance__q15" kindref="compound">riscv_rfft_instance_q15</ref><sp/>*<sp/>S_RFFT,</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__cfft__radix4__instance__q15" kindref="compound">riscv_cfft_radix4_instance_q15</ref><sp/>*<sp/>S_CFFT,</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>N,</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>Nby2,</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>normalize);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DCT4__IDCT4_1gad26cd42b92834f519f43eca88ed88f50" kindref="member">riscv_dct4_q15</ref>(</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__dct4__instance__q15" kindref="compound">riscv_dct4_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pInlineBuffer);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAdd_1ga11b757065b1c8aa1cef4a59594e4ecf0" kindref="member">riscv_add_f32</ref>(</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAdd_1gad89f108e3eb726cf05ffa61f5aed28c3" kindref="member">riscv_add_q7</ref>(</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAdd_1gac3bc9d2b997e9b8cd6a0ed84e7bcc530" kindref="member">riscv_add_q15</ref>(</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAdd_1ga39ad2da3e6383a752fd1ba8c32f93e05" kindref="member">riscv_add_q31</ref>(</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicSub_1ga2e1928fe086fbaea97c86fc3028d6c85" kindref="member">riscv_sub_f32</ref>(</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicSub_1ga2bb3ef72bd6eac9d8cc1b3c5d6331272" kindref="member">riscv_sub_q7</ref>(</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicSub_1ga223db4bffe28ecdfbe749b8293081d7e" kindref="member">riscv_sub_q15</ref>(</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicSub_1ga30d054121f997f7841f01c03ecb31ec8" kindref="member">riscv_sub_q31</ref>(</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicScale_1ga7ca2deeac250c6fb6c6bb2796bc15ba6" kindref="member">riscv_scale_f32</ref>(</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>scale,</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicScale_1ga41758c89febae083e09638194f0a9aaf" kindref="member">riscv_scale_q7</ref>(</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>scaleFract,</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>shift,</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicScale_1gaf690da22beaf9f35c55e057bcbd46ab2" kindref="member">riscv_scale_q15</ref>(</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>scaleFract,</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>shift,</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicScale_1gae8dab424d4d97e475a3d14336d177a6a" kindref="member">riscv_scale_q31</ref>(</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>scaleFract,</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>shift,</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAbs_1ga8abfd42f4e7e10ea466dfdb6d4aa0419" kindref="member">riscv_abs_q7</ref>(</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAbs_1ga4a0cc36e5ca532df6ec097699347769d" kindref="member">riscv_abs_f32</ref>(</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAbs_1ga5a71332eb36df3411daf671a72cf8da5" kindref="member">riscv_abs_q15</ref>(</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicAbs_1ga372637ba716226615548fb05943f6f1a" kindref="member">riscv_abs_q31</ref>(</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicDotProd_1gade83dc52739721f1b3b28f1485a1d73e" kindref="member">riscv_dot_prod_f32</ref>(</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>result);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicDotProd_1ga94b781f333bbccd4c5901da6fefb6458" kindref="member">riscv_dot_prod_q7</ref>(</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>result);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicDotProd_1ga96cb833c8f4589f8f2dd04319c7fc176" kindref="member">riscv_dot_prod_q15</ref>(</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>result);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicDotProd_1ga9684c131effb1a08bc4e562ec3439513" kindref="member">riscv_dot_prod_q31</ref>(</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>result);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicShift_1gacb31cecc3cb6800f583a03898ad4f9f1" kindref="member">riscv_shift_q7</ref>(</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>shiftBits,</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicShift_1ga56c338a145652565944ab76e56f12355" kindref="member">riscv_shift_q15</ref>(</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>shiftBits,</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicShift_1ga685be7695f2fef9bca1fec96f3ca8c80" kindref="member">riscv_shift_q31</ref>(</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>shiftBits,</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicOffset_1gad72716bfc95d745db84d40b018dc4121" kindref="member">riscv_offset_f32</ref>(</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>offset,</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicOffset_1ga8a98347d15b44943a193e69fe629ee86" kindref="member">riscv_offset_q7</ref>(</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>offset,</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicOffset_1gac5b374a633b8aa139db81238318a6a8b" kindref="member">riscv_offset_q15</ref>(</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>offset,</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicOffset_1gaaeb86298dd16090e6e883377c36547a8" kindref="member">riscv_offset_q31</ref>(</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>offset,</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicNegate_1ga974fe2ecaa88bb5a48fca3060dc9f8ca" kindref="member">riscv_negate_f32</ref>(</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicNegate_1gaca44221f6e59394b7142348be1638074" kindref="member">riscv_negate_q7</ref>(</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicNegate_1ga878b418d434279b597e3866c74287793" kindref="member">riscv_negate_q15</ref>(</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BasicNegate_1gaa689f3dc9d8c9124ef6aa91c35fa29c7" kindref="member">riscv_negate_q31</ref>(</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__copy_1ga2f4fb0541b4d514df044e543c6abfeb3" kindref="member">riscv_copy_f32</ref>(</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__copy_1ga509f59f22d81b17cbb11be2d6063d41b" kindref="member">riscv_copy_q7</ref>(</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__copy_1ga93d1502bf667beae19ce3e43004dbbf9" kindref="member">riscv_copy_q15</ref>(</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__copy_1ga1bce540573749f4f157f994750f4b7fc" kindref="member">riscv_copy_q31</ref>(</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Fill_1ga30d123e67c9f6d27f74dae20a4630241" kindref="member">riscv_fill_f32</ref>(</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>value,</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Fill_1gac6158a496abf28d50978c2f6e8121e76" kindref="member">riscv_fill_q7</ref>(</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>value,</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Fill_1gad52d58e9ceff23247782b07e03bee9cb" kindref="member">riscv_fill_q15</ref>(</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>value,</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Fill_1gaae3243b4d552b032970c72360df35eb2" kindref="member">riscv_fill_q31</ref>(</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>value,</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga255e63f21abd45fd7c662ddf3b88749d" kindref="member">riscv_conv_f32</ref>(</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga01914598d6bd01a7861ce6dade56f4f0" kindref="member">riscv_conv_opt_q15</ref>(</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1gaf2a77c8c94352f24489f454742be5a76" kindref="member">riscv_conv_q15</ref>(</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga13e44a44eeaffe2ad3b87e8553b3cf40" kindref="member">riscv_conv_fast_q15</ref>(</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga0f3521c46571eed092375bbd6a2d4a16" kindref="member">riscv_conv_fast_opt_q15</ref>(</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga296cde9c216b5a64dab8158540efc8fb" kindref="member">riscv_conv_q31</ref>(</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1gaa7de045f7b07e33ce0b5d9dc00371644" kindref="member">riscv_conv_fast_q31</ref>(</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga1c5777851e3f6ea412fc04487548265e" kindref="member">riscv_conv_opt_q7</ref>(</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Conv_1ga9eee8380e22313ef53f54ca713bee4e6" kindref="member">riscv_conv_q7</ref>(</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga15780978d840ca15ee86a2a67dcc27cf" kindref="member">riscv_conv_partial_f32</ref>(</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga8a2f1aadcf0c8cee85d1fd964918e4d0" kindref="member">riscv_conv_partial_opt_q15</ref>(</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints,</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga12699a743519d30a39af236c42d680af" kindref="member">riscv_conv_partial_q15</ref>(</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga623de40ec37e2c48bca3ff688974fc4d" kindref="member">riscv_conv_partial_fast_q15</ref>(</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga01d75df81efc8a667cafa9e95c1275ae" kindref="member">riscv_conv_partial_fast_opt_q15</ref>(</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints,</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga6ab09c40110ed2bdb8c9fdcc03c2fe85" kindref="member">riscv_conv_partial_q31</ref>(</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints);</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1ga9f7b60498fa6b81cd8ac3db5b9cb527a" kindref="member">riscv_conv_partial_fast_q31</ref>(</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1gad5a1ab976466bca8e44b627770b5c888" kindref="member">riscv_conv_partial_opt_q7</ref>(</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints,</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__PartialConv_1gaba5b790326c5f36f9c3d9b3a8f8ce178" kindref="member">riscv_conv_partial_q7</ref>(</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>firstIndex,</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numPoints);</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3375" refid="structriscv__fir__decimate__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>M;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref>;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386" refid="structriscv__fir__decimate__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>M;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref>;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397" refid="structriscv__fir__decimate__instance__f32" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>M;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__decimate__instance__f32" kindref="compound">riscv_fir_decimate_instance_f32</ref>;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__decimate_1gaac61160b5f8e8f0073baea776b6b5bcc" kindref="member">riscv_fir_decimate_f32</ref>(</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__decimate__instance__f32" kindref="compound">riscv_fir_decimate_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal">riscv_status<sp/><ref refid="group__FIR__decimate_1ga387bc4decac5cee2ba073d1ec98d0a8c" kindref="member">riscv_fir_decimate_init_f32</ref>(</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__decimate__instance__f32" kindref="compound">riscv_fir_decimate_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>M,</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__decimate_1ga3709b4b84a0ff9ab322c5a57a854fd43" kindref="member">riscv_fir_decimate_q15</ref>(</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__decimate_1gad331172604a59db5d2039f5af4bbb04f" kindref="member">riscv_fir_decimate_fast_q15</ref>(</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__FIR__decimate_1ga5b5acaad9aa70b15151ab009065702e8" kindref="member">riscv_fir_decimate_init_q15</ref>(</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__decimate__instance__q15" kindref="compound">riscv_fir_decimate_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>M,</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__decimate_1ga6ab85c0ce039addff95d8b8e5634740b" kindref="member">riscv_fir_decimate_q31</ref>(</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__decimate_1ga0730ba173fa51e549f090f41a195ddbb" kindref="member">riscv_fir_decimate_fast_q31</ref>(</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__FIR__decimate_1ga2774269fef95061532bd039708a5bae6" kindref="member">riscv_fir_decimate_init_q31</ref>(</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__decimate__instance__q31" kindref="compound">riscv_fir_decimate_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>M,</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539" refid="structriscv__fir__interpolate__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>L;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>phaseLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__interpolate__instance__q15" kindref="compound">riscv_fir_interpolate_instance_q15</ref>;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550" refid="structriscv__fir__interpolate__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>L;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>phaseLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__interpolate__instance__q31" kindref="compound">riscv_fir_interpolate_instance_q31</ref>;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight></codeline>
<codeline lineno="3561" refid="structriscv__fir__interpolate__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>L;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>phaseLength;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__interpolate__instance__f32" kindref="compound">riscv_fir_interpolate_instance_f32</ref>;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Interpolate_1ga8fff424b316684f02ac5aae58b1f315b" kindref="member">riscv_fir_interpolate_q15</ref>(</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__interpolate__instance__q15" kindref="compound">riscv_fir_interpolate_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__FIR__Interpolate_1ga139d8f20abd891307d7612c4a644ba5c" kindref="member">riscv_fir_interpolate_init_q15</ref>(</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__interpolate__instance__q15" kindref="compound">riscv_fir_interpolate_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>L,</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Interpolate_1gab38e9dfb79024f09e685bb63f422014b" kindref="member">riscv_fir_interpolate_q31</ref>(</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__interpolate__instance__q31" kindref="compound">riscv_fir_interpolate_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__FIR__Interpolate_1gaa0eab8390463d568ab715ad7bd2c2b04" kindref="member">riscv_fir_interpolate_init_q31</ref>(</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__interpolate__instance__q31" kindref="compound">riscv_fir_interpolate_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>L,</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Interpolate_1ga069caef71ac2cb05f23b2e80b6ad905f" kindref="member">riscv_fir_interpolate_f32</ref>(</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__interpolate__instance__f32" kindref="compound">riscv_fir_interpolate_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__FIR__Interpolate_1ga14893a7638b8a8f6383bf5a589ba6d55" kindref="member">riscv_fir_interpolate_init_f32</ref>(</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__interpolate__instance__f32" kindref="compound">riscv_fir_interpolate_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>L,</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675" refid="structriscv__biquad__cas__df1__32x64__ins__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__cas__df1__32x64__ins__q31" kindref="compound">riscv_biquad_cas_df1_32x64_ins_q31</ref>;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1__32x64_1gacdf7b9d2877e249a4bc4bf40a7dc0b06" kindref="member">riscv_biquad_cas_df1_32x64_q31</ref>(</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__cas__df1__32x64__ins__q31" kindref="compound">riscv_biquad_cas_df1_32x64_ins_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF1__32x64_1ga072fc75723bc392c567554410e99bdb2" kindref="member">riscv_biquad_cas_df1_32x64_init_q31</ref>(</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__cas__df1__32x64__ins__q31" kindref="compound">riscv_biquad_cas_df1_32x64_ins_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift);</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3715" refid="structriscv__biquad__cascade__df2T__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_df2T_instance_f32</ref>;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3725" refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_stereo_df2T_instance_f32</ref>;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"></highlight></codeline>
<codeline lineno="3735" refid="structriscv__biquad__cascade__df2T__instance__f64" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f64" kindref="compound">riscv_biquad_cascade_df2T_instance_f64</ref>;</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF2T_1ga6d3b20d95a90c0356db77883cbf50748" kindref="member">riscv_biquad_cascade_df2T_f32</ref>(</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_df2T_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF2T_1ga675ebfa94a2e109efb85ee35f37e88b0" kindref="member">riscv_biquad_cascade_stereo_df2T_f32</ref>(</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_stereo_df2T_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF2T_1ga921f6e70d38c613025d187ec1419138c" kindref="member">riscv_biquad_cascade_df2T_f64</ref>(</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f64" kindref="compound">riscv_biquad_cascade_df2T_instance_f64</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RISCV_MATH_NEON)<sp/></highlight></codeline>
<codeline lineno="3786"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_biquad_cascade_df2T_compute_coefs_f32(</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_df2T_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pCoeffs);</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3791"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF2T_1ga64bded2f72748bde1621e6b27739cfbe" kindref="member">riscv_biquad_cascade_df2T_init_f32</ref>(</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_df2T_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF2T_1ga6cf2c21b7a0772f81ecaa9f91a99f59d" kindref="member">riscv_biquad_cascade_stereo_df2T_init_f32</ref>(</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__cascade__stereo__df2T__instance__f32" kindref="compound">riscv_biquad_cascade_stereo_df2T_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__BiquadCascadeDF2T_1gabe93776356e0ca410f09b3da01e96566" kindref="member">riscv_biquad_cascade_df2T_init_f64</ref>(</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__biquad__cascade__df2T__instance__f64" kindref="compound">riscv_biquad_cascade_df2T_instance_f64</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float64_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836" refid="structriscv__fir__lattice__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__lattice__instance__q15" kindref="compound">riscv_fir_lattice_instance_q15</ref>;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight></codeline>
<codeline lineno="3846" refid="structriscv__fir__lattice__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__lattice__instance__q31" kindref="compound">riscv_fir_lattice_instance_q31</ref>;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3856" refid="structriscv__fir__lattice__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__lattice__instance__f32" kindref="compound">riscv_fir_lattice_instance_f32</ref>;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Lattice_1ga0aa9f96904832a16f496f42fe87a054a" kindref="member">riscv_fir_lattice_init_q15</ref>(</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__lattice__instance__q15" kindref="compound">riscv_fir_lattice_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Lattice_1ga577c755d5ad2f887455f465d5d0b8f3e" kindref="member">riscv_fir_lattice_q15</ref>(</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__lattice__instance__q15" kindref="compound">riscv_fir_lattice_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Lattice_1ga1b195a9ff98c1d5f8668e49c559740fe" kindref="member">riscv_fir_lattice_init_q31</ref>(</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__lattice__instance__q31" kindref="compound">riscv_fir_lattice_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Lattice_1ga8cd880ce0b660988f86fbeb479edafe5" kindref="member">riscv_fir_lattice_q31</ref>(</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__lattice__instance__q31" kindref="compound">riscv_fir_lattice_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Lattice_1ga0e52d2c841a9fcacb5cfc2cdac417795" kindref="member">riscv_fir_lattice_init_f32</ref>(</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__lattice__instance__f32" kindref="compound">riscv_fir_lattice_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages,</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Lattice_1ga71be4bcdf299f23f9cc561aaf72b6a3e" kindref="member">riscv_fir_lattice_f32</ref>(</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__fir__lattice__instance__f32" kindref="compound">riscv_fir_lattice_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight></codeline>
<codeline lineno="3951" refid="structriscv__iir__lattice__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pkCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pvCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref>;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962" refid="structriscv__iir__lattice__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pkCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pvCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref>;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973" refid="structriscv__iir__lattice__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pkCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pvCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref>;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__IIR__Lattice_1ga21cbd80b4efa75ebedacf255f3ae9864" kindref="member">riscv_iir_lattice_f32</ref>(</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__IIR__Lattice_1ga0086fda79e52d27e5dbf1aa5e4e5a568" kindref="member">riscv_iir_lattice_init_f32</ref>(</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages,</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pkCoeffs,</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pvCoeffs,</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__IIR__Lattice_1ga05b9e1ecf4b9bd838ccab74d9c8d5265" kindref="member">riscv_iir_lattice_q31</ref>(</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__IIR__Lattice_1ga2d089c8a0b6a3b543169569bc6f12f3c" kindref="member">riscv_iir_lattice_init_q31</ref>(</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages,</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pkCoeffs,</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pvCoeffs,</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__IIR__Lattice_1ga07f17a4cacfb0eaf8e41bc6e705c0a02" kindref="member">riscv_iir_lattice_q15</ref>(</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__IIR__Lattice_1ga2597e0a4aaf0b8ff9a83b1bb1b8bd801" kindref="member">riscv_iir_lattice_init_q15</ref>(</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numStages,</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pkCoeffs,</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pvCoeffs,</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight></codeline>
<codeline lineno="4081" refid="structriscv__lms__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>mu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__lms__instance__f32" kindref="compound">riscv_lms_instance_f32</ref>;</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS_1ga4821915faf731f785e8b9a2c787d7d5a" kindref="member">riscv_lms_f32</ref>(</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__lms__instance__f32" kindref="compound">riscv_lms_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pRef,</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pErr,</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS_1ga26efc85da2087e64bb20858ff58fce82" kindref="member">riscv_lms_init_f32</ref>(</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__instance__f32" kindref="compound">riscv_lms_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>mu,</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129" refid="structriscv__lms__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>mu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>postShift;<sp/><sp/></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__lms__instance__q15" kindref="compound">riscv_lms_instance_q15</ref>;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS_1gabbc1cc876630ed6cb1d7f9abafe563ed" kindref="member">riscv_lms_init_q15</ref>(</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__instance__q15" kindref="compound">riscv_lms_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>mu,</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>postShift);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS_1ga139f4b315354ce502f5b0bf66707c624" kindref="member">riscv_lms_q15</ref>(</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__lms__instance__q15" kindref="compound">riscv_lms_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pRef,</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pErr,</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180" refid="structriscv__lms__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>mu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>postShift;<sp/><sp/></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__lms__instance__q31" kindref="compound">riscv_lms_instance_q31</ref>;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS_1ga860b11ef001dfbfbd56f8fa353cb7ecd" kindref="member">riscv_lms_q31</ref>(</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__lms__instance__q31" kindref="compound">riscv_lms_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pRef,</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pErr,</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS_1ga7f855feb11ee18ee8f345968acb79cfb" kindref="member">riscv_lms_init_q31</ref>(</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__instance__q31" kindref="compound">riscv_lms_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>mu,</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>postShift);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4231" refid="structriscv__lms__norm__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>mu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>energy;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>x0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref>;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS__NORM_1ga430d4faa1d3bc35f11c7161d32829b54" kindref="member">riscv_lms_norm_f32</ref>(</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pRef,</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pErr,</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS__NORM_1ga39ba5def59568ef5db5a2da0f6632d0e" kindref="member">riscv_lms_norm_init_f32</ref>(</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>mu,</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281" refid="structriscv__lms__norm__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>mu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*recipTable;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>energy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>x0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref>;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS__NORM_1gad65f37ceb84e37e316875bcdad4e9be1" kindref="member">riscv_lms_norm_q31</ref>(</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pRef,</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pErr,</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS__NORM_1ga8545ba6c1d850ed23d265dc098c6b092" kindref="member">riscv_lms_norm_init_q31</ref>(</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>mu,</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift);</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335" refid="structriscv__lms__norm__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>mu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*recipTable;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>energy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>x0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref>;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS__NORM_1gaedc80687fb3a431b2f7616caebbc740c" kindref="member">riscv_lms_norm_q15</ref>(</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pRef,</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pErr,</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__LMS__NORM_1ga30c00d2a58bd561f823b89b44ae71556" kindref="member">riscv_lms_norm_init_q15</ref>(</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>mu,</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>postShift);</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga7b6d1e9597930342fc81f65b7d9efe81" kindref="member">riscv_correlate_f32</ref>(</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight></codeline>
<codeline lineno="4411"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga69033fc00b83b9f6a2096b97c2bbbda8" kindref="member">riscv_correlate_opt_q15</ref>(</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga741c3c19b23c10ae372d8cce02699983" kindref="member">riscv_correlate_q15</ref>(</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga9990fa4b09c6557e7bba6e27146cda34" kindref="member">riscv_correlate_fast_q15</ref>(</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga40c8805aeeab37a95f266f69d3e033e4" kindref="member">riscv_correlate_fast_opt_q15</ref>(</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch);</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga6a1248f762ddd111a31594d2c0629456" kindref="member">riscv_correlate_q31</ref>(</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1gacb282922c8c03f6816b1094bf0177937" kindref="member">riscv_correlate_fast_q31</ref>(</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1gaf7a8d420a60c09dc6d11027b62e87ab2" kindref="member">riscv_correlate_opt_q7</ref>(</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch1,</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratch2);</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Corr_1ga21b0c52b032ee9034adbb14d20b3f376" kindref="member">riscv_correlate_q7</ref>(</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcALen,</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>srcBLen,</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst);</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4541" refid="structriscv__fir__sparse__instance__f32" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>stateIndex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*pTapDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__sparse__instance__f32" kindref="compound">riscv_fir_sparse_instance_f32</ref>;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554" refid="structriscv__fir__sparse__instance__q31" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>stateIndex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*pTapDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__sparse__instance__q31" kindref="compound">riscv_fir_sparse_instance_q31</ref>;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight></codeline>
<codeline lineno="4567" refid="structriscv__fir__sparse__instance__q15" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>stateIndex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*pTapDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__sparse__instance__q15" kindref="compound">riscv_fir_sparse_instance_q15</ref>;</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580" refid="structriscv__fir__sparse__instance__q7" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>stateIndex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*pState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*pCoeffs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*pTapDelay;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structriscv__fir__sparse__instance__q7" kindref="compound">riscv_fir_sparse_instance_q7</ref>;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1ga9d163e84a2e324e7c085b1b72a61986e" kindref="member">riscv_fir_sparse_f32</ref>(</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__f32" kindref="compound">riscv_fir_sparse_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pScratchIn,</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1gac71f6aa7bb818120207635afe90f3d7a" kindref="member">riscv_fir_sparse_init_f32</ref>(</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__f32" kindref="compound">riscv_fir_sparse_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>pTapDelay,</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay,</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1gae092c99cb8f32e649a02948cc4a7de3a" kindref="member">riscv_fir_sparse_q31</ref>(</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__q31" kindref="compound">riscv_fir_sparse_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pScratchIn,</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1ga23c217312f6473b3c6a765dd1bc27d5c" kindref="member">riscv_fir_sparse_init_q31</ref>(</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__q31" kindref="compound">riscv_fir_sparse_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>pTapDelay,</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay,</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1gad748c3c718c09152822c40c5c486668a" kindref="member">riscv_fir_sparse_q15</ref>(</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__q15" kindref="compound">riscv_fir_sparse_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pScratchIn,</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pScratchOut,</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1gadee655d8508fa59823215e746ef467ad" kindref="member">riscv_fir_sparse_init_q15</ref>(</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__q15" kindref="compound">riscv_fir_sparse_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>pTapDelay,</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay,</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1ga93670e55f4a3d6c0a16ee726084a6a14" kindref="member">riscv_fir_sparse_q7</ref>(</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__q7" kindref="compound">riscv_fir_sparse_instance_q7</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pScratchIn,</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pScratchOut,</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FIR__Sparse_1ga5256db6ef38c820c1a12d2ba3603e073" kindref="member">riscv_fir_sparse_init_q7</ref>(</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structriscv__fir__sparse__instance__q7" kindref="compound">riscv_fir_sparse_instance_q7</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>numTaps,</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pCoeffs,</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pState,</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*<sp/>pTapDelay,</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelay,</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__SinCos_1ga6742f15b5a6fc25f9406b8288c499ca9" kindref="member">riscv_sin_cos_f32</ref>(</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>theta,</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pSinVal,</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pCosVal);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__SinCos_1gaba44a82036931215a98b726da8fc28f8" kindref="member">riscv_sin_cos_q31</ref>(</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>theta,</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pSinVal,</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pCosVal);</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__conj_1ga85e11fa12a02e256cb825dff232182c8" kindref="member">riscv_cmplx_conj_f32</ref>(</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__conj_1ga6bde169711f530b2a7fd8a31153591a2" kindref="member">riscv_cmplx_conj_q31</ref>(</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__conj_1ga23e24e645f1487cc7f2286e9dcf523e4" kindref="member">riscv_cmplx_conj_q15</ref>(</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__mag__squared_1ga1cc0b3a955a49094b5a630e15e270f7c" kindref="member">riscv_cmplx_mag_squared_f32</ref>(</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__mag__squared_1gacaf0b7aaadeb446212d05aa349d5f669" kindref="member">riscv_cmplx_mag_squared_q31</ref>(</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__mag__squared_1ga63ecc92e721532fd727e35d6a67452ed" kindref="member">riscv_cmplx_mag_squared_q15</ref>(</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>float32_t<sp/><ref refid="group__PID_1gabafba8b6028791a8df9336fda2d89eb4" kindref="member">riscv_pid_f32</ref>(</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><ref refid="structriscv__pid__instance__f32" kindref="compound">riscv_pid_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/>float32_t<sp/>in)</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>out;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y[n]<sp/>=<sp/>y[n-1]<sp/>+<sp/>A0<sp/>*<sp/>x[n]<sp/>+<sp/>A1<sp/>*<sp/>x[n-1]<sp/>+<sp/>A2<sp/>*<sp/>x[n-2]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(S-&gt;<ref refid="structriscv__pid__instance__f32_1ae01a108d9ffac4f3bd9a84ceece73840" kindref="member">A0</ref><sp/>*<sp/>in)<sp/>+</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(S-&gt;<ref refid="structriscv__pid__instance__f32_1a7b81290491e4c513e5ca57a42e15c22b" kindref="member">A1</ref><sp/>*<sp/>S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[0])<sp/>+<sp/>(S-&gt;<ref refid="structriscv__pid__instance__f32_1af9bf6c71851f6ded4b89350940eb3390" kindref="member">A2</ref><sp/>*<sp/>S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[1])<sp/>+<sp/>(S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[2]);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"></highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[1]<sp/>=<sp/>S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[0];</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[0]<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__f32_1a9cb59586ca2298f0e353d3bcc382dfe4" kindref="member">state</ref>[2]<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>to<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(out);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight></codeline>
<codeline lineno="4940"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q31_t<sp/><ref refid="group__PID_1ga107785522e399b35e5ba5b9181d57726" kindref="member">riscv_pid_q31</ref>(</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><ref refid="structriscv__pid__instance__q31" kindref="compound">riscv_pid_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>q31_t<sp/>in)</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/>q63_t<sp/>acc;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>out;</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>=<sp/>A0<sp/>*<sp/>x[n]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(q63_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1a1ce745b64affe9e6797803476320ee92" kindref="member">A0</ref><sp/>*<sp/>in;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>+=<sp/>A1<sp/>*<sp/>x[n-1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(q63_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1a9f9a95f18afa524349a802b9eaadfdaa" kindref="member">A1</ref><sp/>*<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[0];</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>+=<sp/>A2<sp/>*<sp/>x[n-2]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(q63_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1a5cc1750fa28a44dd80014c4cdfa64035" kindref="member">A2</ref><sp/>*<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[1];</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>output<sp/>to<sp/>1.31<sp/>format<sp/>to<sp/>add<sp/>y[n-1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q31_t)<sp/>(acc<sp/>&gt;&gt;<sp/>31U);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>+=<sp/>y[n-1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[2];</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[1]<sp/>=<sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[0];</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[0]<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__q31_1ae6cebdb1dabed353ef85d52ede1a2621" kindref="member">state</ref>[2]<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>to<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(out);</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal">__STATIC_FORCEINLINE<sp/>q15_t<sp/><ref refid="group__PID_1gaf1220917c29e049f8127ca8808bd703f" kindref="member">riscv_pid_q15</ref>(</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><ref refid="structriscv__pid__instance__q15" kindref="compound">riscv_pid_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/>q15_t<sp/>in)</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/>q63_t<sp/>acc;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/>out;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(RISCV_MATH_DSP)</highlight></codeline>
<codeline lineno="4994"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implementation<sp/>of<sp/>PID<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>=<sp/>A0<sp/>*<sp/>x[n]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(q31_t)<sp/>__SMUAD((uint32_t)S-&gt;<ref refid="structriscv__pid__instance__q15_1af486b09d4564e842ec72442bcdab73db" kindref="member">A0</ref>,<sp/>(uint32_t)in);</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>+=<sp/>A1<sp/>*<sp/>x[n-1]<sp/>+<sp/>A2<sp/>*<sp/>x[n-2]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(q63_t)__SMLALD((uint32_t)S-&gt;<ref refid="structriscv__pid__instance__q15_1a7c1abf0bda705f4211d3b92f3c368ffb" kindref="member">A1</ref>,<sp/>(uint32_t)read_q15x2<sp/>(S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>),<sp/>(uint64_t)acc);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="5002"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>=<sp/>A0<sp/>*<sp/>x[n]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>((q31_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1af486b09d4564e842ec72442bcdab73db" kindref="member">A0</ref>)<sp/>*<sp/>in;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>+=<sp/>A1<sp/>*<sp/>x[n-1]<sp/>+<sp/>A2<sp/>*<sp/>x[n-2]<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(q31_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1a7c1abf0bda705f4211d3b92f3c368ffb" kindref="member">A1</ref><sp/>*<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[0];</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(q31_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1a558fbaa19a753ab0f2b749b1eadf8075" kindref="member">A2</ref><sp/>*<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[1];</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5009"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>+=<sp/>y[n-1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(q31_t)<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[2]<sp/>&lt;&lt;<sp/>15;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>saturate<sp/>the<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q15_t)<sp/>(__SSAT((acc<sp/>&gt;&gt;<sp/>15),<sp/>16));</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[1]<sp/>=<sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[0];</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[0]<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>S-&gt;<ref refid="structriscv__pid__instance__q15_1abf8438760e37d243b2ba2ab9126b8ea2" kindref="member">state</ref>[2]<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>to<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(out);</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__MatrixInv_1gafe1cdc037cf164c23ae8f5d0e4e5582b" kindref="member">riscv_mat_inverse_f32</ref>(</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>src,</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref><sp/>*<sp/>dst);</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"></highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/>riscv_status<sp/><ref refid="group__MatrixInv_1ga953ffef0728e932d1daaaccdfd69d843" kindref="member">riscv_mat_inverse_f64</ref>(</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__matrix__instance__f64" kindref="compound">riscv_matrix_instance_f64</ref><sp/>*<sp/>src,</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><ref refid="structriscv__matrix__instance__f64" kindref="compound">riscv_matrix_instance_f64</ref><sp/>*<sp/>dst);</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__clarke_1gac33843986caf32228355185c14fafda4" kindref="member">riscv_clarke_f32</ref>(</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/>float32_t<sp/>Ia,</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/>float32_t<sp/>Ib,</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIalpha,</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIbeta)</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIalpha<sp/>using<sp/>the<sp/>equation,<sp/>pIalpha<sp/>=<sp/>Ia<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIalpha<sp/>=<sp/>Ia;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIbeta<sp/>using<sp/>the<sp/>equation,<sp/>pIbeta<sp/>=<sp/>(1/sqrt(3))<sp/>*<sp/>Ia<sp/>+<sp/>(2/sqrt(3))<sp/>*<sp/>Ib<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIbeta<sp/>=<sp/>((float32_t)<sp/>0.57735026919<sp/>*<sp/>Ia<sp/>+<sp/>(float32_t)<sp/>1.15470053838<sp/>*<sp/>Ib);</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight></codeline>
<codeline lineno="5122"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__clarke_1ga284680aa3493d2d23592e09fa561c868" kindref="member">riscv_clarke_q31</ref>(</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/>q31_t<sp/>Ia,</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/>q31_t<sp/>Ib,</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIalpha,</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIbeta)</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>product1,<sp/>product2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>variables<sp/>used<sp/>to<sp/>store<sp/>intermediate<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>pIalpha<sp/>from<sp/>Ia<sp/>by<sp/>equation<sp/>pIalpha<sp/>=<sp/>Ia<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIalpha<sp/>=<sp/>Ia;</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(1/(sqrt(3))<sp/>*<sp/>Ia)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/>product1<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>Ia<sp/>*<sp/>0x24F34E8B)<sp/>&gt;&gt;<sp/>30);</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(2/sqrt(3)<sp/>*<sp/>Ib)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>product2<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>Ib<sp/>*<sp/>0x49E69D16)<sp/>&gt;&gt;<sp/>30);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pIbeta<sp/>is<sp/>calculated<sp/>by<sp/>adding<sp/>the<sp/>intermediate<sp/>products<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIbeta<sp/>=<sp/>__QADD(product1,<sp/>product2);</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__inv__clarke_1gaf8994c650507b48c612a417f7e64ce4a" kindref="member">riscv_inv_clarke_f32</ref>(</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/>float32_t<sp/>Ialpha,</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/>float32_t<sp/>Ibeta,</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIa,</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIb)</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>pIa<sp/>from<sp/>Ialpha<sp/>by<sp/>equation<sp/>pIa<sp/>=<sp/>Ialpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIa<sp/>=<sp/>Ialpha;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>pIb<sp/>from<sp/>Ialpha<sp/>and<sp/>Ibeta<sp/>by<sp/>equation<sp/>pIb<sp/>=<sp/>-(1/2)<sp/>*<sp/>Ialpha<sp/>+<sp/>(sqrt(3)/2)<sp/>*<sp/>Ibeta<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIb<sp/>=<sp/>-0.5f<sp/>*<sp/>Ialpha<sp/>+<sp/>0.8660254039f<sp/>*<sp/>Ibeta;</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__inv__clarke_1ga85f9a48c3d5e8c6a43378bb1cb410399" kindref="member">riscv_inv_clarke_q31</ref>(</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/>q31_t<sp/>Ialpha,</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/>q31_t<sp/>Ibeta,</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIa,</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIb)</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>product1,<sp/>product2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>variables<sp/>used<sp/>to<sp/>store<sp/>intermediate<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>pIa<sp/>from<sp/>Ialpha<sp/>by<sp/>equation<sp/>pIa<sp/>=<sp/>Ialpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIa<sp/>=<sp/>Ialpha;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(1/(2*sqrt(3))<sp/>*<sp/>Ia)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/>product1<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Ialpha)<sp/>*<sp/>(0x40000000))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(1/sqrt(3)<sp/>*<sp/>pIb)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/>product2<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Ibeta)<sp/>*<sp/>(0x6ED9EBA1))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pIb<sp/>is<sp/>calculated<sp/>by<sp/>subtracting<sp/>the<sp/>products<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIb<sp/>=<sp/>__QSUB(product2,<sp/>product1);</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__park_1gab183396bb844fa2baa3da261932125ad" kindref="member">riscv_park_f32</ref>(</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/>float32_t<sp/>Ialpha,</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/>float32_t<sp/>Ibeta,</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pId,</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIq,</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/>float32_t<sp/>sinVal,</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/>float32_t<sp/>cosVal)</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pId<sp/>using<sp/>the<sp/>equation,<sp/>pId<sp/>=<sp/>Ialpha<sp/>*<sp/>cosVal<sp/>+<sp/>Ibeta<sp/>*<sp/>sinVal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/>*pId<sp/>=<sp/>Ialpha<sp/>*<sp/>cosVal<sp/>+<sp/>Ibeta<sp/>*<sp/>sinVal;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIq<sp/>using<sp/>the<sp/>equation,<sp/>pIq<sp/>=<sp/>-<sp/>Ialpha<sp/>*<sp/>sinVal<sp/>+<sp/>Ibeta<sp/>*<sp/>cosVal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIq<sp/>=<sp/>-Ialpha<sp/>*<sp/>sinVal<sp/>+<sp/>Ibeta<sp/>*<sp/>cosVal;</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__park_1ga8230600e57db40c1bd5f8e9df49e3193" kindref="member">riscv_park_q31</ref>(</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/>q31_t<sp/>Ialpha,</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/>q31_t<sp/>Ibeta,</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pId,</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIq,</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/>q31_t<sp/>sinVal,</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/>q31_t<sp/>cosVal)</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>product1,<sp/>product2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>variables<sp/>used<sp/>to<sp/>store<sp/>intermediate<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>product3,<sp/>product4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>variables<sp/>used<sp/>to<sp/>store<sp/>intermediate<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Ialpha<sp/>*<sp/>cosVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/>product1<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Ialpha)<sp/>*<sp/>(cosVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Ibeta<sp/>*<sp/>sinVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/>product2<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Ibeta)<sp/>*<sp/>(sinVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Ialpha<sp/>*<sp/>sinVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/>product3<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Ialpha)<sp/>*<sp/>(sinVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Ibeta<sp/>*<sp/>cosVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/>product4<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Ibeta)<sp/>*<sp/>(cosVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pId<sp/>by<sp/>adding<sp/>the<sp/>two<sp/>intermediate<sp/>products<sp/>1<sp/>and<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/>*pId<sp/>=<sp/>__QADD(product1,<sp/>product2);</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIq<sp/>by<sp/>subtracting<sp/>the<sp/>two<sp/>intermediate<sp/>products<sp/>3<sp/>from<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIq<sp/>=<sp/>__QSUB(product4,<sp/>product3);</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__inv__park_1ga551373c715baaa03726ac4a008f6fff7" kindref="member">riscv_inv_park_f32</ref>(</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/>float32_t<sp/>Id,</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/>float32_t<sp/>Iq,</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIalpha,</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIbeta,</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/>float32_t<sp/>sinVal,</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/>float32_t<sp/>cosVal)</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIalpha<sp/>using<sp/>the<sp/>equation,<sp/>pIalpha<sp/>=<sp/>Id<sp/>*<sp/>cosVal<sp/>-<sp/>Iq<sp/>*<sp/>sinVal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIalpha<sp/>=<sp/>Id<sp/>*<sp/>cosVal<sp/>-<sp/>Iq<sp/>*<sp/>sinVal;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"></highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIbeta<sp/>using<sp/>the<sp/>equation,<sp/>pIbeta<sp/>=<sp/>Id<sp/>*<sp/>sinVal<sp/>+<sp/>Iq<sp/>*<sp/>cosVal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIbeta<sp/>=<sp/>Id<sp/>*<sp/>sinVal<sp/>+<sp/>Iq<sp/>*<sp/>cosVal;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal">__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__inv__park_1ga295798b52c3a62efeaf00091e001ee20" kindref="member">riscv_inv_park_q31</ref>(</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/>q31_t<sp/>Id,</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/>q31_t<sp/>Iq,</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIalpha,</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIbeta,</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/>q31_t<sp/>sinVal,</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/>q31_t<sp/>cosVal)</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>product1,<sp/>product2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>variables<sp/>used<sp/>to<sp/>store<sp/>intermediate<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>product3,<sp/>product4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>variables<sp/>used<sp/>to<sp/>store<sp/>intermediate<sp/>results<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Id<sp/>*<sp/>cosVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>product1<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Id)<sp/>*<sp/>(cosVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"></highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Iq<sp/>*<sp/>sinVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>product2<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Iq)<sp/>*<sp/>(sinVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Id<sp/>*<sp/>sinVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/>product3<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Id)<sp/>*<sp/>(sinVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intermediate<sp/>product<sp/>is<sp/>calculated<sp/>by<sp/>(Iq<sp/>*<sp/>cosVal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/>product4<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>(Iq)<sp/>*<sp/>(cosVal))<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIalpha<sp/>by<sp/>using<sp/>the<sp/>two<sp/>intermediate<sp/>products<sp/>1<sp/>and<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIalpha<sp/>=<sp/>__QSUB(product1,<sp/>product2);</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>pIbeta<sp/>by<sp/>using<sp/>the<sp/>two<sp/>intermediate<sp/>products<sp/>3<sp/>and<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/>*pIbeta<sp/>=<sp/>__QADD(product4,<sp/>product3);</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"></highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>float32_t<sp/><ref refid="group__LinearInterpolate_1gaf5398260d5170ca63d3f67743d8a5533" kindref="member">riscv_linear_interp_f32</ref>(</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><ref refid="structriscv__linear__interp__instance__f32" kindref="compound">riscv_linear_interp_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/>float32_t<sp/>x)</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>y;</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>x0,<sp/>x1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>input<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>y0,<sp/>y1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>xSpacing<sp/>=<sp/>S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1aaea0223849135524d3ed88e43104ad0b" kindref="member">xSpacing</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>spacing<sp/>between<sp/>input<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>*pYData<sp/>=<sp/>S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1ac795ecbf0126460d041175b37ad5dd88" kindref="member">pYData</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>output<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(int32_t)<sp/>((x<sp/>-<sp/>S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1aa9e7fe73ac303da32f3418310cfc0c75" kindref="member">x1</ref>)<sp/>/<sp/>xSpacing);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"></highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iniatilize<sp/>output<sp/>for<sp/>below<sp/>specified<sp/>range<sp/>as<sp/>least<sp/>output<sp/>value<sp/>of<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>pYData[0];</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uint32_t)i<sp/>&gt;=<sp/>(S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1a31ecae554ac8b9d9ec0ed0d1ec4bd3a1" kindref="member">nValues</ref><sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iniatilize<sp/>output<sp/>for<sp/>above<sp/>specified<sp/>range<sp/>as<sp/>last<sp/>output<sp/>value<sp/>of<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>pYData[S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1a31ecae554ac8b9d9ec0ed0d1ec4bd3a1" kindref="member">nValues</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>nearest<sp/>input<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1aa9e7fe73ac303da32f3418310cfc0c75" kindref="member">x1</ref><sp/>+<sp/><sp/>i<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>xSpacing;</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>S-&gt;<ref refid="structriscv__linear__interp__instance__f32_1aa9e7fe73ac303da32f3418310cfc0c75" kindref="member">x1</ref><sp/>+<sp/>(i<sp/>+<sp/>1)<sp/>*<sp/>xSpacing;</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>of<sp/>nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>pYData[i];</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y0<sp/>+<sp/>(x<sp/>-<sp/>x0)<sp/>*<sp/>((y1<sp/>-<sp/>y0)<sp/>/<sp/>(x1<sp/>-<sp/>x0));</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"></highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>returns<sp/>output<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y);</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"></highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q31_t<sp/><ref refid="group__LinearInterpolate_1ga38f1285ec1a9657c1c695b3d1fd9cc38" kindref="member">riscv_linear_interp_q31</ref>(</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pYData,</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/>q31_t<sp/>x,</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nValues)</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>y0,<sp/>y1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>fract;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>to<sp/>read<sp/>nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>((x<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"></highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>(int32_t)(nValues<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pYData[nValues<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pYData[0]);</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>left<sp/>by<sp/>11<sp/>to<sp/>keep<sp/>fract<sp/>in<sp/>1.31<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fract<sp/>=<sp/>(x<sp/>&amp;<sp/>0x000FFFFF)<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>in<sp/>1.31(q31)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>pYData[index];</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>y0<sp/>*<sp/>(1-fract)<sp/>and<sp/>y<sp/>is<sp/>in<sp/>2.30<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>((q31_t)<sp/>((q63_t)<sp/>y0<sp/>*<sp/>(0x7FFFFFFF<sp/>-<sp/>fract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"></highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>y0<sp/>*<sp/>(1-fract)<sp/>+<sp/>y1<sp/>*fract<sp/>and<sp/>y<sp/>is<sp/>in<sp/>2.30<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>((q31_t)<sp/>(((q63_t)<sp/>y1<sp/>*<sp/>fract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>y<sp/>to<sp/>1.31<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y<sp/>&lt;&lt;<sp/>1U);</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q15_t<sp/><ref refid="group__LinearInterpolate_1gac1b8468ad9ef25b0fc03a60574748c7b" kindref="member">riscv_linear_interp_q15</ref>(</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pYData,</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/>q31_t<sp/>x,</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nValues)</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/>q63_t<sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/>y0,<sp/>y1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>fract;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>to<sp/>read<sp/>nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"></highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>((x<sp/>&amp;<sp/>(int32_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>(int32_t)(nValues<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pYData[nValues<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pYData[0]);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fract<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fract<sp/>=<sp/>(x<sp/>&amp;<sp/>0x000FFFFF);</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>pYData[index];</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>y0<sp/>*<sp/>(1-fract)<sp/>and<sp/>y<sp/>is<sp/>in<sp/>13.35<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>((q63_t)<sp/>y0<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>fract));</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>(y0<sp/>*<sp/>(1-fract)<sp/>+<sp/>y1<sp/>*<sp/>fract)<sp/>and<sp/>y<sp/>is<sp/>in<sp/>13.35<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>((q63_t)<sp/>y1<sp/>*<sp/>(fract));</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>y<sp/>to<sp/>1.15<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(q15_t)<sp/>(y<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q7_t<sp/><ref refid="group__LinearInterpolate_1ga49e203bdb9bcdb4511538244c8f30cf5" kindref="member">riscv_linear_interp_q7</ref>(</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>pYData,</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/>q31_t<sp/>x,</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nValues)</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/>q7_t<sp/>y0,<sp/>y1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>fract;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>to<sp/>read<sp/>nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"></highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pYData[0]);</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/>20)<sp/>&amp;<sp/>0xfff;</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>(nValues<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pYData[nValues<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fract<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fract<sp/>=<sp/>(x<sp/>&amp;<sp/>0x000FFFFF);</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>and<sp/>are<sp/>in<sp/>1.7(q7)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>pYData[index];</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>y0<sp/>*<sp/>(1-fract<sp/>)<sp/>and<sp/>y<sp/>is<sp/>in<sp/>13.27(q27)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>((y0<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>fract)));</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"></highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>y1<sp/>*<sp/>fract<sp/>+<sp/>y0<sp/>*<sp/>(1-fract)<sp/>and<sp/>y<sp/>is<sp/>in<sp/>13.27(q27)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>(y1<sp/>*<sp/>fract);</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>y<sp/>to<sp/>1.7(q7)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(q7_t)<sp/>(y<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/>float32_t<sp/><ref refid="group__sin_1ga11d805fff25da36b07ff5d2ebfb69dca" kindref="member">riscv_sin_f32</ref>(</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/>float32_t<sp/>x);</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/>q31_t<sp/><ref refid="group__sin_1gaacaf1c59cfded5990998fc2979ba2a0e" kindref="member">riscv_sin_q31</ref>(</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/>q31_t<sp/>x);</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/>q15_t<sp/><ref refid="group__sin_1ga414e49b515ee5a150aa855fc8e49252b" kindref="member">riscv_sin_q15</ref>(</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/>q15_t<sp/>x);</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"></highlight></codeline>
<codeline lineno="5745"><highlight class="normal"></highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/>float32_t<sp/><ref refid="group__cos_1gaf64b27f7eb9658ef96b44a5f0fcf959e" kindref="member">riscv_cos_f32</ref>(</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/>float32_t<sp/>x);</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/>q31_t<sp/><ref refid="group__cos_1gaa303d5764cfe18487ff02951a12b6e11" kindref="member">riscv_cos_q31</ref>(</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/>q31_t<sp/>x);</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"></highlight></codeline>
<codeline lineno="5763"><highlight class="normal"></highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/>q15_t<sp/><ref refid="group__cos_1gaa66f064ed8d2ada72e47d966081c1704" kindref="member">riscv_cos_q15</ref>(</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/>q15_t<sp/>x);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"></highlight></codeline>
<codeline lineno="5772"><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal">__STATIC_FORCEINLINE<sp/>riscv_status<sp/><ref refid="group__SQRT_1ga195942e72ace5531f88658714db038b5" kindref="member">riscv_sqrt_f32</ref>(</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/>float32_t<sp/>in,</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pOut)</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in<sp/>&gt;=<sp/>0.0f)</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"></highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pOut<sp/>=<sp/>sqrtf(in);</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"></highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(RISCV_MATH_SUCCESS);</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pOut<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(RISCV_MATH_ARGUMENT_ERROR);</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"></highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5839"><highlight class="normal">riscv_status<sp/><ref refid="group__SQRT_1ga96a93fb99ac782f0a4fbb0d10e7527a5" kindref="member">riscv_sqrt_q31</ref>(</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/>q31_t<sp/>in,</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pOut);</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"></highlight></codeline>
<codeline lineno="5843"><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal">riscv_status<sp/><ref refid="group__SQRT_1ga7030692f921383b08d1bfca591314105" kindref="member">riscv_sqrt_q15</ref>(</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>q15_t<sp/>in,</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pOut);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"></highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__SQRT_1ga6c2376360963e4cef666729e1c049010" kindref="member">riscv_vsqrt_f32</ref>(</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pIn,</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/>float32_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/>uint16_t<sp/>len);</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__SQRT_1gab76c31ce76775045d9790c547dde10b8" kindref="member">riscv_vsqrt_q31</ref>(</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pIn,</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/>q31_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/>uint16_t<sp/>len);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__SQRT_1ga9c7433f5a63f57bf001bdad593489cab" kindref="member">riscv_vsqrt_q15</ref>(</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pIn,</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>pOut,</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/>uint16_t<sp/>len);</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"></highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_circularWrite_f32(</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>circBuffer,</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/>int32_t<sp/>L,</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/>uint16_t<sp/>*<sp/>writeOffset,</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/>int32_t<sp/>bufferInc,</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*<sp/>src,</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/>int32_t<sp/>srcInc,</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize)</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>wOffset;</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"></highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>value<sp/>of<sp/>Index<sp/>pointer<sp/>that<sp/>points</highlight></codeline>
<codeline lineno="5900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>current<sp/>location<sp/>where<sp/>the<sp/>input<sp/>samples<sp/>to<sp/>be<sp/>copied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/>wOffset<sp/>=<sp/>*writeOffset;</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>the<sp/>blockSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0U)</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>input<sp/>sample<sp/>to<sp/>the<sp/>circular<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>circBuffer[wOffset]<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"></highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>input<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>+=<sp/>srcInc;</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"></highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Circularly<sp/>update<sp/>wOffset.<sp/><sp/>Watch<sp/>out<sp/>for<sp/>positive<sp/>and<sp/>negative<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wOffset<sp/>+=<sp/>bufferInc;</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wOffset<sp/>&gt;=<sp/>L)</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wOffset<sp/>-=<sp/>L;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"></highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decrement<sp/>the<sp/>loop<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>index<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/>*writeOffset<sp/>=<sp/>(uint16_t)wOffset;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal"></highlight></codeline>
<codeline lineno="5928"><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_circularRead_f32(</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>circBuffer,</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/>int32_t<sp/>L,</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>readOffset,</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/>int32_t<sp/>bufferInc,</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>dst,</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>dst_base,</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/>int32_t<sp/>dst_length,</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/>int32_t<sp/>dstInc,</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize)</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>rOffset;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>dst_end;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"></highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>value<sp/>of<sp/>Index<sp/>pointer<sp/>that<sp/>points</highlight></codeline>
<codeline lineno="5948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>current<sp/>location<sp/>from<sp/>where<sp/>the<sp/>input<sp/>samples<sp/>to<sp/>be<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/>rOffset<sp/>=<sp/>*readOffset;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/>dst_end<sp/>=<sp/>dst_base<sp/>+<sp/>dst_length;</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"></highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>the<sp/>blockSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"></highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0U)</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>sample<sp/>from<sp/>the<sp/>circular<sp/>buffer<sp/>to<sp/>the<sp/>destination<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dst<sp/>=<sp/>circBuffer[rOffset];</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"></highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>input<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>+=<sp/>dstInc;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"></highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst<sp/>==<sp/>dst_end)</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>=<sp/>dst_base;</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Circularly<sp/>update<sp/>rOffset.<sp/><sp/>Watch<sp/>out<sp/>for<sp/>positive<sp/>and<sp/>negative<sp/>value<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rOffset<sp/>+=<sp/>bufferInc;</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"></highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rOffset<sp/>&gt;=<sp/>L)</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rOffset<sp/>-=<sp/>L;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decrement<sp/>the<sp/>loop<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"></highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>index<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/>*readOffset<sp/>=<sp/>rOffset;</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_circularWrite_q15(</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>circBuffer,</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/>int32_t<sp/>L,</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/>uint16_t<sp/>*<sp/>writeOffset,</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/>int32_t<sp/>bufferInc,</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>src,</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/>int32_t<sp/>srcInc,</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize)</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>wOffset;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>value<sp/>of<sp/>Index<sp/>pointer<sp/>that<sp/>points</highlight></codeline>
<codeline lineno="6001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>current<sp/>location<sp/>where<sp/>the<sp/>input<sp/>samples<sp/>to<sp/>be<sp/>copied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/>wOffset<sp/>=<sp/>*writeOffset;</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"></highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>the<sp/>blockSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"></highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0U)</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>input<sp/>sample<sp/>to<sp/>the<sp/>circular<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>circBuffer[wOffset]<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"></highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>input<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>+=<sp/>srcInc;</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Circularly<sp/>update<sp/>wOffset.<sp/><sp/>Watch<sp/>out<sp/>for<sp/>positive<sp/>and<sp/>negative<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wOffset<sp/>+=<sp/>bufferInc;</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wOffset<sp/>&gt;=<sp/>L)</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wOffset<sp/>-=<sp/>L;</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"></highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decrement<sp/>the<sp/>loop<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"></highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>index<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/>*writeOffset<sp/>=<sp/>(uint16_t)wOffset;</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"></highlight></codeline>
<codeline lineno="6028"><highlight class="normal"></highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_circularRead_q15(</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>circBuffer,</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/>int32_t<sp/>L,</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>readOffset,</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/>int32_t<sp/>bufferInc,</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>dst,</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/>q15_t<sp/>*<sp/>dst_base,</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/>int32_t<sp/>dst_length,</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/>int32_t<sp/>dstInc,</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize)</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>rOffset;</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t*<sp/>dst_end;</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"></highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>value<sp/>of<sp/>Index<sp/>pointer<sp/>that<sp/>points</highlight></codeline>
<codeline lineno="6048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>current<sp/>location<sp/>from<sp/>where<sp/>the<sp/>input<sp/>samples<sp/>to<sp/>be<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>rOffset<sp/>=<sp/>*readOffset;</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"></highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/>dst_end<sp/>=<sp/>dst_base<sp/>+<sp/>dst_length;</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"></highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>the<sp/>blockSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"></highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0U)</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>sample<sp/>from<sp/>the<sp/>circular<sp/>buffer<sp/>to<sp/>the<sp/>destination<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dst<sp/>=<sp/>circBuffer[rOffset];</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>input<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>+=<sp/>dstInc;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst<sp/>==<sp/>dst_end)</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>=<sp/>dst_base;</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Circularly<sp/>update<sp/>wOffset.<sp/><sp/>Watch<sp/>out<sp/>for<sp/>positive<sp/>and<sp/>negative<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rOffset<sp/>+=<sp/>bufferInc;</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"></highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rOffset<sp/>&gt;=<sp/>L)</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rOffset<sp/>-=<sp/>L;</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"></highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decrement<sp/>the<sp/>loop<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>index<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/>*readOffset<sp/>=<sp/>rOffset;</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"></highlight></codeline>
<codeline lineno="6085"><highlight class="normal"></highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_circularWrite_q7(</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>circBuffer,</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/>int32_t<sp/>L,</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/>uint16_t<sp/>*<sp/>writeOffset,</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/>int32_t<sp/>bufferInc,</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>src,</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/>int32_t<sp/>srcInc,</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize)</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>wOffset;</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>value<sp/>of<sp/>Index<sp/>pointer<sp/>that<sp/>points</highlight></codeline>
<codeline lineno="6102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>current<sp/>location<sp/>where<sp/>the<sp/>input<sp/>samples<sp/>to<sp/>be<sp/>copied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/>wOffset<sp/>=<sp/>*writeOffset;</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>the<sp/>blockSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0U)</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>input<sp/>sample<sp/>to<sp/>the<sp/>circular<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>circBuffer[wOffset]<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>input<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>+=<sp/>srcInc;</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Circularly<sp/>update<sp/>wOffset.<sp/><sp/>Watch<sp/>out<sp/>for<sp/>positive<sp/>and<sp/>negative<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wOffset<sp/>+=<sp/>bufferInc;</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wOffset<sp/>&gt;=<sp/>L)</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wOffset<sp/>-=<sp/>L;</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"></highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decrement<sp/>the<sp/>loop<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>index<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/>*writeOffset<sp/>=<sp/>(uint16_t)wOffset;</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>riscv_circularRead_q7(</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>circBuffer,</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/>int32_t<sp/>L,</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/>int32_t<sp/>*<sp/>readOffset,</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/>int32_t<sp/>bufferInc,</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>dst,</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/>q7_t<sp/>*<sp/>dst_base,</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/>int32_t<sp/>dst_length,</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/>int32_t<sp/>dstInc,</highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/>uint32_t<sp/>blockSize)</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>rOffset;</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/>q7_t*<sp/>dst_end;</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>value<sp/>of<sp/>Index<sp/>pointer<sp/>that<sp/>points</highlight></codeline>
<codeline lineno="6149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>the<sp/>current<sp/>location<sp/>from<sp/>where<sp/>the<sp/>input<sp/>samples<sp/>to<sp/>be<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/>rOffset<sp/>=<sp/>*readOffset;</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"></highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/>dst_end<sp/>=<sp/>dst_base<sp/>+<sp/>dst_length;</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"></highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>over<sp/>the<sp/>blockSize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>blockSize;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0U)</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>sample<sp/>from<sp/>the<sp/>circular<sp/>buffer<sp/>to<sp/>the<sp/>destination<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dst<sp/>=<sp/>circBuffer[rOffset];</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"></highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>input<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>+=<sp/>dstInc;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"></highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst<sp/>==<sp/>dst_end)</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>=<sp/>dst_base;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"></highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Circularly<sp/>update<sp/>rOffset.<sp/><sp/>Watch<sp/>out<sp/>for<sp/>positive<sp/>and<sp/>negative<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rOffset<sp/>+=<sp/>bufferInc;</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rOffset<sp/>&gt;=<sp/>L)</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rOffset<sp/>-=<sp/>L;</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decrement<sp/>the<sp/>loop<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"></highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>index<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/>*readOffset<sp/>=<sp/>rOffset;</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"></highlight></codeline>
<codeline lineno="6186"><highlight class="normal"></highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__power_1ga771849101dec4db523d99c397084bf57" kindref="member">riscv_power_q31</ref>(</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"></highlight></codeline>
<codeline lineno="6198"><highlight class="normal"></highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__power_1ga0e618c3ca31699a1ed84d7573c055cdf" kindref="member">riscv_power_f32</ref>(</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"></highlight></codeline>
<codeline lineno="6210"><highlight class="normal"></highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__power_1ga77949ce3a581ede7c56fa2f7f05fe681" kindref="member">riscv_power_q15</ref>(</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"></highlight></codeline>
<codeline lineno="6222"><highlight class="normal"></highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__power_1ga2513700dcc371c2cd26a1f6a631d816a" kindref="member">riscv_power_q7</ref>(</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"></highlight></codeline>
<codeline lineno="6234"><highlight class="normal"></highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mean_1ga3b79f8993031338e1388657bf6a2ed93" kindref="member">riscv_mean_q7</ref>(</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6245"><highlight class="normal"></highlight></codeline>
<codeline lineno="6246"><highlight class="normal"></highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mean_1ga6dca1b21df3244c0784d0fff2ee4b44e" kindref="member">riscv_mean_q15</ref>(</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"></highlight></codeline>
<codeline lineno="6258"><highlight class="normal"></highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mean_1gae9c080d5108f8815cd8a875529ff45f6" kindref="member">riscv_mean_q31</ref>(</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"></highlight></codeline>
<codeline lineno="6270"><highlight class="normal"></highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__mean_1gafda7243b26985a53e8ceff454c203c47" kindref="member">riscv_mean_f32</ref>(</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"></highlight></codeline>
<codeline lineno="6282"><highlight class="normal"></highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__variance_1ga452ec5639a24313dc7cbc515d1a8c680" kindref="member">riscv_var_f32</ref>(</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"></highlight></codeline>
<codeline lineno="6294"><highlight class="normal"></highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__variance_1ga23d6f039b4a36381948c00b06befa338" kindref="member">riscv_var_q31</ref>(</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"></highlight></codeline>
<codeline lineno="6306"><highlight class="normal"></highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__variance_1ga63d8f72f30eed44563cd1a32c38803a9" kindref="member">riscv_var_q15</ref>(</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"></highlight></codeline>
<codeline lineno="6318"><highlight class="normal"></highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RMS_1gafb2cc5d863073996bd0149653eed1544" kindref="member">riscv_rms_f32</ref>(</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"></highlight></codeline>
<codeline lineno="6330"><highlight class="normal"></highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RMS_1ga406cf1672ee4cb999e8857c06038b84c" kindref="member">riscv_rms_q31</ref>(</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight></codeline>
<codeline lineno="6342"><highlight class="normal"></highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RMS_1ga930e573646c6dadc6280f61cb8de35de" kindref="member">riscv_rms_q15</ref>(</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"></highlight></codeline>
<codeline lineno="6354"><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__STD_1ga47a56c2d3f01f76d19069431d4d4c498" kindref="member">riscv_std_f32</ref>(</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"></highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__STD_1ga5e3d814cf34b26ed49a26b7044487105" kindref="member">riscv_std_q31</ref>(</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"></highlight></codeline>
<codeline lineno="6378"><highlight class="normal"></highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__STD_1ga67e4591f618116fe749fddacf5a00cf9" kindref="member">riscv_std_q15</ref>(</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pResult);</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"></highlight></codeline>
<codeline lineno="6390"><highlight class="normal"></highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__mag_1gaced344ae0cd2f40f7afa5241b72c62a1" kindref="member">riscv_cmplx_mag_f32</ref>(</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"></highlight></codeline>
<codeline lineno="6402"><highlight class="normal"></highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__mag_1gae1764077098688155e6fb2e1a9e7a01b" kindref="member">riscv_cmplx_mag_q31</ref>(</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"></highlight></codeline>
<codeline lineno="6414"><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__mag_1ga54917cbf3745cb1bc01ca593a7a79cb6" kindref="member">riscv_cmplx_mag_q15</ref>(</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"></highlight></codeline>
<codeline lineno="6426"><highlight class="normal"></highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__dot__prod_1gab1a7915b81aef73f226859c0fe835b37" kindref="member">riscv_cmplx_dot_prod_q15</ref>(</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples,</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>realResult,</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>imagResult);</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"></highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__dot__prod_1gae736f9f08fcf71e7a5c13ee4bbe1c33a" kindref="member">riscv_cmplx_dot_prod_q31</ref>(</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples,</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>realResult,</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q63_t<sp/>*<sp/>imagResult);</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"></highlight></codeline>
<codeline lineno="6458"><highlight class="normal"></highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__cmplx__dot__prod_1ga4a487e8090687e624d830878c50a6b72" kindref="member">riscv_cmplx_dot_prod_f32</ref>(</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples,</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>realResult,</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>imagResult);</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"></highlight></codeline>
<codeline lineno="6474"><highlight class="normal"></highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__CmplxByRealMult_1gac512da6affe85400151447042e702c88" kindref="member">riscv_cmplx_mult_real_q15</ref>(</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcCmplx,</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcReal,</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pCmplxDst,</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"></highlight></codeline>
<codeline lineno="6488"><highlight class="normal"></highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__CmplxByRealMult_1gac0e1ac76bf236098a272afab43f2b869" kindref="member">riscv_cmplx_mult_real_q31</ref>(</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcCmplx,</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcReal,</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pCmplxDst,</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"></highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__CmplxByRealMult_1ga9d2e6ac8df7cf46d9f0a3058b0a00d53" kindref="member">riscv_cmplx_mult_real_f32</ref>(</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcCmplx,</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcReal,</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pCmplxDst,</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"></highlight></codeline>
<codeline lineno="6516"><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Min_1gaa96ca2fa49fb1cf3ce0fc94c89c94847" kindref="member">riscv_min_q7</ref>(</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>result,</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>index);</highlight></codeline>
<codeline lineno="6529"><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"></highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Min_1ga6cb72c06e41c3cca6f672083c3b941d4" kindref="member">riscv_min_q15</ref>(</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"></highlight></codeline>
<codeline lineno="6544"><highlight class="normal"></highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Min_1gac301271e481eefda845e1dc13556601c" kindref="member">riscv_min_q31</ref>(</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"></highlight></codeline>
<codeline lineno="6558"><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Min_1ga4858d42639fee0082c0faceddd44dfda" kindref="member">riscv_min_f32</ref>(</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Max_1ga86658c6fac036cc868bf509a4e9a5cef" kindref="member">riscv_max_q7</ref>(</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"></highlight></codeline>
<codeline lineno="6586"><highlight class="normal"></highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Max_1ga04a0e786bb3cc80c98eccdce0bec7b6d" kindref="member">riscv_max_q15</ref>(</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"></highlight></codeline>
<codeline lineno="6600"><highlight class="normal"></highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Max_1gae3f61c5d8d40fd4ab091b58fe3485b56" kindref="member">riscv_max_q31</ref>(</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"></highlight></codeline>
<codeline lineno="6614"><highlight class="normal"></highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__Max_1gadfcdcdaa22ab2e21c1d74230d6462591" kindref="member">riscv_max_f32</ref>(</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize,</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pResult,</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>pIndex);</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"></highlight></codeline>
<codeline lineno="6628"><highlight class="normal"></highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__CmplxByCmplxMult_1gaac5cbc0202fce9f91a7707bf209714fe" kindref="member">riscv_cmplx_mult_cmplx_q15</ref>(</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"></highlight></codeline>
<codeline lineno="6642"><highlight class="normal"></highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__CmplxByCmplxMult_1gadf0096d33bb5b94fa24e1d767ca1fbea" kindref="member">riscv_cmplx_mult_cmplx_q31</ref>(</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"></highlight></codeline>
<codeline lineno="6656"><highlight class="normal"></highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__CmplxByCmplxMult_1gac191f744cfce681d42b2faf86f98331b" kindref="member">riscv_cmplx_mult_cmplx_f32</ref>(</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcA,</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrcB,</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numSamples);</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"></highlight></codeline>
<codeline lineno="6670"><highlight class="normal"></highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__float__to__x_1ga41b2ddb89a3c532d418b9626c19b0c55" kindref="member">riscv_float_to_q31</ref>(</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"></highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__float__to__x_1ga5c2a33af297b10b8cc1196abe0d07a9e" kindref="member">riscv_float_to_q15</ref>(</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"></highlight></codeline>
<codeline lineno="6694"><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__float__to__x_1gab077f87fd29e71582fe3da092cea4759" kindref="member">riscv_float_to_q7</ref>(</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>float32_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"></highlight></codeline>
<codeline lineno="6706"><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q31__to__x_1ga6cfd64ce23c32128018543b24b7c8315" kindref="member">riscv_q31_to_float</ref>(</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"></highlight></codeline>
<codeline lineno="6718"><highlight class="normal"></highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q31__to__x_1ga3d2e1c96dc6db63836a5f3ce2cce9ee7" kindref="member">riscv_q31_to_q15</ref>(</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q31__to__x_1ga827854b09e2e74b27598e472d3be407c" kindref="member">riscv_q31_to_q7</ref>(</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q31_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"></highlight></codeline>
<codeline lineno="6742"><highlight class="normal"></highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q15__to__x_1ga2832c664cfe9513b462055f22841c410" kindref="member">riscv_q15_to_float</ref>(</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"></highlight></codeline>
<codeline lineno="6754"><highlight class="normal"></highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q15__to__x_1ga8c666cb28d6052de758dc576158bb63a" kindref="member">riscv_q15_to_q31</ref>(</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"></highlight></codeline>
<codeline lineno="6766"><highlight class="normal"></highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q15__to__x_1gae1915220a3a437d970c04d88969eb39c" kindref="member">riscv_q15_to_q7</ref>(</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q15_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q7_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"></highlight></codeline>
<codeline lineno="6778"><highlight class="normal"></highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q7__to__x_1ga47122fb81b50e2fbca24c08984d6f4f6" kindref="member">riscv_q7_to_float</ref>(</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float32_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"></highlight></codeline>
<codeline lineno="6790"><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q7__to__x_1gaf2af4056316b2e14d4fadf5c7150d5d7" kindref="member">riscv_q7_to_q31</ref>(</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q31_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"></highlight></codeline>
<codeline lineno="6802"><highlight class="normal"></highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__q7__to__x_1gafadda37edcebe4d34507cf54a03b2e46" kindref="member">riscv_q7_to_q15</ref>(</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q7_t<sp/>*<sp/>pSrc,</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q15_t<sp/>*<sp/>pDst,</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>blockSize);</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"></highlight></codeline>
<codeline lineno="6814"><highlight class="normal"></highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>float32_t<sp/><ref refid="group__BilinearInterpolate_1ga73d95f5324a831bf2d8f2b29dbd8664e" kindref="member">riscv_bilinear_interp_f32</ref>(</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structriscv__bilinear__interp__instance__f32" kindref="compound">riscv_bilinear_interp_instance_f32</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/>float32_t<sp/>X,</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/>float32_t<sp/>Y)</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>out;</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>f00,<sp/>f01,<sp/>f10,<sp/>f11;</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>*pData<sp/>=<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__f32_1a9aa5261cb806411a2c26f50a6f2c5659" kindref="member">pData</ref>;</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>xIndex,<sp/>yIndex,<sp/>index;</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>xdiff,<sp/>ydiff;</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/>float32_t<sp/>b1,<sp/>b2,<sp/>b3,<sp/>b4;</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"></highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/>xIndex<sp/>=<sp/>(int32_t)<sp/>X;</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/>yIndex<sp/>=<sp/>(int32_t)<sp/>Y;</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"></highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Care<sp/>taken<sp/>for<sp/>table<sp/>outside<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>zero<sp/>output<sp/>when<sp/>values<sp/>are<sp/>outside<sp/>table<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xIndex<sp/>&lt;<sp/>0<sp/>||<sp/>xIndex<sp/>&gt;<sp/>(S-&gt;<ref refid="structriscv__bilinear__interp__instance__f32_1a65980d626c21403dce2acbe111972cc6" kindref="member">numRows</ref><sp/>-<sp/>1)<sp/>||<sp/>yIndex<sp/>&lt;<sp/>0<sp/>||<sp/>yIndex<sp/>&gt;<sp/>(S-&gt;<ref refid="structriscv__bilinear__interp__instance__f32_1aca2cfd14fd2c4a602ddcb64153c74890" kindref="member">numCols</ref><sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"></highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>index<sp/>for<sp/>two<sp/>nearest<sp/>points<sp/>in<sp/>X-direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(xIndex<sp/>-<sp/>1)<sp/>+<sp/>(yIndex<sp/>-<sp/>1)<sp/>*<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__f32_1aca2cfd14fd2c4a602ddcb64153c74890" kindref="member">numCols</ref>;</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"></highlight></codeline>
<codeline lineno="6909"><highlight class="normal"></highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>points<sp/>in<sp/>X-direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/>f00<sp/>=<sp/>pData[index];</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/>f01<sp/>=<sp/>pData[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"></highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>index<sp/>for<sp/>two<sp/>nearest<sp/>points<sp/>in<sp/>Y-direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(xIndex<sp/>-<sp/>1)<sp/>+<sp/>(yIndex)<sp/>*<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__f32_1aca2cfd14fd2c4a602ddcb64153c74890" kindref="member">numCols</ref>;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"></highlight></codeline>
<codeline lineno="6917"><highlight class="normal"></highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>points<sp/>in<sp/>Y-direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/>f10<sp/>=<sp/>pData[index];</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/>f11<sp/>=<sp/>pData[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"></highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>intermediate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>f00;</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>f01<sp/>-<sp/>f00;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/>b3<sp/>=<sp/>f10<sp/>-<sp/>f00;</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/>b4<sp/>=<sp/>f00<sp/>-<sp/>f01<sp/>-<sp/>f10<sp/>+<sp/>f11;</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"></highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>fractional<sp/>part<sp/>in<sp/>X<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/>xdiff<sp/>=<sp/>X<sp/>-<sp/>xIndex;</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>fractional<sp/>part<sp/>in<sp/>Y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/>ydiff<sp/>=<sp/>Y<sp/>-<sp/>yIndex;</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"></highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>bi-linear<sp/>interpolated<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>b1<sp/>+<sp/>b2<sp/>*<sp/>xdiff<sp/>+<sp/>b3<sp/>*<sp/>ydiff<sp/>+<sp/>b4<sp/>*<sp/>xdiff<sp/>*<sp/>ydiff;</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"></highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>to<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(out);</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"></highlight></codeline>
<codeline lineno="6941"><highlight class="normal"></highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q31_t<sp/><ref refid="group__BilinearInterpolate_1ga29d404cf5e53e6aefb80a09328ccc0a6" kindref="member">riscv_bilinear_interp_q31</ref>(</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><ref refid="structriscv__bilinear__interp__instance__q31" kindref="compound">riscv_bilinear_interp_instance_q31</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/>q31_t<sp/>X,</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/>q31_t<sp/>Y)</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>out;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>acc<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>xfract,<sp/>yfract;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>X,<sp/>Y<sp/>fractional<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>x1,<sp/>x2,<sp/>y1,<sp/>y2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>rI,<sp/>cI;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Row<sp/>and<sp/>column<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>*pYData<sp/>=<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__q31_1a5deaf26d9142790467a5c499dd7ad514" kindref="member">pData</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>output<sp/>table<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nCols<sp/>=<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__q31_1a588500086c96bf5e8370e73a52850b9a" kindref="member">numCols</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>num<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6961"><highlight class="normal"></highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/>rI<sp/>=<sp/>((X<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"></highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/>cI<sp/>=<sp/>((Y<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"></highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Care<sp/>taken<sp/>for<sp/>table<sp/>outside<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>zero<sp/>output<sp/>when<sp/>values<sp/>are<sp/>outside<sp/>table<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rI<sp/>&lt;<sp/>0<sp/>||<sp/>rI<sp/>&gt;<sp/>(S-&gt;<ref refid="structriscv__bilinear__interp__instance__q31_1a7f24c32659c95705b84864897dfb3f5c" kindref="member">numRows</ref><sp/>-<sp/>1)<sp/>||<sp/>cI<sp/>&lt;<sp/>0<sp/>||<sp/>cI<sp/>&gt;<sp/>(S-&gt;<ref refid="structriscv__bilinear__interp__instance__q31_1a588500086c96bf5e8370e73a52850b9a" kindref="member">numCols</ref><sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"></highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>left<sp/>xfract<sp/>by<sp/>11<sp/>to<sp/>keep<sp/>1.31<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/>xfract<sp/>=<sp/>(X<sp/>&amp;<sp/>0x000FFFFF)<sp/>&lt;&lt;<sp/>11U;</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"></highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>pYData[(rI)<sp/>+<sp/>(int32_t)nCols<sp/>*<sp/>(cI)<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>pYData[(rI)<sp/>+<sp/>(int32_t)nCols<sp/>*<sp/>(cI)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"></highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>left<sp/>yfract<sp/>by<sp/>11<sp/>to<sp/>keep<sp/>1.31<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/>yfract<sp/>=<sp/>(Y<sp/>&amp;<sp/>0x000FFFFF)<sp/>&lt;&lt;<sp/>11U;</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"></highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[(rI)<sp/>+<sp/>(int32_t)nCols<sp/>*<sp/>(cI<sp/>+<sp/>1)<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>pYData[(rI)<sp/>+<sp/>(int32_t)nCols<sp/>*<sp/>(cI<sp/>+<sp/>1)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>x1<sp/>*<sp/>(1-xfract<sp/>)<sp/>*<sp/>(1-yfract)<sp/>and<sp/>acc<sp/>is<sp/>in<sp/>3.29(q29)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((q31_t)<sp/>(((q63_t)<sp/>x1<sp/><sp/>*<sp/>(0x7FFFFFFF<sp/>-<sp/>xfract))<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>((q31_t)<sp/>(((q63_t)<sp/>out<sp/>*<sp/>(0x7FFFFFFF<sp/>-<sp/>yfract))<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"></highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x2<sp/>*<sp/>(xfract)<sp/>*<sp/>(1-yfract)<sp/><sp/>in<sp/>3.29(q29)<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((q31_t)<sp/>((q63_t)<sp/>x2<sp/>*<sp/>(0x7FFFFFFF<sp/>-<sp/>yfract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>((q31_t)<sp/>((q63_t)<sp/>out<sp/>*<sp/>(xfract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"></highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y1<sp/>*<sp/>(1<sp/>-<sp/>xfract)<sp/>*<sp/>(yfract)<sp/><sp/>in<sp/>3.29(q29)<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((q31_t)<sp/>((q63_t)<sp/>y1<sp/>*<sp/>(0x7FFFFFFF<sp/>-<sp/>xfract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>((q31_t)<sp/>((q63_t)<sp/>out<sp/>*<sp/>(yfract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y2<sp/>*<sp/>(xfract)<sp/>*<sp/>(yfract)<sp/><sp/>in<sp/>3.29(q29)<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((q31_t)<sp/>((q63_t)<sp/>y2<sp/>*<sp/>(xfract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>((q31_t)<sp/>((q63_t)<sp/>out<sp/>*<sp/>(yfract)<sp/>&gt;&gt;<sp/>32));</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"></highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>acc<sp/>to<sp/>1.31(q31)<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>((q31_t)(acc<sp/>&lt;&lt;<sp/>2));</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"></highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q15_t<sp/><ref refid="group__BilinearInterpolate_1gae5d2d0100c70022e6b247d3721803fd0" kindref="member">riscv_bilinear_interp_q15</ref>(</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><ref refid="structriscv__bilinear__interp__instance__q15" kindref="compound">riscv_bilinear_interp_instance_q15</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/>q31_t<sp/>X,</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/>q31_t<sp/>Y)</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/>q63_t<sp/>acc<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>out;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/>x1,<sp/>x2,<sp/>y1,<sp/>y2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>xfract,<sp/>yfract;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>X,<sp/>Y<sp/>fractional<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>rI,<sp/>cI;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Row<sp/>and<sp/>column<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/>q15_t<sp/>*pYData<sp/>=<sp/>S-&gt;pData;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>output<sp/>table<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nCols<sp/>=<sp/>S-&gt;numCols;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>num<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7035"><highlight class="normal"></highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/>rI<sp/>=<sp/>((X<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"></highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/>cI<sp/>=<sp/>((Y<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"></highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Care<sp/>taken<sp/>for<sp/>table<sp/>outside<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>zero<sp/>output<sp/>when<sp/>values<sp/>are<sp/>outside<sp/>table<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rI<sp/>&lt;<sp/>0<sp/>||<sp/>rI<sp/>&gt;<sp/>(S-&gt;numRows<sp/>-<sp/>1)<sp/>||<sp/>cI<sp/>&lt;<sp/>0<sp/>||<sp/>cI<sp/>&gt;<sp/>(S-&gt;numCols<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"></highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xfract<sp/>should<sp/>be<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/>xfract<sp/>=<sp/>(X<sp/>&amp;<sp/>0x000FFFFF);</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI)<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"></highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>yfract<sp/>should<sp/>be<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/>yfract<sp/>=<sp/>(Y<sp/>&amp;<sp/>0x000FFFFF);</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"></highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI<sp/>+<sp/>1)<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI<sp/>+<sp/>1)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"></highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>x1<sp/>*<sp/>(1-xfract<sp/>)<sp/>*<sp/>(1-yfract)<sp/>and<sp/>acc<sp/>is<sp/>in<sp/>13.51<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x1<sp/>is<sp/>in<sp/>1.15(q15),<sp/>xfract<sp/>in<sp/>12.20<sp/>format<sp/>and<sp/>out<sp/>is<sp/>in<sp/>13.35<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>13.35<sp/>to<sp/>13.31<sp/>by<sp/>right<sp/>shifting<sp/><sp/>and<sp/>out<sp/>is<sp/>in<sp/>1.31<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>x1<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>xfract))<sp/>&gt;&gt;<sp/>4U);</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>((q63_t)<sp/>out<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>yfract));</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"></highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x2<sp/>*<sp/>(xfract)<sp/>*<sp/>(1-yfract)<sp/><sp/>in<sp/>1.51<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>x2<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>yfract))<sp/>&gt;&gt;<sp/>4U);</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>((q63_t)<sp/>out<sp/>*<sp/>(xfract));</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y1<sp/>*<sp/>(1<sp/>-<sp/>xfract)<sp/>*<sp/>(yfract)<sp/><sp/>in<sp/>1.51<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>y1<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>xfract))<sp/>&gt;&gt;<sp/>4U);</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>((q63_t)<sp/>out<sp/>*<sp/>(yfract));</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y2<sp/>*<sp/>(xfract)<sp/>*<sp/>(yfract)<sp/><sp/>in<sp/>1.51<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>y2<sp/>*<sp/>(xfract))<sp/>&gt;&gt;<sp/>4U);</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>((q63_t)<sp/>out<sp/>*<sp/>(yfract));</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>is<sp/>in<sp/>13.51<sp/>format<sp/>and<sp/>down<sp/>shift<sp/>acc<sp/>by<sp/>36<sp/>times<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>out<sp/>to<sp/>1.15<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((q15_t)(acc<sp/>&gt;&gt;<sp/>36));</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"></highlight></codeline>
<codeline lineno="7093"><highlight class="normal"></highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/>__STATIC_FORCEINLINE<sp/>q7_t<sp/><ref refid="group__BilinearInterpolate_1ga16a00a278d5ab41069b1734692ae3a25" kindref="member">riscv_bilinear_interp_q7</ref>(</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><ref refid="structriscv__bilinear__interp__instance__q7" kindref="compound">riscv_bilinear_interp_instance_q7</ref><sp/>*<sp/>S,</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/>q31_t<sp/>X,</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/>q31_t<sp/>Y)</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/>q63_t<sp/>acc<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>out;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Temporary<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/>q31_t<sp/>xfract,<sp/>yfract;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>X,<sp/>Y<sp/>fractional<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/>q7_t<sp/>x1,<sp/>x2,<sp/>y1,<sp/>y2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nearest<sp/>output<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>rI,<sp/>cI;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Row<sp/>and<sp/>column<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/>q7_t<sp/>*pYData<sp/>=<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__q7_1afbdb0b1c1345ddd054bde0a7846e7716" kindref="member">pData</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>output<sp/>table<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nCols<sp/>=<sp/>S-&gt;<ref refid="structriscv__bilinear__interp__instance__q7_1a1ba5f9d652f9a57325ab8a43aa85ebe7" kindref="member">numCols</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>num<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7113"><highlight class="normal"></highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/>rI<sp/>=<sp/>((X<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"></highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Input<sp/>is<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>12<sp/>bits<sp/>for<sp/>the<sp/>table<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>value<sp/>calculation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/>cI<sp/>=<sp/>((Y<sp/>&amp;<sp/>(q31_t)0xFFF00000)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"></highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Care<sp/>taken<sp/>for<sp/>table<sp/>outside<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>zero<sp/>output<sp/>when<sp/>values<sp/>are<sp/>outside<sp/>table<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rI<sp/>&lt;<sp/>0<sp/>||<sp/>rI<sp/>&gt;<sp/>(S-&gt;<ref refid="structriscv__bilinear__interp__instance__q7_1ac5e91cc06f10f52df8cd57d95d5d9ceb" kindref="member">numRows</ref><sp/>-<sp/>1)<sp/>||<sp/>cI<sp/>&lt;<sp/>0<sp/>||<sp/>cI<sp/>&gt;<sp/>(S-&gt;<ref refid="structriscv__bilinear__interp__instance__q7_1a1ba5f9d652f9a57325ab8a43aa85ebe7" kindref="member">numCols</ref><sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"></highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xfract<sp/>should<sp/>be<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/>xfract<sp/>=<sp/>(X<sp/>&amp;<sp/>(q31_t)0x000FFFFF);</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"></highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI)<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"></highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>20<sp/>bits<sp/>for<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>yfract<sp/>should<sp/>be<sp/>in<sp/>12.20<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/>yfract<sp/>=<sp/>(Y<sp/>&amp;<sp/>(q31_t)0x000FFFFF);</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"></highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>two<sp/>nearest<sp/>output<sp/>values<sp/>from<sp/>the<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI<sp/>+<sp/>1)<sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>pYData[((uint32_t)rI)<sp/>+<sp/>nCols<sp/>*<sp/>((uint32_t)cI<sp/>+<sp/>1)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculation<sp/>of<sp/>x1<sp/>*<sp/>(1-xfract<sp/>)<sp/>*<sp/>(1-yfract)<sp/>and<sp/>acc<sp/>is<sp/>in<sp/>16.47<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((x1<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>xfract)));</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(((q63_t)<sp/>out<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>yfract)));</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"></highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x2<sp/>*<sp/>(xfract)<sp/>*<sp/>(1-yfract)<sp/><sp/>in<sp/>2.22<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((x2<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>yfract)));</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(((q63_t)<sp/>out<sp/>*<sp/>(xfract)));</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"></highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y1<sp/>*<sp/>(1<sp/>-<sp/>xfract)<sp/>*<sp/>(yfract)<sp/><sp/>in<sp/>2.22<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((y1<sp/>*<sp/>(0xFFFFF<sp/>-<sp/>xfract)));</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(((q63_t)<sp/>out<sp/>*<sp/>(yfract)));</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"></highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y2<sp/>*<sp/>(xfract)<sp/>*<sp/>(yfract)<sp/><sp/>in<sp/>2.22<sp/>and<sp/>adding<sp/>to<sp/>acc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>((y2<sp/>*<sp/>(yfract)));</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(((q63_t)<sp/>out<sp/>*<sp/>(xfract)));</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"></highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>acc<sp/>in<sp/>16.47<sp/>format<sp/>and<sp/>down<sp/>shift<sp/>by<sp/>40<sp/>to<sp/>convert<sp/>to<sp/>1.7<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((q7_t)(acc<sp/>&gt;&gt;<sp/>40));</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"></highlight></codeline>
<codeline lineno="7172"><highlight class="comment">/*<sp/>SMMLAR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>multAcc_32x32_keep32_R(a,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="7174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(q31_t)<sp/>(((((q63_t)<sp/>a)<sp/>&lt;&lt;<sp/>32)<sp/>+<sp/>((q63_t)<sp/>x<sp/>*<sp/>y)<sp/>+<sp/>0x80000000LL<sp/>)<sp/>&gt;&gt;<sp/>32)</highlight></codeline>
<codeline lineno="7175"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SMMLSR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>multSub_32x32_keep32_R(a,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="7178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(q31_t)<sp/>(((((q63_t)<sp/>a)<sp/>&lt;&lt;<sp/>32)<sp/>-<sp/>((q63_t)<sp/>x<sp/>*<sp/>y)<sp/>+<sp/>0x80000000LL<sp/>)<sp/>&gt;&gt;<sp/>32)</highlight></codeline>
<codeline lineno="7179"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SMMULR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mult_32x32_keep32_R(a,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="7182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>x<sp/>*<sp/>y<sp/>+<sp/>0x80000000LL<sp/>)<sp/>&gt;&gt;<sp/>32)</highlight></codeline>
<codeline lineno="7183"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7184"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SMMLA<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>multAcc_32x32_keep32(a,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="7186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>(q31_t)<sp/>(((q63_t)<sp/>x<sp/>*<sp/>y)<sp/>&gt;&gt;<sp/>32)</highlight></codeline>
<codeline lineno="7187"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7188"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SMMLS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>multSub_32x32_keep32(a,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="7190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>(q31_t)<sp/>(((q63_t)<sp/>x<sp/>*<sp/>y)<sp/>&gt;&gt;<sp/>32)</highlight></codeline>
<codeline lineno="7191"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7192"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SMMUL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mult_32x32_keep32(a,<sp/>x,<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="7194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(q31_t)<sp/>(((q63_t)<sp/>x<sp/>*<sp/>y<sp/>)<sp/>&gt;&gt;<sp/>32)</highlight></codeline>
<codeline lineno="7195"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7196"><highlight class="normal"></highlight></codeline>
<codeline lineno="7197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOW_OPTIMIZATION_ENTER<sp/>\</highlight></codeline>
<codeline lineno="7198"><highlight class="preprocessor"><sp/><sp/><sp/>__attribute__((<sp/>optimize(&quot;-O1&quot;)<sp/>))</highlight></codeline>
<codeline lineno="7199"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOW_OPTIMIZATION_EXIT</highlight></codeline>
<codeline lineno="7200"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IAR_ONLY_LOW_OPTIMIZATION_ENTER</highlight></codeline>
<codeline lineno="7201"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>IAR_ONLY_LOW_OPTIMIZATION_EXIT</highlight></codeline>
<codeline lineno="7202"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/><sp/>__cplusplus</highlight></codeline>
<codeline lineno="7205"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="7207"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7208"><highlight class="normal"></highlight></codeline>
<codeline lineno="7209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_RISCV_MATH_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="7210"><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Include/riscv_math.h"/>
  </compounddef>
</doxygen>
