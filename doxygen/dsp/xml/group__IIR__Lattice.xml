<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__IIR__Lattice" kind="group">
    <compoundname>IIR_Lattice</compoundname>
    <title>Infinite Impulse Response (IIR) Lattice Filters</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__IIR__Lattice_1ga21cbd80b4efa75ebedacf255f3ae9864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_f32</definition>
        <argsstring>(const riscv_iir_lattice_instance_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_f32</name>
        <param>
          <type>const <ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_f32.c" line="122" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_f32.c" bodystart="122" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga0086fda79e52d27e5dbf1aa5e4e5a568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_init_f32</definition>
        <argsstring>(riscv_iir_lattice_instance_f32 *S, uint16_t numStages, float32_t *pkCoeffs, float32_t *pvCoeffs, float32_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_init_f32</name>
        <param>
          <type><ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pkCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pvCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_f32.c" line="52" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_f32.c" bodystart="52" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga2597e0a4aaf0b8ff9a83b1bb1b8bd801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_init_q15</definition>
        <argsstring>(riscv_iir_lattice_instance_q15 *S, uint16_t numStages, q15_t *pkCoeffs, q15_t *pvCoeffs, q15_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_init_q15</name>
        <param>
          <type><ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pkCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pvCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_q15.c" line="52" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_q15.c" bodystart="52" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga2d089c8a0b6a3b543169569bc6f12f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_init_q31</definition>
        <argsstring>(riscv_iir_lattice_instance_q31 *S, uint16_t numStages, q31_t *pkCoeffs, q31_t *pvCoeffs, q31_t *pState, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_init_q31</name>
        <param>
          <type><ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pkCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pvCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stages in the filter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pkCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to reflection coefficient buffer. The array is of length numStages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pvCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to ladder coefficient buffer. The array is of length numStages+1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. The array is of length numStages+blockSize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_q31.c" line="52" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_init_q31.c" bodystart="52" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga07f17a4cacfb0eaf8e41bc6e705c0a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_q15</definition>
        <argsstring>(const riscv_iir_lattice_instance_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_q15</name>
        <param>
          <type>const <ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_q15.c" line="58" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_q15.c" bodystart="58" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__IIR__Lattice_1ga05b9e1ecf4b9bd838ccab74d9c8d5265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_iir_lattice_q31</definition>
        <argsstring>(const riscv_iir_lattice_instance_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_iir_lattice_q31</name>
        <param>
          <type>const <ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 IIR lattice filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 IIR lattice structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by 2*log2(numStages) bits. After all multiply-accumulates are performed, the 2.62 accumulator is saturated to 1.32 format and then truncated to 1.31 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_q31.c" line="57" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_iir_lattice_q31.c" bodystart="57" bodyend="353"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This set of functions implements lattice filters for Q15, Q31 and floating-point data types. Lattice filters are used in a variety of adaptive filter applications. The filter structure has feedforward and feedback components and the net impulse response is infinite length. The functions operate on blocks of input and output data and each call to the function processes <computeroutput>blockSize</computeroutput> samples through the filter. <computeroutput>pSrc</computeroutput> and <computeroutput>pDst</computeroutput> point to input and output arrays containing <computeroutput>blockSize</computeroutput> values.</para><para><simplesect kind="par"><title>Algorithm</title><para><image type="html" name="IIRLattice.png">Infinite Impulse Response Lattice filter</image>
</para></simplesect>
<simplesect kind="par"><title></title><para><preformatted>
    fN(n)   = x(n)
    fm-1(n) = fm(n) - km * gm-1(n-1)   for m = N, N-1, ..., 1
    gm(n)   = km * fm-1(n) + gm-1(n-1) for m = N, N-1, ..., 1
    y(n)    = vN * gN(n) + vN-1 * gN-1(n) + ...+ v0 * g0(n)
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pkCoeffs</computeroutput> points to array of reflection coefficients of size <computeroutput>numStages</computeroutput>. Reflection Coefficients are stored in time-reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para><preformatted>
   {kN, kN-1, ..., k1}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pvCoeffs</computeroutput> points to the array of ladder coefficients of size <computeroutput>(numStages+1)</computeroutput>. Ladder coefficients are stored in time-reversed order. <preformatted>
    {vN, vN-1, ..., v0}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to a state array of size <computeroutput>numStages + blockSize</computeroutput>. The state variables shown in the figure above (the g values) are stored in the <computeroutput>pState</computeroutput> array. The state variables are updated after each block of data is processed; the coefficients are untouched.</para></simplesect>
<simplesect kind="par"><title>Instance Structure</title><para>The coefficients and state variables for a filter are stored together in an instance data structure. A separate instance structure must be defined for each filter. Coefficient arrays may be shared among several instances while state variable arrays cannot be shared. There are separate instance structure declarations for each of the 3 supported data types.</para></simplesect>
<simplesect kind="par"><title>Initialization Functions</title><para>There is also an associated initialization function for each data type. The initialization function performs the following operations:<itemizedlist>
<listitem><para>Sets the values of the internal structure fields.</para></listitem><listitem><para>Zeros out the values in the state buffer. To do this manually without calling the init function, assign the follow subfields of the instance structure: numStages, pkCoeffs, pvCoeffs, pState. Also set all of the values in pState to zero. </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title></title><para>Use of the initialization function is optional. However, if the initialization function is used, then the instance structure cannot be placed into a const data section. To place an instance structure into a const data section, the instance structure must be manually initialized. Set the values in the state buffer to zeros and then manually initialize the instance structure as follows: <preformatted>
    <ref refid="structriscv__iir__lattice__instance__f32" kindref="compound">riscv_iir_lattice_instance_f32</ref> S = {numStages, pState, pkCoeffs, pvCoeffs};
    <ref refid="structriscv__iir__lattice__instance__q31" kindref="compound">riscv_iir_lattice_instance_q31</ref> S = {numStages, pState, pkCoeffs, pvCoeffs};
    <ref refid="structriscv__iir__lattice__instance__q15" kindref="compound">riscv_iir_lattice_instance_q15</ref> S = {numStages, pState, pkCoeffs, pvCoeffs};
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>numStages</computeroutput> is the number of stages in the filter; <computeroutput>pState</computeroutput> points to the state buffer array; <computeroutput>pkCoeffs</computeroutput> points to array of the reflection coefficients; <computeroutput>pvCoeffs</computeroutput> points to the array of ladder coefficients.</para></simplesect>
<simplesect kind="par"><title>Fixed-Point Behavior</title><para>Care must be taken when using the fixed-point versions of the IIR lattice filter functions. In particular, the overflow and saturation behavior of the accumulator used in each function must be considered. Refer to the function specific documentation below for usage guidelines. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
