<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__BiquadCascadeDF1" kind="group">
    <compoundname>BiquadCascadeDF1</compoundname>
    <title>Biquad Cascade IIR Filters Using Direct Form I Structure</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gac9bd447ab6475b0bbe7aaf14b0a4c6ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_f32</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_f32 *S, const float32_t *pSrc, float32_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_f32</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the floating-point Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_f32.c" line="320" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_f32.c" bodystart="320" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gaaaa59376091d7b8caf6116de4e68f28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_fast_q15</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_fast_q15</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 Biquad cascade filter (fast variant). </para>        </briefdescription>
        <detaileddescription>
<para>Fast but less precise processing function for the Q15 Biquad cascade filter for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This fast version uses a 32-bit accumulator with 2.30 format. The accumulator maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around and distorts the result. In order to avoid overflows completely the input signal must be scaled down by two bits and lie in the range [-0.25 +0.25). The 2.30 accumulator is then shifted by <computeroutput>postShift</computeroutput> bits and the result truncated to 1.15 format by discarding the low 16 bits. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1ga51d1bc8c536ec95a274807dbf6b4c747" kindref="member">riscv_biquad_cascade_df1_q15()</ref> for a slower implementation of this function which uses 64-bit accumulation to avoid wrap around distortion. Both the slow and the fast versions use the same instance structure. Use the function <ref refid="group__BiquadCascadeDF1_1gad0f11309749f0135467c1b476d5a05b8" kindref="member">riscv_biquad_cascade_df1_init_q15()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_fast_q15.c" line="61" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_fast_q15.c" bodystart="61" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gaed838e1892c406620fbb0e131e273d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_fast_q31</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_fast_q31</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 Biquad cascade filter (fast variant). </para>        </briefdescription>
        <detaileddescription>
<para>Fast but less precise processing function for the Q31 Biquad cascade filter for RISC-V3 and RISC-V4.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process per call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>This function is optimized for speed at the expense of fixed-point precision and overflow protection. The result of each 1.31 x 1.31 multiplication is truncated to 2.30 format. These intermediate results are added to a 2.30 accumulator. Finally, the accumulator is saturated and converted to a 1.31 result. The fast version has the same overflow behavior as the standard version and provides less precision since it discards the low 32 bits of each multiplication result. In order to avoid overflows completely the input signal must be scaled down by two bits and lie in the range [-0.25 +0.25). Use the intialization function <ref refid="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" kindref="member">riscv_biquad_cascade_df1_init_q31()</ref> to initialize filter structure. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1ga9db8b6490e760bcbb86366385ffd7a5b" kindref="member">riscv_biquad_cascade_df1_q31()</ref> for a slower implementation of this function which uses 64-bit accumulation to provide higher precision. Both the slow and the fast versions use the same instance structure. Use the function <ref refid="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" kindref="member">riscv_biquad_cascade_df1_init_q31()</ref> to initialize the filter structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_fast_q31.c" line="63" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_fast_q31.c" bodystart="63" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1ga3cdfc93d24e61bf7c88d3d51f01cb73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_init_f32</definition>
        <argsstring>(riscv_biquad_casd_df1_inst_f32 *S, uint8_t numStages, const float32_t *pCoeffs, float32_t *pState)</argsstring>
        <name>riscv_biquad_cascade_df1_init_f32</name>
        <param>
          <type><ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Initialization function for the floating-point Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted></para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> is a pointer to state array. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_f32.c" line="71" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_f32.c" bodystart="71" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gad0f11309749f0135467c1b476d5a05b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_init_q15</definition>
        <argsstring>(riscv_biquad_casd_df1_inst_q15 *S, uint8_t numStages, const q15_t *pCoeffs, q15_t *pState, int8_t postShift)</argsstring>
        <name>riscv_biquad_cascade_df1_init_q15</name>
        <param>
          <type><ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q15 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied to the accumulator result. Varies according to the coefficients format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, 0, b11, b12, a11, a12, b20, 0, b21, b22, a21, a22, ...}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>6*numStages</computeroutput> values. The zero coefficient between <computeroutput>b1</computeroutput> and <computeroutput>b2</computeroutput> facilities use of 16-bit SIMD instructions on the RISC-V4. </para></simplesect>
<simplesect kind="par"><title></title><para>The state variables are stored in the array <computeroutput>pState</computeroutput>. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_q15.c" line="72" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_q15.c" bodystart="72" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1gae8abff148e8233c48bdd9dda2caeaad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_init_q31</definition>
        <argsstring>(riscv_biquad_casd_df1_inst_q31 *S, uint8_t numStages, const q31_t *pCoeffs, q31_t *pState, int8_t postShift)</argsstring>
        <name>riscv_biquad_cascade_df1_init_q31</name>
        <param>
          <type><ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numStages</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for the Q31 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numStages</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 2nd order stages in the filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shift to be applied after the accumulator. Varies according to the coefficients format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Coefficient and State Ordering</title><para>The coefficients are stored in the array <computeroutput>pCoeffs</computeroutput> in the following order: <preformatted>
    {b10, b11, b12, a11, a12, b20, b21, b22, a21, a22, ...}
</preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>where <computeroutput>b1x</computeroutput> and <computeroutput>a1x</computeroutput> are the coefficients for the first stage, <computeroutput>b2x</computeroutput> and <computeroutput>a2x</computeroutput> are the coefficients for the second stage, and so on. The <computeroutput>pCoeffs</computeroutput> array contains a total of <computeroutput>5*numStages</computeroutput> values. </para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> points to state variables array. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted> The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed; the coefficients are untouched. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_q31.c" line="71" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_init_q31.c" bodystart="71" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1ga51d1bc8c536ec95a274807dbf6b4c747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_q15</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q15 *S, const q15_t *pSrc, q15_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_q15</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q15 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the location where the output result is written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. The accumulator is then shifted by <computeroutput>postShift</computeroutput> bits to truncate the result to 1.15 format by discarding the low 16 bits. Finally, the result is saturated to 1.15 format. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1gaaaa59376091d7b8caf6116de4e68f28b" kindref="member">riscv_biquad_cascade_df1_fast_q15()</ref> for a faster but less precise implementation of this filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_q15.c" line="60" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_q15.c" bodystart="60" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="group__BiquadCascadeDF1_1ga9db8b6490e760bcbb86366385ffd7a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_biquad_cascade_df1_q31</definition>
        <argsstring>(const riscv_biquad_casd_df1_inst_q31 *S, const q31_t *pSrc, q31_t *pDst, uint32_t blockSize)</argsstring>
        <name>riscv_biquad_cascade_df1_q31</name>
        <param>
          <type>const <ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for the Q31 Biquad cascade filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 Biquad cascade structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by 2 bits and lie in the range [-0.25 +0.25). After all 5 multiply-accumulates are performed, the 2.62 accumulator is shifted by <computeroutput>postShift</computeroutput> bits and the result truncated to 1.31 format by discarding the low 32 bits. </para></simplesect>
<simplesect kind="remark"><para>Refer to <ref refid="group__BiquadCascadeDF1_1gaed838e1892c406620fbb0e131e273d8d" kindref="member">riscv_biquad_cascade_df1_fast_q31()</ref> for a faster but less precise implementation of this filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_q31.c" line="60" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_biquad_cascade_df1_q31.c" bodystart="60" bodyend="244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This set of functions implements arbitrary order recursive (IIR) filters. The filters are implemented as a cascade of second order Biquad sections. The functions support Q15, Q31 and floating-point data types. Fast version of Q15 and Q31 also available.</para><para>The functions operate on blocks of input and output data and each call to the function processes <computeroutput>blockSize</computeroutput> samples through the filter. <computeroutput>pSrc</computeroutput> points to the array of input data and <computeroutput>pDst</computeroutput> points to the array of output data. Both arrays contain <computeroutput>blockSize</computeroutput> values.</para><para><simplesect kind="par"><title>Algorithm</title><para>Each Biquad stage implements a second order filter using the difference equation: <preformatted>
    y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
</preformatted> A Direct Form I algorithm is used with 5 coefficients and 4 state variables per stage. <image type="html" name="Biquad.png">Single Biquad filter stage</image>
 Coefficients <computeroutput>b0, b1 and b2 </computeroutput> multiply the input signal <computeroutput>x[n]</computeroutput> and are referred to as the feedforward coefficients. Coefficients <computeroutput>a1</computeroutput> and <computeroutput>a2</computeroutput> multiply the output signal <computeroutput>y[n]</computeroutput> and are referred to as the feedback coefficients. Pay careful attention to the sign of the feedback coefficients. Some design tools use the difference equation <preformatted>
    y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] - a1 * y[n-1] - a2 * y[n-2]
</preformatted> In this case the feedback coefficients <computeroutput>a1</computeroutput> and <computeroutput>a2</computeroutput> must be negated when used with the NMSIS DSP Library.</para></simplesect>
<simplesect kind="par"><title></title><para>Higher order filters are realized as a cascade of second order sections. <computeroutput>numStages</computeroutput> refers to the number of second order stages used. For example, an 8th order filter would be realized with <computeroutput>numStages=4</computeroutput> second order stages. <image type="html" name="BiquadCascade.png">8th order filter using a cascade of Biquad stages</image>
 A 9th order filter would be realized with <computeroutput>numStages=5</computeroutput> second order stages with the coefficients for one of the stages configured as a first order filter (<computeroutput>b2=0</computeroutput> and <computeroutput>a2=0</computeroutput>).</para></simplesect>
<simplesect kind="par"><title></title><para>The <computeroutput>pState</computeroutput> points to state variables array. Each Biquad stage has 4 state variables <computeroutput>x[n-1], x[n-2], y[n-1],</computeroutput> and <computeroutput>y[n-2]</computeroutput>. The state variables are arranged in the <computeroutput>pState</computeroutput> array as: <preformatted>
    {x[n-1], x[n-2], y[n-1], y[n-2]}
</preformatted></para></simplesect>
<simplesect kind="par"><title></title><para>The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on. The state array has a total length of <computeroutput>4*numStages</computeroutput> values. The state variables are updated after each block of data is processed, the coefficients are untouched.</para></simplesect>
<simplesect kind="par"><title>Instance Structure</title><para>The coefficients and state variables for a filter are stored together in an instance data structure. A separate instance structure must be defined for each filter. Coefficient arrays may be shared among several instances while state variable arrays cannot be shared. There are separate instance structure declarations for each of the 3 supported data types.</para></simplesect>
<simplesect kind="par"><title>Init Function</title><para>There is also an associated initialization function for each data type. The initialization function performs following operations:<itemizedlist>
<listitem><para>Sets the values of the internal structure fields.</para></listitem><listitem><para>Zeros out the values in the state buffer. To do this manually without calling the init function, assign the follow subfields of the instance structure: numStages, pCoeffs, pState. Also set all of the values in pState to zero.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title></title><para>Use of the initialization function is optional. However, if the initialization function is used, then the instance structure cannot be placed into a const data section. To place an instance structure into a const data section, the instance structure must be manually initialized. Set the values in the state buffer to zeros before static initialization. The code below statically initializes each of the 3 different data type filter instance structures <preformatted>
    <ref refid="structriscv__biquad__casd__df1__inst__f32" kindref="compound">riscv_biquad_casd_df1_inst_f32</ref> S1 = {numStages, pState, pCoeffs};
    <ref refid="structriscv__biquad__casd__df1__inst__q15" kindref="compound">riscv_biquad_casd_df1_inst_q15</ref> S2 = {numStages, pState, pCoeffs, postShift};
    <ref refid="structriscv__biquad__casd__df1__inst__q31" kindref="compound">riscv_biquad_casd_df1_inst_q31</ref> S3 = {numStages, pState, pCoeffs, postShift};
</preformatted> where <computeroutput>numStages</computeroutput> is the number of Biquad stages in the filter; <computeroutput>pState</computeroutput> is the address of the state buffer; <computeroutput>pCoeffs</computeroutput> is the address of the coefficient buffer; <computeroutput>postShift</computeroutput> shift to be applied.</para></simplesect>
<simplesect kind="par"><title>Fixed-Point Behavior</title><para>Care must be taken when using the Q15 and Q31 versions of the Biquad Cascade filter functions. Following issues must be considered:<itemizedlist>
<listitem><para>Scaling of coefficients</para></listitem><listitem><para>Filter gain</para></listitem><listitem><para>Overflow and saturation</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling of coefficients</title><para>Filter coefficients are represented as fractional values and coefficients are restricted to lie in the range <computeroutput>[-1 +1)</computeroutput>. The fixed-point functions have an additional scaling parameter <computeroutput>postShift</computeroutput> which allow the filter coefficients to exceed the range <computeroutput>[+1 -1)</computeroutput>. At the output of the filter&apos;s accumulator is a shift register which shifts the result by <computeroutput>postShift</computeroutput> bits. <image type="html" name="BiquadPostshift.png">Fixed-point Biquad with shift by postShift bits after accumulator</image>
 This essentially scales the filter coefficients by <computeroutput>2^postShift</computeroutput>. For example, to realize the coefficients <preformatted>
   {1.5, -0.8, 1.2, 1.6, -0.9}
</preformatted> set the pCoeffs array to: <preformatted>
   {0.75, -0.4, 0.6, 0.8, -0.45}
</preformatted> and set <computeroutput>postShift=1</computeroutput></para></simplesect>
<simplesect kind="par"><title>Filter gain</title><para>The frequency response of a Biquad filter is a function of its coefficients. It is possible for the gain through the filter to exceed 1.0 meaning that the filter increases the amplitude of certain frequencies. This means that an input signal with amplitude &lt; 1.0 may result in an output &gt; 1.0 and these are saturated or overflowed based on the implementation of the filter. To avoid this behavior the filter needs to be scaled down such that its peak gain &lt; 1.0 or the input signal must be scaled down so that the combination of input and filter are never overflowed.</para></simplesect>
<simplesect kind="par"><title>Overflow and saturation</title><para>For Q15 and Q31 versions, it is described separately as part of the function specific documentation below. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
