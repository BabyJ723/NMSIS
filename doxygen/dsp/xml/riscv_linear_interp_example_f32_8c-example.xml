<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="riscv_linear_interp_example_f32_8c-example" kind="example">
    <compoundname>riscv_linear_interp_example_f32.c</compoundname>
    <detaileddescription>
<para><programlisting><codeline><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Copyright<sp/>(C)<sp/>2010-2012<sp/>ARM<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>Nuclei<sp/>Limited.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline><highlight class="comment">*</highlight></codeline>
<codeline><highlight class="comment">*<sp/>$Date:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17.<sp/>January<sp/>2013</highlight></codeline>
<codeline><highlight class="comment">*<sp/>$Revision:<sp/><sp/><sp/><sp/><sp/>V1.4.0</highlight></codeline>
<codeline><highlight class="comment">*</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Project:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NMSIS<sp/>DSP<sp/>Library</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Title:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>riscv_linear_interp_example_f32.c</highlight></codeline>
<codeline><highlight class="comment">*</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Description:<sp/><sp/><sp/>Example<sp/>code<sp/>demonstrating<sp/>usage<sp/>of<sp/>sin<sp/>function</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>uses<sp/>linear<sp/>interpolation<sp/>to<sp/>get<sp/>higher<sp/>precision</highlight></codeline>
<codeline><highlight class="comment">*</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Target<sp/>Processor:<sp/>RISC-V<sp/>Cores</highlight></codeline>
<codeline><highlight class="comment">*</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline><highlight class="comment">*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline><highlight class="comment">*<sp/>are<sp/>met:</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>ARM<sp/>LIMITED<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline><highlight class="comment">*</highlight></codeline>
<codeline><highlight class="comment">*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline><highlight class="comment">*<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline><highlight class="comment">*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline><highlight class="comment">*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline><highlight class="comment">*<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline><highlight class="comment">*<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline><highlight class="comment">*<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline><highlight class="comment">*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline><highlight class="comment">*<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline><highlight class="comment">*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline><highlight class="comment">*<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline><highlight class="comment">*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/>--------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="preprocessor">#include<sp/>&quot;riscv_math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;math_helper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SNR_THRESHOLD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>90</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TEST_LENGTH_SAMPLES<sp/><sp/><sp/><sp/><sp/>10</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>XSPACING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0.00005f)</highlight></codeline>
<codeline><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Test<sp/>input<sp/>data<sp/>for<sp/>F32<sp/>SIN<sp/>function</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Generated<sp/>by<sp/>the<sp/>MATLAB<sp/>rand()<sp/>function</highlight></codeline>
<codeline><highlight class="comment">*<sp/>randn(&apos;state&apos;,<sp/>0)</highlight></codeline>
<codeline><highlight class="comment">*<sp/>xi<sp/>=<sp/>(((1/4.18318581819710)*<sp/>randn(blockSize,<sp/>1)<sp/>*<sp/>2*<sp/>pi));</highlight></codeline>
<codeline><highlight class="comment">*<sp/>--------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">float32_t<sp/>testInputSin_f32[TEST_LENGTH_SAMPLES]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-0.649716504673081170,<sp/>-2.501723745497831200,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.188250329003310100,<sp/><sp/>0.432092748487532540,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-1.722010988459680800,<sp/><sp/>1.788766476323060600,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1.786136060975809500,<sp/>-0.056525543169408797,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.491596272728153760,<sp/><sp/>0.262309671126153390</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>Reference<sp/>out<sp/>of<sp/>SIN<sp/>F32<sp/>function<sp/>for<sp/>Block<sp/>Size<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>Calculated<sp/>from<sp/>sin(testInputSin_f32)</highlight></codeline>
<codeline><highlight class="comment">*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">float32_t<sp/>testRefSinOutput32_f32[TEST_LENGTH_SAMPLES]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-0.604960695383043530,<sp/>-0.597090287967934840,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.187140422442966500,<sp/><sp/>0.418772124875992690,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>-0.988588831792106880,<sp/><sp/>0.976338412038794010,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.976903856413481100,<sp/>-0.056495446835214236,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.472033731854734240,<sp/><sp/>0.259311907228582830</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>Method<sp/>1:<sp/>Test<sp/>out<sp/>Buffer<sp/>Calculated<sp/>from<sp/>Cubic<sp/>Interpolation</highlight></codeline>
<codeline><highlight class="comment">*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">float32_t<sp/>testOutput[TEST_LENGTH_SAMPLES];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>Method<sp/>2:<sp/>Test<sp/>out<sp/>buffer<sp/>Calculated<sp/>from<sp/>Linear<sp/>Interpolation</highlight></codeline>
<codeline><highlight class="comment">*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">float32_t<sp/>testLinIntOutput[TEST_LENGTH_SAMPLES];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/><sp/>External<sp/>table<sp/>used<sp/>for<sp/>linear<sp/>interpolation</highlight></codeline>
<codeline><highlight class="comment">*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>riscv_linear_interep_table[188495];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Global<sp/>Variables<sp/>for<sp/>caluclating<sp/>SNR&apos;s<sp/>for<sp/>Method1<sp/>&amp;<sp/>Method<sp/>2</highlight></codeline>
<codeline><highlight class="comment">*<sp/>-------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">float32_t<sp/>snr1;</highlight></codeline>
<codeline><highlight class="normal">float32_t<sp/>snr2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Calculation<sp/>of<sp/>Sine<sp/>values<sp/>from<sp/>Cubic<sp/>Interpolation<sp/>and<sp/>Linear<sp/>interpolation</highlight></codeline>
<codeline><highlight class="comment">*<sp/>----------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>riscv_status<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structriscv__linear__interp__instance__f32" kindref="compound">riscv_linear_interp_instance_f32</ref><sp/>S<sp/>=<sp/>{188495,<sp/>-3.141592653589793238,<sp/>XSPACING,<sp/>&amp;riscv_linear_interep_table[0]};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/>Method<sp/>1:<sp/>Test<sp/>out<sp/>Calculated<sp/>from<sp/>Cubic<sp/>Interpolation</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<sp/>TEST_LENGTH_SAMPLES;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testOutput[i]<sp/>=<sp/><ref refid="group__sin_1ga11d805fff25da36b07ff5d2ebfb69dca" kindref="member">riscv_sin_f32</ref>(testInputSin_f32[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/>Method<sp/>2:<sp/>Test<sp/>out<sp/>Calculated<sp/>from<sp/>Cubic<sp/>Interpolation<sp/>and<sp/>Linear<sp/>interpolation</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<sp/>TEST_LENGTH_SAMPLES;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testLinIntOutput[i]<sp/>=<sp/><ref refid="group__LinearInterpolate_1gaf5398260d5170ca63d3f67743d8a5533" kindref="member">riscv_linear_interp_f32</ref>(&amp;S,<sp/>testInputSin_f32[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SNR<sp/>calculation<sp/>for<sp/>method<sp/>1</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>snr1<sp/>=<sp/>riscv_snr_f32(testRefSinOutput32_f32,<sp/>testOutput,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SNR<sp/>calculation<sp/>for<sp/>method<sp/>2</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>snr2<sp/>=<sp/>riscv_snr_f32(testRefSinOutput32_f32,<sp/>testLinIntOutput,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialise<sp/>status<sp/>depending<sp/>on<sp/>SNR<sp/>calculations</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*------------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>snr2<sp/>&gt;<sp/>snr1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>RISCV_MATH_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>RISCV_MATH_TEST_FAILURE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>**<sp/>Loop<sp/>here<sp/>if<sp/>the<sp/>signals<sp/>fail<sp/>the<sp/>PASS<sp/>check.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>**<sp/>This<sp/>denotes<sp/>a<sp/>test<sp/>failure</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>**<sp/>-------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>!=<sp/>RISCV_MATH_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;passed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
