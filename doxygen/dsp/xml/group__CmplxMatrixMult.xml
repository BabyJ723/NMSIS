<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__CmplxMatrixMult" kind="group">
    <compoundname>CmplxMatrixMult</compoundname>
    <title>Complex Matrix Multiplication</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__CmplxMatrixMult_1gaefc3c7a3dba4761e5539f212124500c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_cmplx_mult_f32</definition>
        <argsstring>(const riscv_matrix_instance_f32 *pSrcA, const riscv_matrix_instance_f32 *pSrcB, riscv_matrix_instance_f32 *pDst)</argsstring>
        <name>riscv_mat_cmplx_mult_f32</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__f32" kindref="compound">riscv_matrix_instance_f32</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Floating-point Complex matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para>Floating-point, complex, matrix multiplication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output complex matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_f32.c" line="407" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_f32.c" bodystart="407" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxMatrixMult_1ga38acb81acbd0dce4f1eb4bf533647181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_cmplx_mult_q15</definition>
        <argsstring>(const riscv_matrix_instance_q15 *pSrcA, const riscv_matrix_instance_q15 *pSrcB, riscv_matrix_instance_q15 *pDst, q15_t *pScratch)</argsstring>
        <name>riscv_mat_cmplx_mult_q15</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q15" kindref="compound">riscv_matrix_instance_q15</ref> *</type>
          <declname>pDst</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pScratch</declname>
        </param>
        <briefdescription>
<para>Q15 Complex matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para>Q15, complex, matrix multiplication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pScratch</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an array for storing intermediate results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Conditions for optimum performance</title><para>Input, output and state buffers should be aligned by 32-bit</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The inputs to the multiplications are in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. This approach provides 33 guard bits and there is no risk of overflow. The 34.30 result is then truncated to 34.15 format by discarding the low 15 bits and then saturated to 1.15 format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_q15.c" line="62" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_q15.c" bodystart="62" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="group__CmplxMatrixMult_1gab4de134e992a9fbb53bff2965ad72cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>riscv_status</type>
        <definition>riscv_status riscv_mat_cmplx_mult_q31</definition>
        <argsstring>(const riscv_matrix_instance_q31 *pSrcA, const riscv_matrix_instance_q31 *pSrcB, riscv_matrix_instance_q31 *pDst)</argsstring>
        <name>riscv_mat_cmplx_mult_q31</name>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcA</declname>
        </param>
        <param>
          <type>const <ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pSrcB</declname>
        </param>
        <param>
          <type><ref refid="structriscv__matrix__instance__q31" kindref="compound">riscv_matrix_instance_q31</ref> *</type>
          <declname>pDst</declname>
        </param>
        <briefdescription>
<para>Q31 Complex matrix multiplication. </para>        </briefdescription>
        <detaileddescription>
<para>Q31, complex, matrix multiplication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pSrcA</parametername>
</parameternamelist>
<parameterdescription>
<para>points to first input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrcB</parametername>
</parameternamelist>
<parameterdescription>
<para>points to second input complex matrix structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pDst</parametername>
</parameternamelist>
<parameterdescription>
<para>points to output complex matrix structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>execution status<itemizedlist>
<listitem><para>RISCV_MATH_SUCCESS : Operation successful</para></listitem><listitem><para>RISCV_MATH_SIZE_MISMATCH : Matrix size check failed</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. There is no saturation on intermediate additions. Thus, if the accumulator overflows it wraps around and distorts the result. The input signals should be scaled down to avoid intermediate overflows. The input is thus scaled down by log2(numColsA) bits to avoid overflows, as a total of numColsA additions are performed internally. The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_q31.c" line="61" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/MatrixFunctions/riscv_mat_cmplx_mult_q31.c" bodystart="61" bodyend="280"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Complex Matrix multiplication is only defined if the number of columns of the first matrix equals the number of rows of the second matrix. Multiplying an <computeroutput>M x N</computeroutput> matrix with an <computeroutput>N x P</computeroutput> matrix results in an <computeroutput>M x P</computeroutput> matrix. <simplesect kind="par"><title></title><para>When matrix size checking is enabled, the functions check:<itemizedlist>
<listitem><para>that the inner dimensions of <computeroutput>pSrcA</computeroutput> and <computeroutput>pSrcB</computeroutput> are equal;</para></listitem><listitem><para>that the size of the output matrix equals the outer dimensions of <computeroutput>pSrcA</computeroutput> and <computeroutput>pSrcB</computeroutput>. </para></listitem></itemizedlist>
</para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
