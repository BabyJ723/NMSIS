<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group__LMS__NORM" kind="group">
    <compoundname>LMS_NORM</compoundname>
    <title>Normalized LMS Filters</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__LMS__NORM_1ga430d4faa1d3bc35f11c7161d32829b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_f32</definition>
        <argsstring>(riscv_lms_norm_instance_f32 *S, const float32_t *pSrc, float32_t *pRef, float32_t *pOut, float32_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_f32</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const float32_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for floating-point normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point normalized LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_f32.c" line="160" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_f32.c" bodystart="160" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga39ba5def59568ef5db5a2da0f6632d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_init_f32</definition>
        <argsstring>(riscv_lms_norm_instance_f32 *S, uint16_t numTaps, float32_t *pCoeffs, float32_t *pState, float32_t mu, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_init_f32</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__f32" kindref="compound">riscv_lms_norm_instance_f32</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>float32_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>float32_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Initialization function for floating-point normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the floating-point LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to an array of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS__NORM_1ga430d4faa1d3bc35f11c7161d32829b54" kindref="member">riscv_lms_norm_f32()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_f32.c" line="61" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_f32.c" bodystart="61" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga30c00d2a58bd561f823b89b44ae71556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_init_q15</definition>
        <argsstring>(riscv_lms_norm_instance_q15 *S, uint16_t numTaps, q15_t *pCoeffs, q15_t *pState, q15_t mu, uint32_t blockSize, uint8_t postShift)</argsstring>
        <name>riscv_lms_norm_init_q15</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for Q15 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to the array of state variables and size of array is <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS__NORM_1gaedc80687fb3a431b2f7616caebbc740c" kindref="member">riscv_lms_norm_q15()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_q15.c" line="60" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_q15.c" bodystart="60" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1ga8545ba6c1d850ed23d265dc098c6b092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_init_q31</definition>
        <argsstring>(riscv_lms_norm_instance_q31 *S, uint16_t numTaps, q31_t *pCoeffs, q31_t *pState, q31_t mu, uint32_t blockSize, uint8_t postShift)</argsstring>
        <name>riscv_lms_norm_init_q31</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>numTaps</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pCoeffs</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pState</declname>
        </param>
        <param>
          <type>q31_t</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>postShift</declname>
        </param>
        <briefdescription>
<para>Initialization function for Q31 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 normalized LMS filter structure. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numTaps</parametername>
</parameternamelist>
<parameterdescription>
<para>number of filter coefficients. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pCoeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>points to coefficient buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pState</parametername>
</parameternamelist>
<parameterdescription>
<para>points to state buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mu</parametername>
</parameternamelist>
<parameterdescription>
<para>step size that controls filter coefficient updates. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">postShift</parametername>
</parameternamelist>
<parameterdescription>
<para>bit shift applied to coefficients. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Details</title><para><computeroutput>pCoeffs</computeroutput> points to the array of filter coefficients stored in time reversed order: <preformatted>
   {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
</preformatted> The initial filter coefficients serve as a starting point for the adaptive filter. <computeroutput>pState</computeroutput> points to an array of length <computeroutput>numTaps+blockSize-1</computeroutput> samples, where <computeroutput>blockSize</computeroutput> is the number of input samples processed by each call to <computeroutput><ref refid="group__LMS__NORM_1gad65f37ceb84e37e316875bcdad4e9be1" kindref="member">riscv_lms_norm_q31()</ref></computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_q31.c" line="59" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_init_q31.c" bodystart="59" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1gaedc80687fb3a431b2f7616caebbc740c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_q15</definition>
        <argsstring>(riscv_lms_norm_instance_q15 *S, const q15_t *pSrc, q15_t *pRef, q15_t *pOut, q15_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_q15</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q15" kindref="compound">riscv_lms_norm_instance_q15</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q15_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>q15_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for Q15 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q15 normalized LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using a 64-bit internal accumulator. Both coefficients and state variables are represented in 1.15 format and multiplications yield a 2.30 result. The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format. There is no risk of internal overflow with this approach and the full precision of intermediate multiplications is preserved. After all additions have been performed, the accumulator is truncated to 34.15 format by discarding low 15 bits. Lastly, the accumulator is saturated to yield a result in 1.15 format. </para></simplesect>
<simplesect kind="par"><title></title><para>In this filter, filter coefficients are updated for each sample and the updation of filter cofficients are saturted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_q15.c" line="66" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_q15.c" bodystart="66" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__LMS__NORM_1gad65f37ceb84e37e316875bcdad4e9be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riscv_lms_norm_q31</definition>
        <argsstring>(riscv_lms_norm_instance_q31 *S, const q31_t *pSrc, q31_t *pRef, q31_t *pOut, q31_t *pErr, uint32_t blockSize)</argsstring>
        <name>riscv_lms_norm_q31</name>
        <param>
          <type><ref refid="structriscv__lms__norm__instance__q31" kindref="compound">riscv_lms_norm_instance_q31</ref> *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>const q31_t *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pRef</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pOut</declname>
        </param>
        <param>
          <type>q31_t *</type>
          <declname>pErr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>blockSize</declname>
        </param>
        <briefdescription>
<para>Processing function for Q31 normalized LMS filter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">S</parametername>
</parameternamelist>
<parameterdescription>
<para>points to an instance of the Q31 normalized LMS filter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pSrc</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pRef</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of reference data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOut</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of output data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pErr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the block of error data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples to process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="par"><title>Scaling and Overflow Behavior</title><para>The function is implemented using an internal 64-bit accumulator. The accumulator has a 2.62 format and maintains full precision of the intermediate multiplication results but provides only a single guard bit. Thus, if the accumulator result overflows it wraps around rather than clip. In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bits. The reference signal should not be scaled down. After all multiply-accumulates are performed, the 2.62 accumulator is shifted and saturated to 1.31 format to yield the final result. The output signal and error signal are in 1.31 format. </para></simplesect>
<simplesect kind="par"><title></title><para>In this filter, filter coefficients are updated for each sample and the updation of filter cofficients are saturted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_q31.c" line="66" column="1" bodyfile="/home/travis/build/Nuclei-Software/NMSIS/NMSIS/DSP/Source/FilteringFunctions/riscv_lms_norm_q31.c" bodystart="66" bodyend="308"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This set of functions implements a commonly used adaptive filter. It is related to the Least Mean Square (LMS) adaptive filter and includes an additional normalization factor which increases the adaptation rate of the filter. The NMSIS DSP Library contains normalized LMS filter functions that operate on Q15, Q31, and floating-point data types.</para><para>A normalized least mean square (NLMS) filter consists of two components as shown below. The first component is a standard transversal or FIR filter. The second component is a coefficient update mechanism. The NLMS filter has two input signals. The &quot;input&quot; feeds the FIR filter while the &quot;reference input&quot; corresponds to the desired output of the FIR filter. That is, the FIR filter coefficients are updated so that the output of the FIR filter matches the reference input. The filter coefficient update mechanism is based on the difference between the FIR filter output and the reference input. This &quot;error signal&quot; tends towards zero as the filter adapts. The NLMS processing functions accept the input and reference input signals and generate the filter output and error signal. <image type="html" name="LMS.png">Internal structure of the NLMS adaptive filter</image>
 The functions operate on blocks of data and each call to the function processes <computeroutput>blockSize</computeroutput> samples through the filter. <computeroutput>pSrc</computeroutput> points to input signal, <computeroutput>pRef</computeroutput> points to reference signal, <computeroutput>pOut</computeroutput> points to output signal and <computeroutput>pErr</computeroutput> points to error signal. All arrays contain <computeroutput>blockSize</computeroutput> values.</para><para>The functions operate on a block-by-block basis. Internally, the filter coefficients <computeroutput>b[n]</computeroutput> are updated on a sample-by-sample basis. The convergence of the LMS filter is slower compared to the normalized LMS algorithm.</para><para><simplesect kind="par"><title>Algorithm</title><para>The output signal <computeroutput>y[n]</computeroutput> is computed by a standard FIR filter: <preformatted>
     y[n] = b[0] * x[n] + b[1] * x[n-1] + b[2] * x[n-2] + ...+ b[numTaps-1] * x[n-numTaps+1]
 </preformatted></para></simplesect>
<simplesect kind="par"><title></title><para>The error signal equals the difference between the reference signal <computeroutput>d[n]</computeroutput> and the filter output: <preformatted>
     e[n] = d[n] - y[n].
 </preformatted></para></simplesect>
<simplesect kind="par"><title></title><para>After each sample of the error signal is computed the instanteous energy of the filter state variables is calculated: <preformatted>
    E = x[n]^2 + x[n-1]^2 + ... + x[n-numTaps+1]^2.
 </preformatted> The filter coefficients <computeroutput>b[k]</computeroutput> are then updated on a sample-by-sample basis: <preformatted>
     b[k] = b[k] + e[n] * (mu/E) * x[n-k],  for k=0, 1, ..., numTaps-1
 </preformatted> where <computeroutput>mu</computeroutput> is the step size and controls the rate of coefficient convergence. </para></simplesect>
<simplesect kind="par"><title></title><para>In the APIs, <computeroutput>pCoeffs</computeroutput> points to a coefficient array of size <computeroutput>numTaps</computeroutput>. Coefficients are stored in time reversed order. </para></simplesect>
<simplesect kind="par"><title></title><para><preformatted>
    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
 </preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para><computeroutput>pState</computeroutput> points to a state array of size <computeroutput>numTaps + blockSize - 1</computeroutput>. Samples in the state buffer are stored in the order: </para></simplesect>
<simplesect kind="par"><title></title><para><preformatted>
    {x[n-numTaps+1], x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2]....x[0], x[1], ..., x[blockSize-1]}
 </preformatted> </para></simplesect>
<simplesect kind="par"><title></title><para>Note that the length of the state buffer exceeds the length of the coefficient array by <computeroutput>blockSize-1</computeroutput> samples. The increased state buffer length allows circular addressing, which is traditionally used in FIR filters, to be avoided and yields a significant speed improvement. The state variables are updated after each block of data is processed.</para></simplesect>
<simplesect kind="par"><title>Instance Structure</title><para>The coefficients and state variables for a filter are stored together in an instance data structure. A separate instance structure must be defined for each filter and coefficient and state arrays cannot be shared among instances. There are separate instance structure declarations for each of the 3 supported data types.</para></simplesect>
<simplesect kind="par"><title>Initialization Functions</title><para>There is also an associated initialization function for each data type. The initialization function performs the following operations:<itemizedlist>
<listitem><para>Sets the values of the internal structure fields.</para></listitem><listitem><para>Zeros out the values in the state buffer. To do this manually without calling the init function, assign the follow subfields of the instance structure: numTaps, pCoeffs, mu, energy, x0, pState. Also set all of the values in pState to zero. For Q7, Q15, and Q31 the following fields must also be initialized; recipTable, postShift </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title></title><para>Instance structure cannot be placed into a const data section and it is recommended to use the initialization function. </para></simplesect>
<simplesect kind="par"><title>Fixed-Point Behavior</title><para>Care must be taken when using the Q15 and Q31 versions of the normalised LMS filter. The following issues must be considered:<itemizedlist>
<listitem><para>Scaling of coefficients</para></listitem><listitem><para>Overflow and saturation</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Scaling of Coefficients</title><para>Filter coefficients are represented as fractional values and coefficients are restricted to lie in the range <computeroutput>[-1 +1)</computeroutput>. The fixed-point functions have an additional scaling parameter <computeroutput>postShift</computeroutput>. At the output of the filter&apos;s accumulator is a shift register which shifts the result by <computeroutput>postShift</computeroutput> bits. This essentially scales the filter coefficients by <computeroutput>2^postShift</computeroutput> and allows the filter coefficients to exceed the range <computeroutput>[+1 -1)</computeroutput>. The value of <computeroutput>postShift</computeroutput> is set by the user based on the expected gain through the system being modeled.</para></simplesect>
<simplesect kind="par"><title>Overflow and Saturation</title><para>Overflow and saturation behavior of the fixed-point Q15 and Q31 versions are described separately as part of the function specific documentation below. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
