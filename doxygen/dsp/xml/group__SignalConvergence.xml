<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__SignalConvergence" kind="group">
    <compoundname>SignalConvergence</compoundname>
    <title>Signal Convergence Example</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Description:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para>Demonstrates the ability of an adaptive filter to &quot;learn&quot; the transfer function of a FIR lowpass filter using the Normalized LMS Filter, Finite Impulse Response (FIR) Filter, and Basic Math Functions.</para></simplesect>
<simplesect kind="par"><title>Algorithm:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para>The figure below illustrates the signal flow in this example. Uniformly distributed white noise is passed through an FIR lowpass filter. The output of the FIR filter serves as the reference input of the adaptive filter (normalized LMS filter). The white noise is input to the adaptive filter. The adaptive filter learns the transfer function of the FIR filter. The filter outputs two signals: (1) the output of the internal adaptive FIR filter, and (2) the error signal which is the difference between the adaptive filter and the reference output of the FIR filter. Over time as the adaptive filter learns the transfer function of the FIR filter, the first output approaches the reference output of the FIR filter, and the error signal approaches zero. </para></simplesect>
<simplesect kind="par"><title></title><para>The adaptive filter converges properly even if the input signal has a large dynamic range (i.e., varies from small to large values). The coefficients of the adaptive filter are initially zero, and then converge over 1536 samples. The internal function test_signal_converge() implements the stopping condition. The function checks if all of the values of the error signal have a magnitude below a threshold DELTA.</para></simplesect>
<simplesect kind="par"><title>Block Diagram:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para><image type="html" name="SignalFlow.png"></image>
</para></simplesect>
<simplesect kind="par"><title>Variables Description:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para><itemizedlist>
<listitem><para><computeroutput>testInput_f32</computeroutput> points to the input data </para></listitem>
<listitem><para><computeroutput>firStateF32</computeroutput> points to FIR state buffer </para></listitem>
<listitem><para><computeroutput>lmsStateF32</computeroutput> points to Normalised Least mean square FIR filter state buffer </para></listitem>
<listitem><para><computeroutput>FIRCoeff_f32</computeroutput> points to coefficient buffer </para></listitem>
<listitem><para><computeroutput>lmsNormCoeff_f32</computeroutput> points to Normalised Least mean square FIR filter coefficient buffer </para></listitem>
<listitem><para><computeroutput>wire1</computeroutput>, wir2, wire3 temporary buffers </para></listitem>
<listitem><para><computeroutput>errOutput</computeroutput>, err_signal temporary error buffers</para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>NMSIS DSP Software Library Functions Used:</title><para></para></simplesect>
<simplesect kind="par"><title></title><para><itemizedlist>
<listitem><para><ref refid="group__LMS__NORM_1ga39ba5def59568ef5db5a2da0f6632d0e" kindref="member">riscv_lms_norm_init_f32()</ref></para></listitem><listitem><para><ref refid="group__FIR_1gabc32b5613cbace1478d28da3654fd357" kindref="member">riscv_fir_init_f32()</ref></para></listitem><listitem><para><ref refid="group__FIR_1ga9609646d34fdf7b619a1dd845058e495" kindref="member">riscv_fir_f32()</ref></para></listitem><listitem><para><ref refid="group__LMS__NORM_1ga430d4faa1d3bc35f11c7161d32829b54" kindref="member">riscv_lms_norm_f32()</ref></para></listitem><listitem><para><ref refid="group__BasicScale_1ga7ca2deeac250c6fb6c6bb2796bc15ba6" kindref="member">riscv_scale_f32()</ref></para></listitem><listitem><para><ref refid="group__BasicAbs_1ga4a0cc36e5ca532df6ec097699347769d" kindref="member">riscv_abs_f32()</ref></para></listitem><listitem><para><ref refid="group__BasicSub_1ga2e1928fe086fbaea97c86fc3028d6c85" kindref="member">riscv_sub_f32()</ref></para></listitem><listitem><para><ref refid="group__Min_1ga4858d42639fee0082c0faceddd44dfda" kindref="member">riscv_min_f32()</ref></para></listitem><listitem><para><ref refid="group__copy_1ga2f4fb0541b4d514df044e543c6abfeb3" kindref="member">riscv_copy_f32()</ref></para></listitem></itemizedlist>
</para></simplesect>
<bold> Refer </bold> <ref refid="riscv_signal_converge_example_f32_8c-example" kindref="compound">riscv_signal_converge_example_f32.c</ref> </para>    </detaileddescription>
  </compounddef>
</doxygen>
